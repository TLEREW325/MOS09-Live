Imports System
Imports System.Windows.Forms
Imports System.Math
Imports System.IO
Imports System.Data
Imports System.Data.OleDb
Imports CrystalDecisions.Windows.Forms
Imports CrystalDecisions.ReportSource
Imports CrystalDecisions.CrystalReports.Engine
Imports CrystalDecisions.Shared
Imports System.Data.SqlClient
Imports System.Printing
Imports System.Drawing
Imports System.Drawing.Printing
Imports System.Runtime.InteropServices
Imports System.Runtime.Serialization.Formatters.Binary
Imports System.Drawing.Text
Public Class SOForm
    Inherits System.Windows.Forms.Form

    Protected Overloads Overrides ReadOnly Property CreateParams() As CreateParams
        Get
            Dim myCp As CreateParams = MyBase.CreateParams
            myCp.ClassStyle = myCp.ClassStyle Or CP_NOCLOSE_BUTTON
            Return myCp
        End Get
    End Property

    Private Const CP_NOCLOSE_BUTTON As Integer = &H200
    Dim FormName As String = "Sales Order Form"
    Dim LoadFreightCharge As Double = 0
    Dim LineChangesMade As String = "YES"
    Dim IsSalesOrderLocked As String = ""
    Dim LabelToolTip As New ToolTip
    Const GlobalCanCharge As Double = 4.46
    Dim CurrentSalesOrderKey As Integer = 0

    Private Declare Function GetSystemMenu Lib "user32" (ByVal hwnd As Integer, ByVal revert As Integer) As Integer
    Private Declare Function EnableMenuItem Lib "user32" (ByVal menu As Integer, ByVal ideEnableItem As Integer, ByVal enable As Integer) As Integer

    'Setup for barcode
    Dim LabelFormat(70), V00, V01, V02, V03, V04, V05, V06, V07, V08, V09, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, VDATA, VDATA1, VBAR, VBAR1 As String
    Dim LabelLines, BarCodeType, NumberOfLables, AnnealType As Integer
    Dim NumberOfLabels As Integer = 0

    'Define Integer Variables
    Dim LastTWDCountNumber, TWDCountNumber, GetPickCount, CheckPending, DropShipPONumber, PurchaseOrderHeaderKey, BoxCount, MAXDate As Integer
    Dim StatusDropShipPO, GetLineNumber, LastLineNumber, NextLineNumber, LastTransactionNumber, NextTransactionNumber, counter As Integer
    Dim CountLines, ShipmentLineNumber, NextPickLineNumber, LastPickLineNumber, LastBatchNumber, NextPickBatchNumber, LastPickBatchNumber, NextBatchNumber, LastShipmentNumber, NextShipmentNumber, GLBatchNumber As Integer
    Dim CheckTWELabelCount, CheckInvoiceStatus, CheckShipmentPartNumber, CheckShipmentCustomer, PLSOLineNumber, DSPONumber, CheckSOLines, LineNumber As Integer

    'Define Decimal Variables
    Dim FreightCharge, TotalSalesTax, ProductTotal, SOTotal, QuotedFreight, ShippingWeight As Double
    Dim NextPieceSold, QuantityCommitted, QuantityAvailable, QuantityPending, OrderTotal, OrderQuantity, OrderPrice, SaleAmount, TaxRate, SalesTax, TotalTax, PieceWeight, StandardCost, StandardPrice As Double
    Dim CheckShipStatus, CheckShipLineQuantity, CheckOrderQuantity, NewOrderQuantity, QuantityOpen, Quantity, TotalQuantityOpen As Double
    Dim TotalWeightShipped, ItemPieceWeight, TotalWeight, TotalWeightRunningTotal, FullBoxCount, LineBoxCount, UpdatedLineBoxCount As Double
    Dim NewCheckBBCCharge, CheckPreviousBBC, NominalDiameter, NominalLength, LastCustomerPrice, QuantityOnHand As Double
    Dim SalesTaxOpen, LineWeightOpen, OpenExtendedAmount, LineWeight, LineBoxes As Double
    Dim LineProductTotal, LineProductWeight, LineSalesTax, ShipmentTotal As Double
    Dim LineBoxesOpen, GetBoxWeight, PickQOH, FIFOExtendedAmount, FIFOCost, FIFOTransactionCost, FIFOLastPurchaseCost, EstExtendedCOS, EstTotalCOS, ExtendedAmount, Price, LastPurchaseCost, LastSalesPrice As Double
    Dim SalesTaxRate1, SalesTaxRate2, SalesTaxRate3 As Double

    'Define String Variables
    Dim BillToAddress1, BillToAddress2, BillToCity, BillToState, BillToZip, BillToCountry As String
    Dim ShipToName, ShipToAddress1, ShipToAddress2, ShipToCity, ShipToState, ShipToZip, ShipToCountry, ShipEmail As String
    Dim DeclaredValueAdded, SpecialLabelLine1, SpecialLabelLine2, SpecialLabelLine3, ThirdPartyShipper, CustomerID, CustomerName, FOB, CustomerClass, CustomerPO, Salesperson, ShipVia, HeaderComment, PRONumber, AdditionalShipTo, QuoteNumber As String
    Dim SOLinePartNumber, SOLineHeatNumber, SOLineLotNumber, SOLineComment As String
    Dim PaymentTerms, CustomerPOType, VendorID, ItemLongDescription, FOXCertType, CertDescription, CertificationType, OnHoldStatus, CheckBrokenBoxCharge, CheckPartNumber, AddAccessory, LineLeadTime, LineComment, SpecialInstructions, CustomerComment, PreferredShipper, LongDescription, VerifyItemID, ClearingAccount, SOStatus, OldPartNumber, ItemClass, GLCreditAccount As String
    Dim ShippingAccount, ShippingMethod, ShipAddress1, ShipAddress2, ShipCity, ShipState, ShipZip, ShipCountry, ShipName, GLDebitAccount As String
    Dim CertType, CertCode, PricingLevel, AccountingHold, CustomerClassType, DSVendor, ItemID, Description, PurchProdLineID As String
    Dim ShipViaCode As String = ""
    Dim CountryCodeFromState As String = ""
    Dim CountryNameFromState As String = ""
    Dim StateCode As String = ""
    Dim EditItemClass As String = ""
    Dim EditGLCreditAccount As String = ""
    Dim InsertItemClass As String = ""
    Dim InsertGLCreditAccount As String = ""
    Dim CustomerOpenReceivables, CustomerCreditLimit As Double

    'Variables for TWD Price Adjustments
    Dim AdjustedLastSalesPrice As Double = 0
    Dim CurrentPartNumber As String = ""

    'Define Date Variables
    Dim SalesOrderDate, ShippingDate As Date

    'Variable for Notification Pop-up
    Dim newItem As Boolean = False

    'Variables for Canadian Tax Editing
    Dim HSTValue, CanadianPST, CanadianHST, CanadianGST, TotalSalesTax1, TotalSalesTax2, TotalSalesTax3, PSTTaxRate, GSTTaxRate, HSTTaxRate, PSTExtendedAmount, GSTExtendedAmount, HSTExtendedAmount As Double

    'Define Variable for Insert
    Dim InsertOrderQuantity, InsertPrice, InsertExtendedAmount As Double

    'Variables to re-Expedite order to shipping
    Dim CheckIfShipmentExists, CountShipLines, CheckSalesOrderKey, CheckShipmentStatus As Integer
    Dim SerialNumber, CheckIfLinesChanged As String

    'Variables for Order Tracking
    Dim NumberOfShipments, NumberOfReturns, NumberOfInvoices As Integer
    Dim SOShipmentTotal, SOReturnTotal, SOInvoiceTotal, SODifference As Double

    'Variables for shipping
    Dim DeclaredValue As Double = 0
    Dim ShipMethod As String = ""
    Dim CheckShippingMethod As String = ""
    Dim AutoAddFreight, SVBillToName, SVBillToAddress1, SVBillToAddress2, SVBillToCity, SVBillToState, SVBillToZip As String

    'Variable to validate division
    Dim CheckDivision As String = ""

    'Initialize error variables
    Dim ErrorDate As String = ""
    Dim ErrorDescription As String = ""
    Dim ErrorUser As String = ""
    Dim ErrorComment As String = ""
    Dim ErrorDivision As String = ""
    Dim ErrorReferenceNumber As String = ""

    'Setup data connection and variables
    Dim con As SqlConnection = New SqlConnection("Data Source=TFP-SQL;Initial Catalog=TFPOperationsDatabase;Integrated Security=True;Connect Timeout=30")
    Dim con1 As SqlConnection = New SqlConnection("Data Source=TFP-SQL;async=true;Initial Catalog=TFPOperationsDatabase;Integrated Security=True;Connect Timeout=30")
    Dim cmd As SqlCommand
    Dim myAdapter, myAdapter1, myAdapter2, myAdapter3, myAdapter4, myAdapter5, myAdapter6, myAdapter7, myAdapter8, myAdapter9, myAdapter10, myAdapter11, myAdapter12, myAdapter13, myAdapter14, myAdapter15, myAdapter16, myAdapter17, myAdapter18 As New SqlDataAdapter
    Dim comBuilder As SqlCommandBuilder
    Dim ds, ds1, ds2, ds3, ds4, ds5, ds6, ds7, ds8, ds9, ds10, ds11, ds12, ds13, ds14, ds15, ds16, ds17, ds18 As DataSet
    Dim DivisionDataset As DataSet
    Dim DivisionAdapter As New SqlDataAdapter

    'check to make sure form is loaded
    Dim isLoaded As Boolean = False
    Dim needsSaved As Boolean = False
    Dim lastSO As String = ""

    Dim Suggest As SuggestDescriptionAPI
    Dim EditSuggest As SuggestDescriptionAPI
    Dim InsertSuggest As SuggestDescriptionAPI

    Private Sub SOForm_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Call Disable(Me)
        Me.CenterToScreen()

        'Form Login Record
        FormLoginRoutine()

        LoadCurrentDivision()

        If EmployeeSecurityCode > 1002 Then
            UnLockSalesOrderToolStripMenuItem.Visible = False
        End If

        'Load ability to change company if administrator
        If EmployeeCompanyCode = "ADM" Then
            cboSalesPersonID.Enabled = True
            cboDivisionID.Enabled = True
            cboDivisionID.Text = EmployeeCompanyCode
            cboSalesPersonID.Text = EmployeeSalespersonCode
        ElseIf EmployeeCompanyCode = "CBS" Then
            cboDivisionID.Text = EmployeeCompanyCode
            cboSalesPersonID.Text = EmployeeSalespersonCode
            cboDivisionID.Enabled = False
            cboSalesPersonID.Enabled = True
            cboCertType.Enabled = False
        ElseIf EmployeeCompanyCode = "TWD" Then
            cboCertType.Enabled = True
        Else
            cboDivisionID.Text = EmployeeCompanyCode
            cboSalesPersonID.Text = EmployeeSalespersonCode
            cboDivisionID.Enabled = False
            cboSalesPersonID.Enabled = False
            cboCertType.Enabled = False
        End If

        If cboDivisionID.Text = "TWD" And cboFOB.Text = "Medina" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            llPriceBracket.Visible = True
            lblPriceLabel.Visible = False
            Me.dgvSalesOrderLines.Columns("EstExtendedCOSColumn").Visible = False
        ElseIf cboDivisionID.Text = "TWD" And cboFOB.Text = "" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            llPriceBracket.Visible = True
            lblPriceLabel.Visible = False
            Me.dgvSalesOrderLines.Columns("EstExtendedCOSColumn").Visible = False
        ElseIf cboDivisionID.Text = "TWD" And (cboFOB.Text = "Downey" Or cboFOB.Text = "Hayward" Or cboFOB.Text = "Bessemer" Or cboFOB.Text = "Seattle" Or cboFOB.Text = "Lewisville" Or cboFOB.Text = "Lyndhurst" Or cboFOB.Text = "Phoenix" Or cboFOB.Text = "Renton" Or cboFOB.Text = "Lake Stevens") Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True
            llPriceBracket.Visible = True
            lblPriceLabel.Visible = False
            Me.dgvSalesOrderLines.Columns("EstExtendedCOSColumn").Visible = False
        ElseIf cboDivisionID.Text = "TWE" And (cboFOB.Text = "Downey" Or cboFOB.Text = "Hayward" Or cboFOB.Text = "Bessemer" Or cboFOB.Text = "Seattle" Or cboFOB.Text = "Lewisville" Or cboFOB.Text = "Lyndhurst" Or cboFOB.Text = "Phoenix" Or cboFOB.Text = "Renton" Or cboFOB.Text = "Lake Stevens") Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True
            llPriceBracket.Visible = True
            lblPriceLabel.Visible = False
            Me.dgvSalesOrderLines.Columns("EstExtendedCOSColumn").Visible = False
        ElseIf cboDivisionID.Text = "TST" And (cboFOB.Text = "Downey" Or cboFOB.Text = "Hayward" Or cboFOB.Text = "Bessemer" Or cboFOB.Text = "Seattle" Or cboFOB.Text = "Lewisville" Or cboFOB.Text = "Lyndhurst" Or cboFOB.Text = "Phoenix" Or cboFOB.Text = "Renton" Or cboFOB.Text = "Lake Stevens") Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True
            llPriceBracket.Visible = True
            lblPriceLabel.Visible = False
            Me.dgvSalesOrderLines.Columns("EstExtendedCOSColumn").Visible = False
        ElseIf cboDivisionID.Text <> "TWD" And cboDivisionID.Text <> "TWE" And cboDivisionID.Text <> "TST" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            llPriceBracket.Visible = False
            lblPriceLabel.Visible = True
        Else
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
        End If

        isLoaded = True

        If GlobalSONumber = 0 Then
            ClearData()
            cboSalesOrderNumber.SelectedIndex = -1
            cboSalesPersonID.Text = EmployeeSalespersonCode
        Else
            ClearDataOnChange()
            cboSalesOrderNumber.SelectedIndex = -1
            cboSalesOrderNumber.Text = GlobalSONumber
        End If

        LoadLabelToolTip()

        'Creates the call to Suggest API
        Suggest = New SuggestDescriptionAPI(cboPartDescription, lstPartDescriptionSuggest, cboPartNumber, ds12)
        EditSuggest = New SuggestDescriptionAPI(cboEditPartDescription, lstEditPartDescriptionSuggest, cboEditPartNumber, ds12)
        InsertSuggest = New SuggestDescriptionAPI(cboInsertDescription, lstInsertPartDescriptionSuggest, cboInsertPartNumber, ds12)

        cmdGenerateNewSO.Focus()
    End Sub

    Public Sub LoadCurrentDivision()
        'Load these for every form
        'Dim DivisionDataset As DataSet
        'Dim DivisionAdapter As New SqlDataAdapter

        Select Case EmployeeCompanyCode
            Case "ADM"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = True
            Case "ALB"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'ALB'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "ATL"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'ATL'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "CBS"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'CBS'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "CHT"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'CHT'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "CGO"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'CGO'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "DEN"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'DEN'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "HOU"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'HOU'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "LLH"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'LLH'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "SLC"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'SLC'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "TFF"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TFF'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "TFJ"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TFJ'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "TFP"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TFP' OR DivisionKey = 'TWD'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = True
            Case "TFT"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TFT'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "TOR"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TOR'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case "TWD"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TWD' OR DivisionKey = 'TFP' OR DivisionKey = 'TWE'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = True
            Case "TWE"
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable WHERE DivisionKey = 'TWE'", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
            Case Else
                cmd = New SqlCommand("SELECT DivisionKey FROM DivisionTable", con)
                If con.State = ConnectionState.Closed Then con.Open()
                DivisionDataset = New DataSet()
                DivisionAdapter.SelectCommand = cmd
                DivisionAdapter.Fill(DivisionDataset, "DivisionTable")
                cboDivisionID.DataSource = DivisionDataset.Tables("DivisionTable")
                con.Close()

                cboDivisionID.Text = EmployeeCompanyCode
                cboDivisionID.Enabled = False
        End Select
    End Sub

    Private Sub SOForm_FormClosing(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        If Not String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            unlockBatch()
        End If

        ClearVariables()
        ClearData()
        ClearDataOnChange()
        ClearAllDatagrids()
    End Sub

    Public Shared Sub Disable(ByVal form As System.Windows.Forms.Form)
        Select Case EnableMenuItem(GetSystemMenu(form.Handle.ToInt32, 0), &HF060, 1)
            Case &HFFFFFFFF
        End Select
    End Sub

    Private Sub SOForm_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Resize
        Call Disable(Me)
    End Sub

    'Load datasets into controls/datagrids

    Public Sub ShowData()
        Dim RowLineNumber As Integer

        cmd = New SqlCommand("SELECT * FROM SalesOrderLineQueryNoQOH WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey ORDER BY SalesOrderLineKey ASC", con)
        cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds = New DataSet()
        myAdapter.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter.Fill(ds, "SalesOrderLineQueryNoQOH")
        con.Close()

        dgvSalesOrderLines.DataSource = ds.Tables("SalesOrderLineQueryNoQOH")
        cboDeleteLine.DataSource = ds.Tables("SalesOrderLineQueryNoQOH")

        If cboDivisionID.Text = "TWE" Or cboDivisionID.Text = "SLC" Then
            Me.dgvSalesOrderLines.Columns("LabelCountColumn").Visible = True
        Else
            Me.dgvSalesOrderLines.Columns("LabelCountColumn").Visible = False
        End If

        Dim CountIndex As Integer = 0
        Dim PriceCheck As Double = 0

        For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
            Try
                PriceCheck = dgvSalesOrderLines.Rows(CountIndex).Cells("PriceColumn").Value
            Catch ex As Exception

            End Try

            If PriceCheck = 0 Then
                Try
                    dgvSalesOrderLines.Rows(CountIndex).Cells("PriceColumn").Style.ForeColor = Color.Red
                Catch ex As Exception
                    'skip
                End Try
            Else
                Try
                    dgvSalesOrderLines.Rows(CountIndex).Cells("PriceColumn").Style.ForeColor = Color.Black
                Catch ex As Exception
                    'skip
                End Try
            End If

            CountIndex = CountIndex + 1
        Next

        If Me.dgvSalesOrderLines.RowCount > 0 Then
            cboDeleteLine.SelectedIndex = -1
            Me.dgvSalesOrderLines.Rows(0).Cells(1).Selected = True

            cboDeleteLine.DataSource = ds.Tables("SalesOrderLineQueryNoQOH")

            RowLineNumber = Me.dgvSalesOrderLines.Rows(0).Cells("SalesOrderLineKeyColumn").Value

            cboDeleteLine.Text = RowLineNumber
        End If
    End Sub

    Private Sub LoadSalesOrderNumber()
        cmd = New SqlCommand("SELECT SalesOrderKey FROM SalesOrderHeaderTable WHERE DivisionKey = @DivisionKey AND SOStatus <> @SOStatus ORDER BY SalesOrderKey DESC", con)
        cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@SOStatus", SqlDbType.VarChar).Value = "QUOTE"
        ds1 = New DataSet()
        myAdapter1.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter1.Fill(ds1, "SalesOrderHeaderTable")
        con.Close()

        cboSalesOrderNumber.DataSource = ds1.Tables("SalesOrderHeaderTable")
        cboSalesOrderNumber.SelectedIndex = -1
    End Sub

    Private Sub LoadCustomerList()
        'Create commands to load Customer List for each division
        cmd = New SqlCommand("SELECT CustomerID FROM CustomerList WHERE DivisionID = @DivisionID AND CustomerClass <> @CustomerClass ORDER BY CustomerID", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@CustomerClass", SqlDbType.VarChar).Value = "DE-ACTIVATED"
        ds2 = New DataSet()
        myAdapter2.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter2.Fill(ds2, "CustomerList")
        con.Close()

        cboCustomerID.DataSource = ds2.Tables("CustomerList")
        cboCustomerID.SelectedIndex = -1
    End Sub

    Private Sub LoadItemList()
        'Create commands to load Item List for each division
        cmd = New SqlCommand("SELECT ItemID FROM ItemList WHERE DivisionID = @DivisionID AND ItemClass <> @ItemClass AND SalesProdLineID <> @SalesProdLineID ORDER BY ItemID", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@ItemClass", SqlDbType.VarChar).Value = "DEACTIVATED-PART"
        cmd.Parameters.Add("@SalesProdLineID", SqlDbType.VarChar).Value = "SUPPLY"
        ds3 = New DataSet()
        myAdapter3.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter3.Fill(ds3, "ItemList")
        con.Close()

        cboPartNumber.DataSource = ds3.Tables("ItemList")
        cboPartNumber.SelectedIndex = -1
    End Sub

    Public Sub ShowAdditionalShipTo()
        cmd = New SqlCommand("SELECT ShipToID FROM AdditionalShipTo WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID", con)
        cmd.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds4 = New DataSet()
        myAdapter4.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter4.Fill(ds4, "AdditionalShipTo")
        con.Close()

        cboShipToID.DataSource = ds4.Tables("AdditionalShipTo")
        cboShipToID.SelectedIndex = -1
    End Sub

    Public Sub LoadCertificationData()
        cmd = New SqlCommand("SELECT CertificationCode, CertificationType FROM CertificationType", con)
        ds5 = New DataSet()
        myAdapter5.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter5.Fill(ds5, "CertificationType")
        con.Close()

        cboCertCode.DataSource = ds5.Tables("CertificationType")
        cboCertType.DataSource = ds5.Tables("CertificationType")
        cboCertCode.SelectedIndex = -1
        cboCertType.SelectedIndex = -1
    End Sub

    Public Sub LoadCustomerClass()
        cmd = New SqlCommand("SELECT CustomerClassID FROM CustomerClass WHERE DivisionID = @DivisionID AND Status = @Status", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = "ACTIVE"
        ds6 = New DataSet()
        myAdapter6.SelectCommand = cmd
        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter6.Fill(ds6, "CustomerClass")
        con.Close()
        cboCustomerClass.DataSource = ds6.Tables("CustomerClass")
        cboCustomerClass.SelectedIndex = -1
    End Sub

    Private Sub LoadEditItemList()
        'Create commands to load Item List for each division
        cmd = New SqlCommand("SELECT ItemID, ShortDescription FROM ItemList WHERE DivisionID = @DivisionID AND ItemClass <> @ItemClass AND SalesProdLineID <> @SalesProdLineID ORDER BY ItemID", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@ItemClass", SqlDbType.VarChar).Value = "DEACTIVATED-PART"
        cmd.Parameters.Add("@SalesProdLineID", SqlDbType.VarChar).Value = "SUPPLY"
        ds7 = New DataSet()
        myAdapter7.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter7.Fill(ds7, "ItemList")
        con.Close()

        cboEditPartNumber.DataSource = ds7.Tables("ItemList")
        cboEditPartDescription.DataSource = ds7.Tables("ItemList")
        cboEditPartNumber.SelectedIndex = -1
        cboEditPartDescription.SelectedIndex = -1
    End Sub

    Public Sub LoadEditCertificationData()
        cmd = New SqlCommand("SELECT CertificationCode, CertificationType FROM CertificationType", con)
        ds8 = New DataSet()
        myAdapter8.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter8.Fill(ds8, "CertificationType")
        con.Close()

        cboEditCertType.DataSource = ds8.Tables("CertificationType")
        cboEditCertType.SelectedIndex = -1
    End Sub

    Public Sub LoadShipMethod()
        cmd = New SqlCommand("SELECT ShipMethID FROM ShipMethod", con)
        ds9 = New DataSet()
        myAdapter9.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter9.Fill(ds9, "ShipMethod")
        con.Close()

        cboShipVia.DataSource = ds9.Tables("ShipMethod")
    End Sub

    Public Sub LoadSalesID()
        cmd = New SqlCommand("SELECT SalesPersonID FROM EmployeeData WHERE DivisionKey = @DivisionKey", con)
        cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds10 = New DataSet()
        myAdapter10.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter10.Fill(ds10, "EmployeeData")
        con.Close()

        cboSalesPersonID.DataSource = ds10.Tables("EmployeeData")
        cboSalesPersonID.DisplayMember = "SalesPersonID"
        cboSalesPersonID.SelectedIndex = -1
    End Sub

    Private Sub LoadCustomerName()
        'Create commands to load Customer List for each division
        cmd = New SqlCommand("SELECT CustomerName FROM CustomerList WHERE DivisionID = @DivisionID AND CustomerClass <> @CustomerClass ORDER BY CustomerName", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@CustomerClass", SqlDbType.VarChar).Value = "DE-ACTIVATED"
        ds11 = New DataSet()
        myAdapter11.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter11.Fill(ds11, "CustomerList")
        con.Close()

        cboCustomerName.DataSource = ds11.Tables("CustomerList")
        cboCustomerName.SelectedIndex = -1
    End Sub

    Private Sub LoadPartDescription()
        'Create commands to load Item List for each division
        cmd = New SqlCommand("SELECT ShortDescription FROM ItemList WHERE DivisionID = @DivisionID AND ItemClass <> @ItemClass AND SalesProdLineID <> @SalesProdLineID ORDER BY ItemID", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@ItemClass", SqlDbType.VarChar).Value = "DEACTIVATED-PART"
        cmd.Parameters.Add("@SalesProdLineID", SqlDbType.VarChar).Value = "SUPPLY"
        ds12 = New DataSet()
        myAdapter12.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter12.Fill(ds12, "ItemList")
        con.Close()

        cboPartDescription.DataSource = ds12.Tables("ItemList")
        cboPartDescription.SelectedIndex = -1
    End Sub

    Public Sub LoadSOShipments()
        cmd = New SqlCommand("SELECT ShipmentNumber, SalesOrderKey, ShipDate, DivisionID, ShipVia, ShipmentTotal FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID ORDER BY ShipmentNumber ASC", con)
        cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds13 = New DataSet()
        myAdapter13.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter13.Fill(ds13, "ShipmentHeaderTable")
        con.Close()

        dgvSOShipments.DataSource = ds13.Tables("ShipmentHeaderTable")
    End Sub

    Public Sub LoadSOInvoices()
        cmd = New SqlCommand("SELECT InvoiceNumber, InvoiceDate, SalesOrderNumber, DivisionID, InvoiceTotal, PaymentsApplied, ShipmentNumber  FROM InvoiceHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID ORDER BY InvoiceNumber ASC", con)
        cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds14 = New DataSet()
        myAdapter14.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter14.Fill(ds14, "InvoiceHeaderTable")
        con.Close()

        dgvSOInvoices.DataSource = ds14.Tables("InvoiceHeaderTable")
    End Sub

    Public Sub LoadSOReturns()
        cmd = New SqlCommand("SELECT ReturnNumber, ReturnDate, DivisionID, SalesOrderNumber, ReturnTotal, Reason FROM ReturnProductHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID ORDER BY ReturnNumber ASC", con)
        cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds15 = New DataSet()
        myAdapter15.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter15.Fill(ds15, "ReturnProductHeaderTable")
        con.Close()

        dgvSOReturns.DataSource = ds15.Tables("ReturnProductHeaderTable")
    End Sub

    Public Sub LoadFOB()
        cmd = New SqlCommand("SELECT FOBName FROM FOBTable WHERE Status = @Status AND DivisionID = @DivisionID", con)
        cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = "ACTIVE"
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        ds16 = New DataSet()
        myAdapter16.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter16.Fill(ds16, "FOBTable")
        con.Close()

        cboFOB.DataSource = ds16.Tables("FOBTable")
        cboFOB.SelectedIndex = -1
    End Sub

    Public Sub LoadBillToCountry()
        cmd = New SqlCommand("SELECT Country FROM CountryCodes", con)
        If con.State = ConnectionState.Closed Then con.Open()
        ds16 = New DataSet()
        myAdapter16.SelectCommand = cmd
        myAdapter16.Fill(ds16, "CountryCodes")
        cboBTCountryName.DataSource = ds16.Tables("CountryCodes")
        con.Close()
        cboBTCountryName.SelectedIndex = -1
    End Sub

    Public Sub LoadShipToCountry()
        cmd = New SqlCommand("SELECT Country FROM CountryCodes", con)
        If con.State = ConnectionState.Closed Then con.Open()
        ds17 = New DataSet()
        myAdapter17.SelectCommand = cmd
        myAdapter17.Fill(ds17, "CountryCodes")
        cboSTCountryName.DataSource = ds17.Tables("CountryCodes")
        con.Close()
        cboSTCountryName.SelectedIndex = -1
    End Sub

    Private Sub LoadInsertItemList()
        'Create commands to load Item List for each division
        cmd = New SqlCommand("SELECT ItemID, ShortDescription FROM ItemList WHERE DivisionID = @DivisionID AND ItemClass <> @ItemClass AND SalesProdLineID <> @SalesProdLineID ORDER BY ItemID", con)
        cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@ItemClass", SqlDbType.VarChar).Value = "DEACTIVATED-PART"
        cmd.Parameters.Add("@SalesProdLineID", SqlDbType.VarChar).Value = "SUPPLY"
        ds18 = New DataSet()
        myAdapter18.SelectCommand = cmd

        If con.State = ConnectionState.Closed Then con.Open()
        myAdapter18.Fill(ds18, "ItemList")
        con.Close()

        cboInsertPartNumber.DataSource = ds18.Tables("ItemList")
        cboInsertDescription.DataSource = ds18.Tables("ItemList")
        cboInsertPartNumber.SelectedIndex = -1
        cboInsertDescription.SelectedIndex = -1
    End Sub

    'Load data sub-routines

    Public Sub LoadLabelToolTip()
        LabelToolTip.SetToolTip(lblUpdatedPrice, "Adjusted Price")
        LabelToolTip.ToolTipTitle = "Price"
        LabelToolTip.IsBalloon = False
        LabelToolTip.ToolTipIcon = ToolTipIcon.Info
        LabelToolTip.UseAnimation = False
    End Sub

    Public Sub LoadSalesOrderStatus()
        Dim GetSOStatusStatement As String = "SELECT SOStatus FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetSOStatusCommand As New SqlCommand(GetSOStatusStatement, con)
        GetSOStatusCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        GetSOStatusCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim GetDropShipNumberStatement As String = "SELECT DropShipPONumber FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetDropShipNumberCommand As New SqlCommand(GetDropShipNumberStatement, con)
        GetDropShipNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        GetDropShipNumberCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            SOStatus = CStr(GetSOStatusCommand.ExecuteScalar)
        Catch ex As Exception
            SOStatus = "OPEN"
        End Try
        Try
            StatusDropShipPO = CInt(GetDropShipNumberCommand.ExecuteScalar)
        Catch ex As Exception
            StatusDropShipPO = 0
        End Try
        con.Close()

        txtSOStatus.Text = SOStatus

        If SOStatus = "OPEN" Then
            chkDropShip.Checked = False
            cmdAddItem.Enabled = True
            cmdCopyBTAddress.Enabled = True
            cmdDelete.Enabled = True
            cmdSave.Enabled = True
            cmdDeleteLine.Enabled = True
            cmdEditSave.Enabled = True
            SaveToolStripMenuItem.Enabled = True
            ExpediteToShippingToolStripMenuItem.Enabled = True
            DeleteSalesOrderToolStripMenuItem.Enabled = True
            cmdExpediteOrder.Enabled = True
            cmdBillOnly.Enabled = True
            chkDropShip.Enabled = True
            chkDropShip.Checked = False
            Me.dgvSalesOrderLines.Columns("QuantityColumn").ReadOnly = False
            Me.dgvSalesOrderLines.Columns("PriceColumn").ReadOnly = False
            CheckForPendingShipments()
        ElseIf SOStatus = "DROPSHIP" Then
            chkDropShip.Checked = True
            cmdAddItem.Enabled = True
            cmdCopyBTAddress.Enabled = True
            cmdDelete.Enabled = True
            cmdSave.Enabled = True
            cmdExpediteOrder.Enabled = False
            cmdDeleteLine.Enabled = True
            cmdEditSave.Enabled = True
            SaveToolStripMenuItem.Enabled = True
            ExpediteToShippingToolStripMenuItem.Enabled = True
            DeleteSalesOrderToolStripMenuItem.Enabled = True
            chkDropShip.Enabled = True
            chkDropShip.Checked = True
            Me.dgvSalesOrderLines.Columns("QuantityColumn").ReadOnly = False
            Me.dgvSalesOrderLines.Columns("PriceColumn").ReadOnly = False
            CheckForPendingShipments()
        ElseIf SOStatus = "SHIPPED" Or SOStatus = "INVOICED" Then
            chkDropShip.Checked = True
            cmdAddItem.Enabled = True
            cmdCopyBTAddress.Enabled = True
            cmdDelete.Enabled = False
            cmdSave.Enabled = True
            cmdExpediteOrder.Enabled = True
            cmdDeleteLine.Enabled = True
            cmdEditSave.Enabled = True
            SaveToolStripMenuItem.Enabled = True
            ExpediteToShippingToolStripMenuItem.Enabled = True
            DeleteSalesOrderToolStripMenuItem.Enabled = False
            chkDropShip.Enabled = False
            chkDropShip.Checked = False
            Me.dgvSalesOrderLines.Columns("QuantityColumn").ReadOnly = False
            Me.dgvSalesOrderLines.Columns("PriceColumn").ReadOnly = False
            CheckForPendingShipments()
        ElseIf SOStatus = "CLOSED" And StatusDropShipPO > 0 Then
            chkDropShip.Checked = True
            LoadDropShipDetails()
            cmdAddItem.Enabled = False
            cmdCopyBTAddress.Enabled = False
            cmdDelete.Enabled = False
            cmdSave.Enabled = False
            cmdExpediteOrder.Enabled = False
            cmdBillOnly.Enabled = False
            cmdDeleteLine.Enabled = False
            cmdEditSave.Enabled = False
            SaveToolStripMenuItem.Enabled = False
            ExpediteToShippingToolStripMenuItem.Enabled = False
            DeleteSalesOrderToolStripMenuItem.Enabled = False
            chkDropShip.Enabled = False
            chkDropShip.Checked = True
            Me.dgvSalesOrderLines.Columns("QuantityColumn").ReadOnly = True
            Me.dgvSalesOrderLines.Columns("PriceColumn").ReadOnly = True
            Me.dgvSalesOrderLines.Columns("ExtendedAmountColumn").ReadOnly = True
            'CheckForPendingShipments()
        ElseIf SOStatus = "CLOSED" And StatusDropShipPO <= 0 Then
            cmdAddItem.Enabled = False
            cmdCopyBTAddress.Enabled = False
            cmdDelete.Enabled = False
            cmdExpediteOrder.Enabled = False
            cmdBillOnly.Enabled = False
            cmdSave.Enabled = False
            cmdDeleteLine.Enabled = False
            cmdEditSave.Enabled = False
            SaveToolStripMenuItem.Enabled = False
            ExpediteToShippingToolStripMenuItem.Enabled = False
            DeleteSalesOrderToolStripMenuItem.Enabled = False
            chkDropShip.Enabled = False
            chkDropShip.Checked = False
            Me.dgvSalesOrderLines.Columns("QuantityColumn").ReadOnly = True
            Me.dgvSalesOrderLines.Columns("PriceColumn").ReadOnly = True
            Me.dgvSalesOrderLines.Columns("ExtendedAmountColumn").ReadOnly = True
            'CheckForPendingShipments()
        Else
            cmdAddItem.Enabled = True
            cmdCopyBTAddress.Enabled = True
            cmdDelete.Enabled = True
            cmdExpediteOrder.Enabled = True
            cmdBillOnly.Enabled = True
            cmdSave.Enabled = True
            cmdDeleteLine.Enabled = True
            cmdEditSave.Enabled = True
            SaveToolStripMenuItem.Enabled = True
            ExpediteToShippingToolStripMenuItem.Enabled = True
            DeleteSalesOrderToolStripMenuItem.Enabled = True
            chkDropShip.Enabled = True
            Me.dgvSalesOrderLines.Columns("QuantityColumn").ReadOnly = False
            Me.dgvSalesOrderLines.Columns("PriceColumn").ReadOnly = False
            'CheckForPendingShipments()
        End If
    End Sub

    Public Sub LoadShipmentCustomer()
        If Val(cboSalesOrderNumber.Text) = 0 Then
            'Skip routine - if no Sales Order Number, no need to disable Customer Fields
            cboCustomerID.Enabled = True
            cboCustomerName.Enabled = True
        Else
            Dim CheckCustomerString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim CheckCustomerCommand As New SqlCommand(CheckCustomerString, con)
            CheckCustomerCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CheckCustomerCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckShipmentCustomer = CInt(CheckCustomerCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckShipmentCustomer = 0
            End Try
            con.Close()

            If CheckShipmentCustomer = 0 Then
                cboCustomerID.Enabled = True
                cboCustomerName.Enabled = True
            Else
                cboCustomerID.Enabled = False
                cboCustomerName.Enabled = False
            End If
        End If
    End Sub

    Public Sub LoadGLAccountNumber()
        Dim GetItemClass As String = ""

        Dim GetItemClassString As String = "SELECT ItemClass FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
        Dim GetItemClassCommand As New SqlCommand(GetItemClassString, con)
        GetItemClassCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
        GetItemClassCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetItemClass = CStr(GetItemClassCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetItemClass = "TW CA"
        End Try
        con.Close()

        Dim GLCreditAccountString As String = "SELECT GLInventoryAccount FROM ItemClass WHERE ItemClassID = @ItemClassID"
        Dim GLCreditAccountCommand As New SqlCommand(GLCreditAccountString, con)
        GLCreditAccountCommand.Parameters.Add("@ItemClassID", SqlDbType.VarChar).Value = GetItemClass

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GLCreditAccount = CStr(GLCreditAccountCommand.ExecuteScalar)
        Catch ex As System.Exception
            GLCreditAccount = "12100"
        End Try
        con.Close()

        ItemClass = GetItemClass
    End Sub

    Public Sub LoadEditGLAccountNumber()
        Dim ItemClassString As String = "SELECT ItemClass FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
        Dim ItemClassCommand As New SqlCommand(ItemClassString, con)
        ItemClassCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text
        ItemClassCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            EditItemClass = CStr(ItemClassCommand.ExecuteScalar)
        Catch ex As System.Exception
            EditItemClass = "TW CA"
        End Try
        con.Close()

        Dim GLCreditAccountString As String = "SELECT GLInventoryAccount FROM ItemClass WHERE ItemClassID = @ItemClassID"
        Dim GLCreditAccountCommand As New SqlCommand(GLCreditAccountString, con)
        GLCreditAccountCommand.Parameters.Add("@ItemClassID", SqlDbType.VarChar).Value = EditItemClass

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            EditGLCreditAccount = CStr(GLCreditAccountCommand.ExecuteScalar)
        Catch ex As System.Exception
            EditGLCreditAccount = "12100"
        End Try
        con.Close()
    End Sub

    Public Sub LoadInsertGLAccountNumber()
        Dim ItemClassString As String = "SELECT ItemClass FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
        Dim ItemClassCommand As New SqlCommand(ItemClassString, con)
        ItemClassCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text
        ItemClassCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            InsertItemClass = CStr(ItemClassCommand.ExecuteScalar)
        Catch ex As System.Exception
            InsertItemClass = "TW CA"
        End Try
        con.Close()

        Dim GLCreditAccountString As String = "SELECT GLInventoryAccount FROM ItemClass WHERE ItemClassID = @ItemClassID"
        Dim GLCreditAccountCommand As New SqlCommand(GLCreditAccountString, con)
        GLCreditAccountCommand.Parameters.Add("@ItemClassID", SqlDbType.VarChar).Value = InsertItemClass

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            InsertGLCreditAccount = CStr(GLCreditAccountCommand.ExecuteScalar)
        Catch ex As System.Exception
            InsertGLCreditAccount = "12100"
        End Try
        con.Close()
    End Sub

    Public Sub LoadDropShipDetails()
        Dim VendorIDString As String = "SELECT VendorID, PurchaseOrderHeaderKey FROM PurchaseOrderHeaderTable WHERE DropShipSalesOrderNumber = @DropShipSalesOrderNumber AND DivisionID = @DivisionID"
        Dim VendorIDCommand As New SqlCommand(VendorIDString, con)
        VendorIDCommand.Parameters.Add("@DropShipSalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        VendorIDCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = VendorIDCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("VendorID")) Then
                VendorID = ""
            Else
                VendorID = reader.Item("VendorID")
            End If
            If IsDBNull(reader.Item("PurchaseOrderHeaderKey")) Then
                PurchaseOrderHeaderKey = 0
            Else
                PurchaseOrderHeaderKey = reader.Item("PurchaseOrderHeaderKey")
            End If
        Else
            VendorID = ""
            PurchaseOrderHeaderKey = 0
        End If
        reader.Close()
        con.Close()

        txtDSPONumber.Text = PurchaseOrderHeaderKey
        txtDSVendorID.Text = VendorID

        'Check to see how many PO's have the same sales order number
        Dim CountDropShipPOs As Integer = 0

        Dim CountDropShipPOsString As String = "SELECT COUNT(PurchaseOrderHeaderKey) FROM PurchaseOrderHeaderTable WHERE DropShipSalesOrderNumber = @DropShipSalesOrderNumber AND DivisionID = @DivisionID"
        Dim CountDropShipPOsCommand As New SqlCommand(CountDropShipPOsString, con)
        CountDropShipPOsCommand.Parameters.Add("@DropShipSalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CountDropShipPOsCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountDropShipPOs = CInt(CountDropShipPOsCommand.ExecuteScalar)
        Catch ex As System.Exception
            CountDropShipPOs = 0
        End Try
        con.Close()

        If CountDropShipPOs <= 1 Then
            lblCountPOs.Text = ""
        Else
            lblCountPOs.Text = "This sales order has more than one PO linked to it."
        End If
    End Sub

    Public Sub LoadCertDataByType()
        Dim CertDescriptionString As String = "SELECT Description FROM CertificationType WHERE CertificationType = @CertificationType"
        Dim CertDescriptionCommand As New SqlCommand(CertDescriptionString, con)
        CertDescriptionCommand.Parameters.Add("@CertificationType", SqlDbType.VarChar).Value = cboCertType.Text

        Dim CertCodeString As String = "SELECT CertificationCode FROM CertificationType WHERE CertificationType = @CertificationType"
        Dim CertCodeCommand As New SqlCommand(CertCodeString, con)
        CertCodeCommand.Parameters.Add("@CertificationType", SqlDbType.VarChar).Value = cboCertType.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CertDescription = CStr(CertDescriptionCommand.ExecuteScalar)
        Catch ex As System.Exception
            CertDescription = ""
        End Try
        Try
            CertCode = CStr(CertCodeCommand.ExecuteScalar)
        Catch ex As System.Exception
            CertCode = ""
        End Try
        con.Close()

        txtCertDescription.Text = CertDescription
        cboCertCode.Text = CertCode
    End Sub

    Public Sub LoadCertDataByCode()
        Dim CertDescriptionString As String = "SELECT Description FROM CertificationType WHERE CertificationCode = @CertificationCode"
        Dim CertDescriptionCommand As New SqlCommand(CertDescriptionString, con)
        CertDescriptionCommand.Parameters.Add("@CertificationCode", SqlDbType.VarChar).Value = cboCertCode.Text

        Dim CertCodeString As String = "SELECT CertificationType FROM CertificationType WHERE CertificationCode = @CertificationCode"
        Dim CertCodeCommand As New SqlCommand(CertCodeString, con)
        CertCodeCommand.Parameters.Add("@CertificationCode", SqlDbType.VarChar).Value = cboCertCode.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CertDescription = CStr(CertDescriptionCommand.ExecuteScalar)
        Catch ex As System.Exception
            CertDescription = ""
        End Try
        Try
            CertCode = CStr(CertCodeCommand.ExecuteScalar)
        Catch ex As System.Exception
            CertCode = ""
        End Try
        con.Close()

        txtCertDescription.Text = CertDescription
        cboCertType.Text = CertType
    End Sub

    Public Sub LoadDefaultCertFromFOX()
        Dim FOXCertTypeString As String = "SELECT CertificationType FROM FOXTable WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
        Dim FOXCertTypeCommand As New SqlCommand(FOXCertTypeString, con)
        FOXCertTypeCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
        FOXCertTypeCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = "TWD"

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            FOXCertType = CStr(FOXCertTypeCommand.ExecuteScalar)
            If FOXCertType = "" Then FOXCertType = "0"
        Catch ex As System.Exception
            FOXCertType = "0"
        End Try
        con.Close()

        cboCertCode.Text = FOXCertType
    End Sub

    Public Sub LoadAddShipToData()
        'Clear Fields
        txtSTAddress1.Clear()
        txtSTAddress2.Clear()
        txtSTCity.Clear()
        txtSTCountry.Clear()
        txtSTName.Clear()
        txtSTZip.Clear()
        txtSTState.Clear()

        Dim Ship2Address1, Ship2Address2, Ship2City, Ship2State, Ship2Zip, Ship2Country, Ship2Name As String

        Dim GetAddShipToDataString As String = "SELECT * FROM AdditionalShipTo WHERE ShipToID = @ShipToID AND CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetAddShipToDataCommand As New SqlCommand(GetAddShipToDataString, con)
        GetAddShipToDataCommand.Parameters.Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
        GetAddShipToDataCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetAddShipToDataCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetAddShipToDataCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("Name")) Then
                Ship2Name = ""
            Else
                Ship2Name = reader.Item("Name")
            End If
            If IsDBNull(reader.Item("Address1")) Then
                Ship2Address1 = ""
            Else
                Ship2Address1 = reader.Item("Address1")
            End If
            If IsDBNull(reader.Item("Address2")) Then
                Ship2Address2 = ""
            Else
                Ship2Address2 = reader.Item("Address2")
            End If
            If IsDBNull(reader.Item("City")) Then
                Ship2City = ""
            Else
                Ship2City = reader.Item("City")
            End If
            If IsDBNull(reader.Item("State")) Then
                Ship2State = ""
            Else
                Ship2State = reader.Item("State")
            End If
            If IsDBNull(reader.Item("Zip")) Then
                Ship2Zip = ""
            Else
                Ship2Zip = reader.Item("Zip")
            End If
            If IsDBNull(reader.Item("Country")) Then
                Ship2Country = ""
            Else
                Ship2Country = reader.Item("Country")
            End If
        Else
            Ship2Name = ""
            Ship2Address1 = ""
            Ship2Address2 = ""
            Ship2City = ""
            Ship2State = ""
            Ship2Zip = ""
            Ship2Country = ""
        End If
        reader.Close()
        con.Close()

        txtSTAddress1.Text = Ship2Address1
        txtSTAddress2.Text = Ship2Address2
        txtSTCity.Text = Ship2City
        txtSTCountry.Text = Ship2Country
        txtSTZip.Text = Ship2Zip
        txtSTState.Text = Ship2State
        txtSTName.Text = Ship2Name
    End Sub

    Public Sub LoadDefaultShipTo()
        'Clear Fields
        txtSTAddress1.Clear()
        txtSTAddress2.Clear()
        txtSTCity.Clear()
        txtSTCountry.Clear()
        txtSTName.Clear()
        txtSTZip.Clear()
        txtSTState.Clear()
        cboShipToID.Text = ""

        Dim DefShip2Address1, DefShip2Address2, DefShip2City, DefShip2State, DefShip2Zip, DefShip2Country As String

        Dim GetDefaultShipToString As String = "SELECT ShipToAddress1, ShipToAddress2, ShipToCity, ShipToState, ShipToZip, ShipToCountry FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetDefaultShipToCommand As New SqlCommand(GetDefaultShipToString, con)
        GetDefaultShipToCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetDefaultShipToCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetDefaultShipToCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("ShipToAddress1")) Then
                DefShip2Address1 = ""
            Else
                DefShip2Address1 = reader.Item("ShipToAddress1")
            End If
            If IsDBNull(reader.Item("ShipToAddress2")) Then
                DefShip2Address2 = ""
            Else
                DefShip2Address2 = reader.Item("ShipToAddress2")
            End If
            If IsDBNull(reader.Item("ShipToCity")) Then
                DefShip2City = ""
            Else
                DefShip2City = reader.Item("ShipToCity")
            End If
            If IsDBNull(reader.Item("ShipToState")) Then
                DefShip2State = ""
            Else
                DefShip2State = reader.Item("ShipToState")
            End If
            If IsDBNull(reader.Item("ShipToZip")) Then
                DefShip2Zip = ""
            Else
                DefShip2Zip = reader.Item("ShipToZip")
            End If
            If IsDBNull(reader.Item("ShipToCountry")) Then
                DefShip2Country = ""
            Else
                DefShip2Country = reader.Item("ShipToCountry")
            End If
        Else
            DefShip2Address1 = ""
            DefShip2Address2 = ""
            DefShip2City = ""
            DefShip2State = ""
            DefShip2Zip = ""
            DefShip2Country = ""
        End If
        reader.Close()
        con.Close()

        txtSTAddress1.Text = DefShip2Address1
        txtSTAddress2.Text = DefShip2Address2
        txtSTCity.Text = DefShip2City
        txtSTCountry.Text = DefShip2Country
        txtSTZip.Text = DefShip2Zip
        txtSTState.Text = DefShip2State
        txtSTName.Text = "DEFAULT SHIP TO"
    End Sub

    Public Sub LoadSalesOrderData()
        Dim SOShippingAccount, SOShipName, SOShipAddress1, SOShipAddress2, SOShipCity, SOShipState, SOShipZip, SOShipCountry, SOShipEmail As String

        'Extract data from source table
        Dim GetSODataString As String = "SELECT * FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetSODataCommand As New SqlCommand(GetSODataString, con)
        GetSODataCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        GetSODataCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetSODataCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("SalesOrderDate")) Then
                SalesOrderDate = dtpSalesOrderDate.Value
            Else
                SalesOrderDate = reader.Item("SalesOrderDate")
            End If
            If IsDBNull(reader.Item("CustomerID")) Then
                CustomerID = ""
            Else
                CustomerID = reader.Item("CustomerID")
            End If
            If IsDBNull(reader.Item("CustomerPO")) Then
                CustomerPO = ""
            Else
                CustomerPO = reader.Item("CustomerPO")
            End If
            If IsDBNull(reader.Item("CustomerPOType")) Then
                CustomerPOType = ""
            Else
                CustomerPOType = reader.Item("CustomerPOType")
            End If
            If IsDBNull(reader.Item("Salesperson")) Then
                Salesperson = EmployeeSalespersonCode
            Else
                Salesperson = reader.Item("Salesperson")
            End If
            If IsDBNull(reader.Item("ShipVia")) Then
                ShipVia = ""
            Else
                ShipVia = reader.Item("ShipVia")
            End If
            If IsDBNull(reader.Item("ShippingDate")) Then
                ShippingDate = dtpShippingDate.Value
            Else
                ShippingDate = reader.Item("ShippingDate")
            End If
            If IsDBNull(reader.Item("HeaderComment")) Then
                HeaderComment = ""
            Else
                HeaderComment = reader.Item("HeaderComment")
            End If
            If IsDBNull(reader.Item("PRONumber")) Then
                PRONumber = ""
            Else
                PRONumber = reader.Item("PRONumber")
            End If
            If IsDBNull(reader.Item("FreightCharge")) Then
                LoadFreightCharge = 0
            Else
                LoadFreightCharge = reader.Item("FreightCharge")
            End If
            If IsDBNull(reader.Item("TotalSalesTax")) Then
                TotalSalesTax = 0
            Else
                TotalSalesTax = reader.Item("TotalSalesTax")
            End If
            If IsDBNull(reader.Item("ProductTotal")) Then
                ProductTotal = 0
            Else
                ProductTotal = reader.Item("ProductTotal")
            End If
            If IsDBNull(reader.Item("SOTotal")) Then
                SOTotal = 0
            Else
                SOTotal = reader.Item("SOTotal")
            End If
            If IsDBNull(reader.Item("SOStatus")) Then
                SOStatus = "OPEN"
            Else
                SOStatus = reader.Item("SOStatus")
            End If
            If IsDBNull(reader.Item("AdditionalShipTo")) Then
                AdditionalShipTo = ""
            Else
                AdditionalShipTo = reader.Item("AdditionalShipTo")
            End If
            If IsDBNull(reader.Item("QuoteNumber")) Then
                QuoteNumber = ""
            Else
                QuoteNumber = reader.Item("QuoteNumber")
            End If
            If IsDBNull(reader.Item("QuotedFreight")) Then
                QuotedFreight = 0
            Else
                QuotedFreight = reader.Item("QuotedFreight")
            End If
            If IsDBNull(reader.Item("ShippingWeight")) Then
                ShippingWeight = 0
            Else
                ShippingWeight = reader.Item("ShippingWeight")
            End If
            If IsDBNull(reader.Item("SpecialInstructions")) Then
                SpecialInstructions = ""
            Else
                SpecialInstructions = reader.Item("SpecialInstructions")
            End If
            If IsDBNull(reader.Item("DropShipPONumber")) Then
                DropShipPONumber = 0
            Else
                DropShipPONumber = reader.Item("DropShipPONumber")
            End If
            If IsDBNull(reader.Item("TotalSalesTax2")) Then
                TotalSalesTax2 = 0
            Else
                TotalSalesTax2 = reader.Item("TotalSalesTax2")
            End If
            If IsDBNull(reader.Item("TotalSalesTax3")) Then
                TotalSalesTax3 = 0
            Else
                TotalSalesTax3 = reader.Item("TotalSalesTax3")
            End If
            If IsDBNull(reader.Item("TotalEstCOS")) Then
                EstTotalCOS = 0
            Else
                EstTotalCOS = reader.Item("TotalEstCOS")
            End If
            If IsDBNull(reader.Item("TaxRate1")) Then
                SalesTaxRate1 = 0
            Else
                SalesTaxRate1 = reader.Item("TaxRate1")
            End If
            If IsDBNull(reader.Item("TaxRate2")) Then
                SalesTaxRate2 = 0
            Else
                SalesTaxRate2 = reader.Item("TaxRate2")
            End If
            If IsDBNull(reader.Item("TaxRate3")) Then
                SalesTaxRate3 = 0
            Else
                SalesTaxRate3 = reader.Item("TaxRate3")
            End If
            If IsDBNull(reader.Item("FOB")) Then
                FOB = "Medina"
            Else
                FOB = reader.Item("FOB")
            End If
            If IsDBNull(reader.Item("CustomerClass")) Then
                CustomerClass = "STANDARD"
            Else
                CustomerClass = reader.Item("CustomerClass")
            End If
            If IsDBNull(reader.Item("ShippingMethod")) Then
                ShippingMethod = ""
            Else
                ShippingMethod = reader.Item("ShippingMethod")
            End If
            If IsDBNull(reader.Item("ThirdPartyShipper")) Then
                ThirdPartyShipper = ""
            Else
                ThirdPartyShipper = reader.Item("ThirdPartyShipper")
            End If
            If IsDBNull(reader.Item("ShipToName")) Then
                SOShipName = ""
            Else
                SOShipName = reader.Item("ShipToName")
            End If
            If IsDBNull(reader.Item("ShipToAddress1")) Then
                SOShipAddress1 = ""
            Else
                SOShipAddress1 = reader.Item("ShipToAddress1")
            End If
            If IsDBNull(reader.Item("ShipToAddress2")) Then
                SOShipAddress2 = ""
            Else
                SOShipAddress2 = reader.Item("ShipToAddress2")
            End If
            If IsDBNull(reader.Item("ShipToCity")) Then
                SOShipCity = ""
            Else
                SOShipCity = reader.Item("ShipToCity")
            End If
            If IsDBNull(reader.Item("ShipToState")) Then
                SOShipState = ""
            Else
                SOShipState = reader.Item("ShipToState")
            End If
            If IsDBNull(reader.Item("ShipToZip")) Then
                SOShipZip = ""
            Else
                SOShipZip = reader.Item("ShipToZip")
            End If
            If IsDBNull(reader.Item("ShipToCountry")) Then
                SOShipCountry = ""
            Else
                SOShipCountry = reader.Item("ShipToCountry")
            End If
            If IsDBNull(reader.Item("ShipEmail")) Then
                SOShipEmail = ""
            Else
                SOShipEmail = reader.Item("ShipEmail")
            End If
            If IsDBNull(reader.Item("ShippingAccount")) Then
                SOShippingAccount = ""
            Else
                SOShippingAccount = reader.Item("ShippingAccount")
            End If
            If IsDBNull(reader.Item("SpecialLabelLine1")) Then
                SpecialLabelLine1 = ""
            Else
                SpecialLabelLine1 = reader.Item("SpecialLabelLine1")
            End If
            If IsDBNull(reader.Item("SpecialLabelLine2")) Then
                SpecialLabelLine2 = ""
            Else
                SpecialLabelLine2 = reader.Item("SpecialLabelLine2")
            End If
            If IsDBNull(reader.Item("SpecialLabelLine3")) Then
                SpecialLabelLine3 = ""
            Else
                SpecialLabelLine3 = reader.Item("SpecialLabelLine3")
            End If
        Else
            SalesOrderDate = dtpSalesOrderDate.Value
            CustomerID = ""
            CustomerPO = ""
            Salesperson = EmployeeSalespersonCode
            ShipVia = ""
            ShippingDate = dtpShippingDate.Value
            HeaderComment = ""
            PRONumber = ""
            LoadFreightCharge = 0
            TotalSalesTax = 0
            ProductTotal = 0
            SOTotal = 0
            AdditionalShipTo = ""
            QuoteNumber = ""
            QuotedFreight = 0
            ShippingWeight = 0
            SOStatus = "OPEN"
            SpecialInstructions = ""
            DropShipPONumber = 0
            CustomerPOType = ""
            TotalSalesTax2 = 0
            TotalSalesTax3 = 0
            SalesTaxRate1 = 0
            SalesTaxRate2 = 0
            SalesTaxRate3 = 0
            FOB = "Medina"
            CustomerClass = "STANDARD"
            ShippingMethod = ""
            ThirdPartyShipper = ""
            SOShipAddress1 = ""
            SOShipAddress2 = ""
            SOShipCity = ""
            SOShipCountry = ""
            SOShipName = ""
            SOShipState = ""
            SOShipZip = ""
            SOShipEmail = ""
            SOShippingAccount = ""
            SpecialLabelLine1 = ""
            SpecialLabelLine2 = ""
            SpecialLabelLine3 = ""
        End If
        reader.Close()
        con.Close()

        If ShippingMethod = "THIRD PARTY" Then
            txtThirdPartyShipper.Enabled = True
        Else
            txtThirdPartyShipper.Enabled = False
        End If

        txtSOStatus.Text = SOStatus
        dtpSalesOrderDate.Text = SalesOrderDate
        cboCustomerID.Text = CustomerID
        txtCustomerPO.Text = CustomerPO
        cboShipVia.Text = ShipVia
        cboShipMethod.Text = ShippingMethod
        dtpShippingDate.Text = ShippingDate
        txtComment.Text = HeaderComment
        txtPRONumber.Text = PRONumber
        lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
        lblOrderTotal.Text = FormatCurrency(SOTotal, 2)
        txtFreightQuoteNumber.Text = QuoteNumber
        txtFreightQuoteAmount.Text = QuotedFreight
        lblEstShippingWeight.Text = FormatNumber(ShippingWeight, 2)
        cboShipToID.Text = AdditionalShipTo
        txtDSPONumber.Text = DropShipPONumber
        txtShippingInstructions.Text = SpecialInstructions
        txtFreightCharges.Text = LoadFreightCharge
        lblFreightTotal.Text = FormatCurrency(LoadFreightCharge, 2)
        cboFOB.Text = FOB
        cboCustomerClass.Text = CustomerClass
        txtThirdPartyShipper.Text = ThirdPartyShipper
        txtFreightAccount.Text = SOShippingAccount
        txtSpecialLabelLine1.Text = SpecialLabelLine1
        txtSpecialLabelLine2.Text = SpecialLabelLine2
        txtSpecialLabelLine3.Text = SpecialLabelLine3

        'Load saved data last
        txtSTAddress1.Text = SOShipAddress1
        txtSTAddress2.Text = SOShipAddress2
        txtSTCity.Text = SOShipCity
        txtSTCountry.Text = SOShipCountry
        txtSTState.Text = SOShipState
        txtSTZip.Text = SOShipZip
        txtSTName.Text = SOShipName

        If SOShipEmail = "" Then
            txtShipEmail.Text = ShipEmail
        Else
            txtShipEmail.Text = SOShipEmail
        End If

        If Salesperson = "" Then
            cboSalesPersonID.Text = EmployeeSalespersonCode
        Else
            cboSalesPersonID.Text = Salesperson
        End If

        'Load Canada Defaults
        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            If TotalSalesTax2 <> 0 Then
                chkAddPST.Checked = True
            Else
                chkAddPST.Checked = False
            End If

            If TotalSalesTax3 <> 0 Then
                chkAddHST.Checked = True
                txtHSTRate.Visible = True
                txtHSTRate.Text = SalesTaxRate3
            Else
                chkAddHST.Checked = False
                txtHSTRate.Visible = False
            End If
        Else
            chkAddHST.Visible = False
            chkAddPST.Visible = False
            txtHSTRate.Visible = False
            If TotalSalesTax <> 0 Then chkTaxable.Checked = True
            If TotalSalesTax <> 0 And SalesTaxRate1 = 0 Then txtTaxRate.Text = Math.Round(TotalSalesTax / ProductTotal, 4)
        End If

        'Load tax values from sales order header, not by check changed event
        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            lblTaxTotal.Text = FormatCurrency(TotalSalesTax1, 2)
            lblPST.Text = FormatCurrency(TotalSalesTax2, 2)
            lblHST.Text = FormatCurrency(TotalSalesTax3, 2)
        Else
            lblTaxTotal.Text = FormatCurrency(TotalSalesTax, 2)
            If TotalSalesTax <> 0 Then chkTaxable.Checked = True
            If TotalSalesTax <> 0 And SalesTaxRate1 = 0 Then txtTaxRate.Text = Math.Round(TotalSalesTax / ProductTotal, 4)
        End If

        If SOStatus = "DROPSHIP" Or DropShipPONumber > 0 Then
            chkDropShip.Checked = True
            LoadDropShipDetails()
        Else
            chkDropShip.Checked = False
            txtDSPONumber.Clear()
            txtDSVendorID.Clear()
        End If
    End Sub

    Public Sub LoadItemData()
        Dim GetItemDataString As String = "SELECT PieceWeight, BoxCount, StandardCost, StandardPrice, NominalDiameter, AddAccessory, LongDescription, ItemClass, NominalLength FROM ItemListQuery WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
        Dim GetItemDataCommand As New SqlCommand(GetItemDataString, con)
        GetItemDataCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
        GetItemDataCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetItemDataCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("PieceWeight")) Then
                PieceWeight = 0
            Else
                PieceWeight = reader.Item("PieceWeight")
            End If
            If IsDBNull(reader.Item("BoxCount")) Then
                BoxCount = 0
            Else
                BoxCount = reader.Item("BoxCount")
            End If
            If IsDBNull(reader.Item("StandardCost")) Then
                StandardCost = 0
            Else
                StandardCost = reader.Item("StandardCost")
            End If
            If IsDBNull(reader.Item("StandardPrice")) Then
                StandardPrice = 0
            Else
                StandardPrice = reader.Item("StandardPrice")
            End If
            If IsDBNull(reader.Item("NominalDiameter")) Then
                NominalDiameter = 0
            Else
                NominalDiameter = reader.Item("NominalDiameter")
            End If
            If IsDBNull(reader.Item("AddAccessory")) Then
                AddAccessory = "NO"
            Else
                AddAccessory = reader.Item("AddAccessory")
            End If
            If IsDBNull(reader.Item("LongDescription")) Then
                ItemLongDescription = ""
            Else
                ItemLongDescription = reader.Item("LongDescription")
            End If
            If IsDBNull(reader.Item("ItemClass")) Then
                ItemClass = "TW SC"
            Else
                ItemClass = reader.Item("ItemClass")
            End If
            If IsDBNull(reader.Item("NominalLength")) Then
                NominalLength = 0
            Else
                NominalLength = reader.Item("NominalLength")
            End If
        Else
            PieceWeight = 0
            BoxCount = 0
            StandardCost = 0
            StandardPrice = 0
            NominalDiameter = 0
            AddAccessory = "NO"
            ItemLongDescription = ""
            ItemClass = "TW SC"
            NominalLength = 0
        End If
        reader.Close()
        con.Close()

        lblFullBoxCount.Text = BoxCount
        lblPieceWeight.Text = FormatNumber(PieceWeight, 2)
        txtLongDescription.Text = ItemLongDescription
        lblStdUnitCost.Text = FormatCurrency(StandardCost, 4)
        lblStdUnitPrice.Text = FormatCurrency(StandardPrice, 4)
    End Sub

    Public Sub LoadEditLineData()
        Dim EditPartNumber, EditPartDescription, EditCertType, EditLeadTime, EditLineComment As String
        Dim EditQuantity, EditPrice, EditExtendedAmount As Double

        Dim EditPartNumberString As String = "SELECT ItemID, Description, Quantity, Price, ExtendedAmount, LineComment, LeadTime, CertificationType FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
        Dim EditPartNumberCommand As New SqlCommand(EditPartNumberString, con)
        EditPartNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        EditPartNumberCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = EditPartNumberCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("ItemID")) Then
                EditPartNumber = ""
            Else
                EditPartNumber = reader.Item("ItemID")
            End If
            If IsDBNull(reader.Item("Description")) Then
                EditPartDescription = ""
            Else
                EditPartDescription = reader.Item("Description")
            End If
            If IsDBNull(reader.Item("Quantity")) Then
                EditQuantity = 0
            Else
                EditQuantity = reader.Item("Quantity")
            End If
            If IsDBNull(reader.Item("Price")) Then
                EditPrice = 0
            Else
                EditPrice = reader.Item("Price")
            End If
            If IsDBNull(reader.Item("ExtendedAmount")) Then
                EditExtendedAmount = 0
            Else
                EditExtendedAmount = reader.Item("ExtendedAmount")
            End If
            If IsDBNull(reader.Item("LineComment")) Then
                EditLineComment = ""
            Else
                EditLineComment = reader.Item("LineComment")
            End If
            If IsDBNull(reader.Item("LeadTime")) Then
                EditLeadTime = ""
            Else
                EditLeadTime = reader.Item("LeadTime")
            End If
            If IsDBNull(reader.Item("CertificationType")) Then
                EditCertType = "0"
            Else
                EditCertType = reader.Item("CertificationType")
            End If
        Else
            EditPartNumber = ""
            EditPartDescription = ""
            EditQuantity = 0
            EditPrice = 0
            EditExtendedAmount = 0
            EditLineComment = ""
            EditLeadTime = ""
            EditCertType = "0"
        End If
        reader.Close()
        con.Close()

        cboEditPartNumber.Text = EditPartNumber
        cboEditPartDescription.Text = EditPartDescription
        cboEditCertType.Text = EditCertType
        txtEditExtendedAmount.Text = FormatCurrency(EditExtendedAmount, 2)
        txtEditLeadTime.Text = EditLeadTime
        txtEditLineComments.Text = EditLineComment
        txtEditPrice.Text = EditPrice
        txtEditQuantity.Text = EditQuantity
    End Sub

    Public Sub LoadCheckShipmentPartNumber()
        Dim CheckShipmentPartString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentLineQuery WHERE SalesOrderKey = @SalesOrderKey AND SOLineNumber = @SOLineNumber AND DivisionID = @DivisionID"
        Dim CheckShipmentPartCommand As New SqlCommand(CheckShipmentPartString, con)
        CheckShipmentPartCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CheckShipmentPartCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
        CheckShipmentPartCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckShipmentPartNumber = CInt(CheckShipmentPartCommand.ExecuteScalar)
        Catch ex As System.Exception
            CheckShipmentPartNumber = 0
        End Try
        con.Close()

        If CheckShipmentPartNumber = 0 Then
            cboEditPartNumber.Enabled = True
            cboEditPartDescription.Enabled = True
        Else
            cboEditPartNumber.Enabled = False
            cboEditPartDescription.Enabled = False
        End If
    End Sub

    Public Sub LoadCustomerData()
        'Clear Fields
        txtSTAddress1.Clear()
        txtSTAddress2.Clear()
        txtSTCity.Clear()
        txtSTCountry.Clear()
        txtSTName.Clear()
        txtSTZip.Clear()
        txtSTState.Clear()
        txtShipEmail.Clear()
        cboShipToID.Text = ""

        'Extract data from source table
        Dim GetCustomerDataString As String = "SELECT * FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetCustomerDataCommand As New SqlCommand(GetCustomerDataString, con)
        GetCustomerDataCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetCustomerDataCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetCustomerDataCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("ShipToAddress1")) Then
                ShipToAddress1 = ""
            Else
                ShipToAddress1 = reader.Item("ShipToAddress1")
            End If
            If IsDBNull(reader.Item("ShipToAddress2")) Then
                ShipToAddress2 = ""
            Else
                ShipToAddress2 = reader.Item("ShipToAddress2")
            End If
            If IsDBNull(reader.Item("ShipToCity")) Then
                ShipToCity = ""
            Else
                ShipToCity = reader.Item("ShipToCity")
            End If
            If IsDBNull(reader.Item("ShipToState")) Then
                ShipToState = ""
            Else
                ShipToState = reader.Item("ShipToState")
            End If
            If IsDBNull(reader.Item("ShipToZip")) Then
                ShipToZip = ""
            Else
                ShipToZip = reader.Item("ShipToZip")
            End If
            If IsDBNull(reader.Item("ShipToCountry")) Then
                ShipToCountry = ""
            Else
                ShipToCountry = reader.Item("ShipToCountry")
            End If
            If IsDBNull(reader.Item("BillToAddress1")) Then
                BillToAddress1 = ""
            Else
                BillToAddress1 = reader.Item("BillToAddress1")
            End If
            If IsDBNull(reader.Item("BillToAddress2")) Then
                BillToAddress2 = ""
            Else
                BillToAddress2 = reader.Item("BillToAddress2")
            End If
            If IsDBNull(reader.Item("BillToCity")) Then
                BillToCity = ""
            Else
                BillToCity = reader.Item("BillToCity")
            End If
            If IsDBNull(reader.Item("BillToState")) Then
                BillToState = ""
            Else
                BillToState = reader.Item("BillToState")
            End If
            If IsDBNull(reader.Item("BillToZip")) Then
                BillToZip = ""
            Else
                BillToZip = reader.Item("BillToZip")
            End If
            If IsDBNull(reader.Item("BillToCountry")) Then
                BillToCountry = ""
            Else
                BillToCountry = reader.Item("BillToCountry")
            End If
            If IsDBNull(reader.Item("SalesTaxRate")) Then
                SalesTaxRate1 = 0
            Else
                SalesTaxRate1 = reader.Item("SalesTaxRate")
            End If
            If IsDBNull(reader.Item("SalesTaxRate2")) Then
                SalesTaxRate2 = 0
            Else
                SalesTaxRate2 = reader.Item("SalesTaxRate2")
            End If
            If IsDBNull(reader.Item("SalesTaxRate3")) Then
                SalesTaxRate3 = 0
            Else
                SalesTaxRate3 = reader.Item("SalesTaxRate3")
            End If
            If IsDBNull(reader.Item("CustomerClass")) Then
                CustomerClass = ""
            Else
                CustomerClass = reader.Item("CustomerClass")
            End If
            If IsDBNull(reader.Item("CustomerName")) Then
                CustomerName = ""
            Else
                CustomerName = reader.Item("CustomerName")
            End If
            If IsDBNull(reader.Item("PreferredShipper")) Then
                PreferredShipper = ""
            Else
                PreferredShipper = reader.Item("PreferredShipper")
            End If
            If IsDBNull(reader.Item("ShippingDetails")) Then
                CustomerComment = ""
            Else
                CustomerComment = reader.Item("ShippingDetails")
            End If
            If IsDBNull(reader.Item("OnHoldStatus")) Then
                OnHoldStatus = "NO"
            Else
                OnHoldStatus = reader.Item("OnHoldStatus")
            End If
            If IsDBNull(reader.Item("AccountingHold")) Then
                AccountingHold = "NO"
            Else
                AccountingHold = reader.Item("AccountingHold")
            End If
            If IsDBNull(reader.Item("PricingLevel")) Then
                PricingLevel = ""
            Else
                PricingLevel = reader.Item("PricingLevel")
            End If
            If IsDBNull(reader.Item("ShipEmail")) Then
                ShipEmail = ""
            Else
                ShipEmail = reader.Item("ShipEmail")
            End If
            If IsDBNull(reader.Item("PaymentTerms")) Then
                PaymentTerms = ""
            Else
                PaymentTerms = reader.Item("PaymentTerms")
            End If
            If IsDBNull(reader.Item("CreditLimit")) Then
                CustomerCreditLimit = 0
            Else
                CustomerCreditLimit = reader.Item("CreditLimit")
            End If
        Else
            PricingLevel = ""
            ShipToAddress1 = ""
            ShipToAddress2 = ""
            ShipToCity = ""
            ShipToState = ""
            ShipToZip = ""
            ShipToCountry = ""
            BillToAddress1 = ""
            BillToAddress2 = ""
            BillToCity = ""
            BillToState = ""
            BillToZip = ""
            BillToCountry = ""
            SalesTaxRate1 = 0
            SalesTaxRate2 = 0
            SalesTaxRate3 = 0
            CustomerClass = ""
            CustomerName = ""
            PreferredShipper = ""
            CustomerComment = ""
            OnHoldStatus = "NO"
            AccountingHold = "NO"
            ShipEmail = ""
            PaymentTerms = "N30"
            CustomerCreditLimit = 0
        End If
        reader.Close()
        con.Close()

        'Credit Hold
        If OnHoldStatus = "YES" Or AccountingHold = "YES" Then
            cboCustomerID.ForeColor = Color.Red
            cboCustomerName.ForeColor = Color.Red
            gpxDropShipDefaults.Enabled = False
        Else
            cboCustomerID.ForeColor = Color.Black
            cboCustomerName.ForeColor = Color.Black
            gpxDropShipDefaults.Enabled = True
        End If

        'Display credit limit data
        Dim CustomerOpenReceivablesString As String = "SELECT SUM(InvoiceAmountOpen) FROM ARAgingCategory WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim CustomerOpenReceivablesCommand As New SqlCommand(CustomerOpenReceivablesString, con)
        CustomerOpenReceivablesCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        CustomerOpenReceivablesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CustomerOpenReceivables = CDbl(CustomerOpenReceivablesCommand.ExecuteScalar)
        Catch ex As System.Exception
            CustomerOpenReceivables = 0
        End Try
        con.Close()

        If CustomerCreditLimit = 0 Or CustomerOpenReceivables = 0 Then
            'Skip
        Else
            If CustomerOpenReceivables > CustomerCreditLimit Then
                lblCreditLimit.Text = "Customer balance is > credit limit."
            Else
                lblCreditLimit.Text = ""
            End If
        End If

        If PaymentTerms = "COD" Then
            lblPaymentTerms.Text = "COD Customer - collect payment before delivery"
        ElseIf PaymentTerms = "CREDIT CARD" Then
            lblPaymentTerms.Text = "Credit Card - get Card Info"
        ElseIf PaymentTerms = "PREPAID" Then
            lblPaymentTerms.Text = "Prepaid - collect payment in advance."
        Else
            lblPaymentTerms.Text = ""
        End If

        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            chkTaxable.Visible = False
        Else
            chkTaxable.Visible = True

            If SalesTaxRate1 > 0 Then
                chkTaxable.Checked = True
            Else
                chkTaxable.Checked = False
            End If
        End If

        'Load customer data into text fields
        txtSTAddress1.Text = ShipToAddress1
        txtSTAddress2.Text = ShipToAddress2
        txtSTCity.Text = ShipToCity
        txtSTCountry.Text = ShipToCountry
        txtSTZip.Text = ShipToZip
        txtSTState.Text = ShipToState
        txtShipEmail.Text = ShipEmail
        txtBTAddress1.Text = BillToAddress1
        txtBTAddress2.Text = BillToAddress2
        txtBTCity.Text = BillToCity
        txtBTCountry.Text = BillToCountry
        txtBTZip.Text = BillToZip
        txtBTState.Text = BillToState
        cboCustomerName.Text = CustomerName
        txtShippingInstructions.Text = CustomerComment
        txtTaxRate.Text = SalesTaxRate1
        cboCustomerClass.Text = CustomerClass
        lblPricingLevel.Text = PricingLevel

        If PreferredShipper <> "" Then
            cboShipVia.SelectedText = -1
            cboShipVia.Text = PreferredShipper
        End If
    End Sub

    Public Sub LoadLastSalesPriceTWDRevised()
        'Declare variables
        Dim MaxDate As Integer = 0
        Dim GetItemClass As String = ""
        Dim GetSPL As String = ""
        Dim GetYearPricingDate As Date
        Dim LastSalesPrice As Double = 0
        Dim AdjustedLastSalesPrice As Double = 0
        Dim GetBracketNumber As Integer = 0
        Dim GetPriceAdjustmentPercentage1 As Double = 0
        Dim GetPriceAdjustmentPercentage2 As Double = 0
        Dim GetPriceAdjustmentPercentage3 As Double = 0
        Dim GetPriceAdjustmentPercentage4 As Double = 0
        Dim GetPriceAdjustmentPercentage5 As Double = 0
        Dim GetPriceAdjustmentPercentage6 As Double = 0
        '***************************************************************************************
        'Get Item Class of part (as well as if it is stainless)
        Dim GetItemClassStatement As String = "SELECT ItemClass FROM ItemList WHERE DivisionID = @DivisionID AND ItemID = @ItemID"
        Dim GetItemClassCommand As New SqlCommand(GetItemClassStatement, con)
        GetItemClassCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetItemClassCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetItemClass = CStr(GetItemClassCommand.ExecuteScalar)
        Catch ex As Exception
            GetItemClass = ""
        End Try
        con.Close()

        Dim GetSPLStatement As String = "SELECT SalesProdLineID FROM ItemList WHERE DivisionID = @DivisionID AND ItemID = @ItemID"
        Dim GetSPLCommand As New SqlCommand(GetSPLStatement, con)
        GetSPLCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetSPLCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetSPL = CStr(GetSPLCommand.ExecuteScalar)
        Catch ex As Exception
            GetSPL = ""
        End Try
        con.Close()

        If cboCustomerID.Text = "" Then
            '***************************************************************************************
            'Get last sales date from invoice line table
            Dim MAXDateStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE DivisionID = @DivisionID AND ItemID = @ItemID"
            Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
            MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            MAXDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                MaxDate = CInt(MAXDateCommand.ExecuteScalar)
            Catch ex As Exception
                MaxDate = 0
            End Try
            con.Close()

            Dim GetYearPricingDateStatement As String = "SELECT SalesOrderDate FROM SalesOrderLineQuery WHERE DivisionID = @DivisionID AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
            Dim GetYearPricingDateCommand As New SqlCommand(GetYearPricingDateStatement, con)
            GetYearPricingDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            GetYearPricingDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            GetYearPricingDateCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MaxDate

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetYearPricingDate = CDate(GetYearPricingDateCommand.ExecuteScalar)
            Catch ex As Exception
                GetYearPricingDate = Today()
            End Try
            con.Close()

            Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE DivisionID = @DivisionID AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
            Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
            LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MaxDate

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                LastSalesPrice = CDbl(LastPriceCommand.ExecuteScalar)
            Catch ex As Exception
                LastSalesPrice = 0
            End Try
            con.Close()

            'If price date is beyond the bracket, exit routine
            If GetYearPricingDate > "4/30/2022" Then
                'Pricing is current
                LastSalesPrice = Math.Round(LastSalesPrice, 4)
                txtPricePerUnit.Text = LastSalesPrice
                lblLastSalePrice.Text = LastSalesPrice
                lblUpdatedPrice.Visible = False

                Exit Sub
            Else
                'Determine the Price Increase Bracket it is in
                Dim GetBracketNumberStatement As String = "SELECT CostTierNumber FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND @PriceDate BETWEEN BeginDate AND EndDate"
                Dim GetBracketNumberCommand As New SqlCommand(GetBracketNumberStatement, con)
                GetBracketNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetBracketNumberCommand.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                GetBracketNumberCommand.Parameters.Add("@PriceDate", SqlDbType.VarChar).Value = GetYearPricingDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetBracketNumber = CInt(GetBracketNumberCommand.ExecuteScalar)
                Catch ex As Exception
                    GetBracketNumber = 0
                End Try
                con.Close()

                Select Case GetBracketNumber
                    Case 1
                        'Increase price for 6 brackets (plus stainless)

                        'Get % for first bracket (Tier 1)
                        Dim GetPercentage1Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage1Command As New SqlCommand(GetPercentage1Statement, con)
                        GetPercentage1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage1Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage1Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 1

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage1 = CDbl(GetPercentage1Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage1 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage1)

                        'Get % for second bracket (Tier 2)
                        Dim GetPercentage2Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage2Command As New SqlCommand(GetPercentage2Statement, con)
                        GetPercentage2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage2Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage2Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 2

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage2 = CDbl(GetPercentage2Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage2 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage2)

                        'Get % for third bracket (Tier 3)
                        Dim GetPercentage3Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage3Command As New SqlCommand(GetPercentage3Statement, con)
                        GetPercentage3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage3Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage3Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage3 = CDbl(GetPercentage3Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage3 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" Then
                            GetPriceAdjustmentPercentage3 = 0.05
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage3)

                        'Get % for fourth bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for fifth bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 2
                        'Increase price for 5 brackets (plus stainless)

                        'Get % for first bracket (Tier 2)
                        Dim GetPercentage2Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage2Command As New SqlCommand(GetPercentage2Statement, con)
                        GetPercentage2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage2Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage2Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 2

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage2 = CDbl(GetPercentage2Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage2 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage2)

                        'Get % for second bracket (Tier 3)
                        Dim GetPercentage3Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage3Command As New SqlCommand(GetPercentage3Statement, con)
                        GetPercentage3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage3Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage3Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage3 = CDbl(GetPercentage3Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage3 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" Then
                            GetPriceAdjustmentPercentage3 = 0.05
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage3)

                        'Get % for third bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for fourth bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 3
                        'Increase price for FOUR brackets (plus stainless)

                        'Get % for first bracket (Tier 3)
                        Dim GetPercentage3Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage3Command As New SqlCommand(GetPercentage3Statement, con)
                        GetPercentage3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage3Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage3Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage3 = CDbl(GetPercentage3Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage3 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" Then
                            GetPriceAdjustmentPercentage3 = 0.05
                        End If

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage3)

                        'Get % for second bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for third bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 4
                        'Increase price for THREE brackets (Tier 4) plus stainless

                        'Get % for first bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for second bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 5
                        'Increase price for 2 bracketS (Tier 5) plus stainless

                        'Get % for first bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 6
                        'Increase price for 1 bracket (Tier 6)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case Else
                        'Pricing is current
                        LastSalesPrice = Math.Round(LastSalesPrice, 4)
                        txtPricePerUnit.Text = FormatCurrency(LastSalesPrice, 4)
                        lblLastSalePrice.Text = FormatCurrency(LastSalesPrice, 4)
                        lblUpdatedPrice.Visible = False
                        Exit Sub
                End Select
            End If
            '***************************************************************************************
        Else   'Load last price for specific customer
            '***************************************************************************************
            'Get last sales date from invoice line table
            Dim MAXDateStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE DivisionID = @DivisionID AND ItemID = @ItemID AND CustomerID = @CustomerID"
            Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
            MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            MAXDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            MAXDateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                MaxDate = CInt(MAXDateCommand.ExecuteScalar)
            Catch ex As Exception
                MaxDate = 0
            End Try
            con.Close()

            Dim GetYearPricingDateStatement As String = "SELECT SalesOrderDate FROM SalesOrderLineQuery WHERE DivisionID = @DivisionID AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
            Dim GetYearPricingDateCommand As New SqlCommand(GetYearPricingDateStatement, con)
            GetYearPricingDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            GetYearPricingDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            GetYearPricingDateCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MaxDate

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetYearPricingDate = CDate(GetYearPricingDateCommand.ExecuteScalar)
            Catch ex As Exception
                GetYearPricingDate = Today()
            End Try
            con.Close()

            Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE DivisionID = @DivisionID AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
            Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
            LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MaxDate

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                LastSalesPrice = CDbl(LastPriceCommand.ExecuteScalar)
            Catch ex As Exception
                LastSalesPrice = 0
            End Try
            con.Close()

            'If price date is beyond the bracket, exit routine
            If GetYearPricingDate > "4/30/2022" Then
                'Pricing is current
                LastSalesPrice = Math.Round(LastSalesPrice, 4)
                txtPricePerUnit.Text = LastSalesPrice
                lblLastSalePrice.Text = LastSalesPrice
                lblUpdatedPrice.Visible = False

                Exit Sub
            Else
                '***************************************************************************************
                'Determine the Price Increase Bracket it is in
                Dim GetBracketNumberStatement As String = "SELECT CostTierNumber FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND @PriceDate BETWEEN BeginDate AND EndDate"
                Dim GetBracketNumberCommand As New SqlCommand(GetBracketNumberStatement, con)
                GetBracketNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetBracketNumberCommand.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                GetBracketNumberCommand.Parameters.Add("@PriceDate", SqlDbType.VarChar).Value = GetYearPricingDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetBracketNumber = CInt(GetBracketNumberCommand.ExecuteScalar)
                Catch ex As Exception
                    GetBracketNumber = 0
                End Try
                con.Close()

                Select Case GetBracketNumber
                    Case 1
                        'Increase price for 6 brackets (plus stainless)

                        'Get % for first bracket (Tier 1)
                        Dim GetPercentage1Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage1Command As New SqlCommand(GetPercentage1Statement, con)
                        GetPercentage1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage1Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage1Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 1

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage1 = CDbl(GetPercentage1Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage1 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage1)

                        'Get % for second bracket (Tier 2)
                        Dim GetPercentage2Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage2Command As New SqlCommand(GetPercentage2Statement, con)
                        GetPercentage2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage2Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage2Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 2

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage2 = CDbl(GetPercentage2Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage2 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage2)

                        'Get % for third bracket (Tier 3)
                        Dim GetPercentage3Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage3Command As New SqlCommand(GetPercentage3Statement, con)
                        GetPercentage3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage3Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage3Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage3 = CDbl(GetPercentage3Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage3 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" Then
                            GetPriceAdjustmentPercentage3 = 0.05
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage3)

                        'Get % for fourth bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for fifth bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 2
                        'Increase price for 5 brackets (plus stainless)

                        'Get % for first bracket (Tier 2)
                        Dim GetPercentage2Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage2Command As New SqlCommand(GetPercentage2Statement, con)
                        GetPercentage2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage2Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage2Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 2

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage2 = CDbl(GetPercentage2Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage2 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage2)

                        'Get % for second bracket (Tier 3)
                        Dim GetPercentage3Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage3Command As New SqlCommand(GetPercentage3Statement, con)
                        GetPercentage3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage3Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage3Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage3 = CDbl(GetPercentage3Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage3 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" Then
                            GetPriceAdjustmentPercentage3 = 0.05
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage3)

                        'Get % for third bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for fourth bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 3
                        'Increase price for FOUR brackets (plus stainless)

                        'Get % for first bracket (Tier 3)
                        Dim GetPercentage3Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage3Command As New SqlCommand(GetPercentage3Statement, con)
                        GetPercentage3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage3Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage3Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage3 = CDbl(GetPercentage3Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage3 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" Then
                            GetPriceAdjustmentPercentage3 = 0.05
                        End If

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage3)

                        'Get % for second bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for third bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 4
                        'Increase price for THREE brackets (Tier 4) plus stainless

                        'Get % for first bracket (Tier 4)
                        Dim GetPercentage4Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage4Command As New SqlCommand(GetPercentage4Statement, con)
                        GetPercentage4Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage4Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage4Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 4

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage4 = CDbl(GetPercentage4Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage4 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage4)

                        'Get % for second bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 5
                        'Increase price for 2 bracketS (Tier 5) plus stainless

                        'Get % for first bracket (Tier 5)
                        Dim GetPercentage5Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage5Command As New SqlCommand(GetPercentage5Statement, con)
                        GetPercentage5Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage5Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage5Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 5

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage5 = CDbl(GetPercentage5Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage5 = 0
                        End Try
                        con.Close()

                        If GetSPL = "STAINLESS" And (GetItemClass = "TW DB" Or GetItemClass = "TW CA" Or GetItemClass = "TW SC") Then
                            GetPriceAdjustmentPercentage5 = 0.15
                        ElseIf GetSPL = "STAINLESS" And (GetItemClass = "TW TT" Or GetItemClass = "TW NT" Or GetItemClass = "TW TP" Or GetItemClass = "TW CS") Then
                            GetPriceAdjustmentPercentage5 = 0.13
                        Else
                            'Do nothing
                        End If

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage5)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = AdjustedLastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case 6
                        'Increase price for 1 bracket (Tier 6)

                        'Get % for SIXTH bracket (Tier 6)
                        Dim GetPercentage6Statement As String = "SELECT PriceAdjustment FROM ItemPriceChangeTable WHERE DivisionID = @DivisionID AND PriceClass = @PriceClass AND CostTierNumber = @CostTierNumber"
                        Dim GetPercentage6Command As New SqlCommand(GetPercentage6Statement, con)
                        GetPercentage6Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        GetPercentage6Command.Parameters.Add("@PriceClass", SqlDbType.VarChar).Value = GetItemClass
                        GetPercentage6Command.Parameters.Add("@CostTierNumber", SqlDbType.VarChar).Value = 6

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetPriceAdjustmentPercentage6 = CDbl(GetPercentage6Command.ExecuteScalar)
                        Catch ex As Exception
                            GetPriceAdjustmentPercentage6 = 0
                        End Try
                        con.Close()

                        AdjustedLastSalesPrice = LastSalesPrice * (1 + GetPriceAdjustmentPercentage6)

                        'Pricing is adjusted
                        AdjustedLastSalesPrice = Math.Round(AdjustedLastSalesPrice, 4)
                        txtPricePerUnit.Text = AdjustedLastSalesPrice
                        lblLastSalePrice.Text = FormatCurrency(AdjustedLastSalesPrice, 4)
                        lblUpdatedPrice.Visible = True
                    Case Else
                        'Pricing is current
                        LastSalesPrice = Math.Round(LastSalesPrice, 4)
                        txtPricePerUnit.Text = FormatCurrency(LastSalesPrice, 4)
                        lblLastSalePrice.Text = FormatCurrency(LastSalesPrice, 4)
                        lblUpdatedPrice.Visible = False
                        Exit Sub
                End Select
            End If
        End If
    End Sub

    Public Sub LoadLastPrice()
        Dim MAXDate As Integer = 0

        'Load Last Sales Price for Customer/ No Customer if selected
        If cboCustomerID.Text = "" Then
            'Determine if Item Class is subject to price increase
            Dim CheckItemClass As String = ItemClass
            Dim PriceIncreaseItem As String = ""

            Select Case CheckItemClass
                Case "TW CA", "TW SC", "TW DB", "TW DS", "TW TT", "TW TP", "TW CD", "TW NT", "TW CS", "TW PS", "TW CH", "TW IT", "TW SK", "TW SH", "TW TR", "TW TF", "TW RA", "TW KO", "TW SWR", "TW GS"
                    PriceIncreaseItem = "5PERCENT"
                Case "WASHERS", "U BOLTS", "TURNBUCKLES", "THREADED ROD", "TC BOLTS", "SOCKET SCREW", "SES", "SCREWS", "RIVET", "PUNCHES", "PINS", "MISC BOLTS", "METRIC", "LOCK NUTS", "LAG BOLTS", "JAM NUTS", "HEX NUTS", "HEX BOLTS", "EYE BOLTS", "EXP ANCHOR", "EPOXY", "DIES", "DES", "CUTTERS", "CPG NUTS", "CLEVIS", "CARR BOLTS", "BITS", "ANCHOR BOLTS"
                    PriceIncreaseItem = "12PERCENT"
                Case "WC FERRULES", "WC WELD TILES"
                    PriceIncreaseItem = "7PERCENT"
                Case "TW WELD PROD", "TWE ASSEMBLIES", "TWE STUD EQUIP COMP", "TWE CD COMPONENTS"
                    PriceIncreaseItem = "5PERCENT"
                Case Else
                    PriceIncreaseItem = "NO"
            End Select

            'Load values into Price Field
            Dim GetYearPricingDate As Date
            Dim UpdatedLastSalesPrice As Double = 0

            If cboDivisionID.Text = "SLC" Then
                Dim MAXDateStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID"
                Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                MAXDateCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                Catch ex As Exception
                    MAXDate = 0
                End Try
                con.Close()

                Dim GetYearPricingDateStatement As String = "SELECT SalesOrderDate FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim GetYearPricingDateCommand As New SqlCommand(GetYearPricingDateStatement, con)
                GetYearPricingDateCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetYearPricingDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
                GetYearPricingDateCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetYearPricingDate = CDate(GetYearPricingDateCommand.ExecuteScalar)
                Catch ex As Exception
                    GetYearPricingDate = Today()
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
                LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LastSalesPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As Exception
                    LastSalesPrice = 0
                End Try
                con.Close()
            Else
                Dim MAXDateStatement As String = "SELECT MAX(InvoiceHeaderKey) FROM InvoiceLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                Catch ex As Exception
                    MAXDate = 0
                End Try
                con.Close()

                Dim GetYearPricingDateStatement As String = "SELECT InvoiceDate FROM InvoiceLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND InvoiceHeaderKey = @InvoiceHeaderKey"
                Dim GetYearPricingDateCommand As New SqlCommand(GetYearPricingDateStatement, con)
                GetYearPricingDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetYearPricingDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                GetYearPricingDateCommand.Parameters.Add("@InvoiceHeaderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetYearPricingDate = CDate(GetYearPricingDateCommand.ExecuteScalar)
                Catch ex As Exception
                    GetYearPricingDate = Today()
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM InvoiceLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND InvoiceHeaderKey = @InvoiceHeaderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                LastPriceCommand.Parameters.Add("@InvoiceHeaderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LastSalesPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As Exception
                    LastSalesPrice = 0
                End Try
                con.Close()
            End If

            If GetYearPricingDate < GlobalTWDPriceChangeDate And cboDivisionID.Text = "TWD" And PriceIncreaseItem = "5PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierTWD
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalTWDPriceChangeDate And cboDivisionID.Text = "SLC" And PriceIncreaseItem = "5PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierTWD
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalSLCPriceChangeDate And cboDivisionID.Text = "SLC" And PriceIncreaseItem = "12PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierSLC
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalCHTPriceChangeDate And cboDivisionID.Text = "CHT" And PriceIncreaseItem = "7PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierCHT
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalTWEPriceChangeDate And cboDivisionID.Text = "TWE" And PriceIncreaseItem = "5PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierTWE
                lblUpdatedPrice.Visible = True
            Else
                UpdatedLastSalesPrice = LastSalesPrice
                lblUpdatedPrice.Visible = False
            End If

            lblLastSalePrice.Text = FormatCurrency(UpdatedLastSalesPrice, 4)
            txtPricePerUnit.Text = UpdatedLastSalesPrice
        Else
            'Determine if Item Class is subject to price increase
            Dim CheckItemClass As String = ItemClass
            Dim PriceIncreaseItem As String = ""

            Select Case CheckItemClass
                Case "TW CA", "TW SC", "TW DB", "TW DS", "TW TT", "TW TP", "TW CD", "TW NT", "TW CS", "TW PS", "TW CH", "TW IT", "TW SK", "TW SH", "TW TR", "TW TF", "TW RA", "TW KO", "TW SWR", "TW GS"
                    PriceIncreaseItem = "5PERCENT"
                Case "WASHERS", "U BOLTS", "TURNBUCKLES", "THREADED ROD", "TC BOLTS", "SOCKET SCREW", "SES", "SCREWS", "RIVET", "PUNCHES", "PINS", "MISC BOLTS", "METRIC", "LOCK NUTS", "LAG BOLTS", "JAM NUTS", "HEX NUTS", "HEX BOLTS", "EYE BOLTS", "EXP ANCHOR", "EPOXY", "DIES", "DES", "CUTTERS", "CPG NUTS", "CLEVIS", "CARR BOLTS", "BITS", "ANCHOR BOLTS"
                    PriceIncreaseItem = "12PERCENT"
                Case "WC FERRULES", "WC WELD TILES"
                    PriceIncreaseItem = "7PERCENT"
                Case "TW WELD PROD", "TWE ASSEMBLIES", "TWE STUD EQUIP COMP", "TWE CD COMPONENTS"
                    PriceIncreaseItem = "5PERCENT"
                Case Else
                    PriceIncreaseItem = "NO"
            End Select

            'Load values into Price Field
            Dim GetYearPricingDate As Date
            Dim UpdatedLastSalesPrice As Double = 0

            If cboDivisionID.Text = "SLC" Then
                Dim MAXDateStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID AND CustomerID = @CustomerID"
                Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                MAXDateCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
                MAXDateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                Catch ex As Exception
                    MAXDate = 0
                End Try
                con.Close()

                Dim GetYearPricingDateStatement As String = "SELECT SalesOrderDate FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim GetYearPricingDateCommand As New SqlCommand(GetYearPricingDateStatement, con)
                GetYearPricingDateCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetYearPricingDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
                GetYearPricingDateCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetYearPricingDate = CDate(GetYearPricingDateCommand.ExecuteScalar)
                Catch ex As Exception
                    GetYearPricingDate = Today()
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
                LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LastSalesPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As Exception
                    LastSalesPrice = 0
                End Try
                con.Close()
            Else
                Dim MAXDateStatement As String = "SELECT MAX(InvoiceHeaderKey) FROM InvoiceLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND CustomerID = @CustomerID"
                Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                MAXDateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                Catch ex As Exception
                    MAXDate = 0
                End Try
                con.Close()

                Dim GetYearPricingDateStatement As String = "SELECT InvoiceDate FROM InvoiceLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND InvoiceHeaderKey = @InvoiceHeaderKey"
                Dim GetYearPricingDateCommand As New SqlCommand(GetYearPricingDateStatement, con)
                GetYearPricingDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetYearPricingDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                GetYearPricingDateCommand.Parameters.Add("@InvoiceHeaderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetYearPricingDate = CDate(GetYearPricingDateCommand.ExecuteScalar)
                Catch ex As Exception
                    GetYearPricingDate = Today()
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM InvoiceLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND InvoiceHeaderKey = @InvoiceHeaderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                LastPriceCommand.Parameters.Add("@InvoiceHeaderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LastSalesPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As Exception
                    LastSalesPrice = 0
                End Try
                con.Close()
            End If

            If GetYearPricingDate < GlobalTWDPriceChangeDate And cboDivisionID.Text = "TWD" And PriceIncreaseItem = "5PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierTWD
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalTWDPriceChangeDate And cboDivisionID.Text = "SLC" And PriceIncreaseItem = "5PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierTWD
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalSLCPriceChangeDate And cboDivisionID.Text = "SLC" And PriceIncreaseItem = "12PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierSLC
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalCHTPriceChangeDate And cboDivisionID.Text = "CHT" And PriceIncreaseItem = "7PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierCHT
                lblUpdatedPrice.Visible = True
            ElseIf GetYearPricingDate < GlobalTWEPriceChangeDate And cboDivisionID.Text = "TWE" And PriceIncreaseItem = "5PERCENT" Then
                UpdatedLastSalesPrice = LastSalesPrice * GlobalPriceChangeMultiplierTWE
                lblUpdatedPrice.Visible = True
            Else
                UpdatedLastSalesPrice = LastSalesPrice
                lblUpdatedPrice.Visible = False
            End If

            lblLastSalePrice.Text = FormatCurrency(UpdatedLastSalesPrice, 4)
            txtPricePerUnit.Text = UpdatedLastSalesPrice
        End If

        If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TFP" Then
            'LoadManufacturedCost()
            LastPurchaseCost = 0
        Else
            Try
                'Load values into Cost Field 
                Dim MAXDateStatement As String = "SELECT MAX(ReceivingHeaderKey) FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                Catch ex As System.Exception
                    MAXDate = 0
                End Try
                con.Close()

                Dim LastCostStatement As String = "SELECT UnitCost FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND ReceivingHeaderKey = @ReceivingHeaderKey"
                Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                LastCostCommand.Parameters.Add("@ReceivingHeaderKey", SqlDbType.VarChar).Value = MAXDate

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LastPurchaseCost = CDbl(LastCostCommand.ExecuteScalar)
                    lblLastPurchaseCost.Text = FormatCurrency(LastPurchaseCost, 4)
                Catch ex As System.Exception
                    LastPurchaseCost = 0
                    lblLastPurchaseCost.Text = FormatCurrency(LastPurchaseCost, 4)
                End Try
                con.Close()
            Catch ex As System.Exception
                lblLastPurchaseCost.Text = 0
            End Try
        End If
    End Sub

    Public Sub LoadManufacturedCost()
        'Load values into Cost Field
        Dim MAXDateStatement As String = "SELECT MAX(TransactionNumber) FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
        Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
        MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        MAXDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            MAXDate = CInt(MAXDateCommand.ExecuteScalar)
        Catch ex As Exception
            MAXDate = 0
        End Try
        con.Close()

        Dim LastPriceStatement As String = "SELECT ItemCost FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND TransactionNumber = @TransactionNumber"
        Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
        LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
        LastPriceCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = MAXDate

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            LastPurchaseCost = CDbl(LastPriceCommand.ExecuteScalar)
        Catch ex As Exception
            LastPurchaseCost = 0
        End Try
        con.Close()

        lblLastPurchaseCost.Text = FormatCurrency(LastPurchaseCost, 4)
    End Sub

    Public Sub LoadQOHConsignment()
        'Show Quantity On Hand for specific warehouse
        Dim QuantityOnHandConsignment As Double = 0
        Dim Warehousename, WarehouseID As String
        Warehousename = cboFOB.Text

        Select Case Warehousename
            Case "Bessemer"
                WarehouseID = "BCW"
            Case "Downey"
                WarehouseID = "DCW"
            Case "Hayward"
                WarehouseID = "HCW"
            Case "Lewisville"
                WarehouseID = "LCW"
            Case "Phoenix"
                WarehouseID = "PCW"
            Case "Seattle"
                WarehouseID = "SCW"
            Case "Lyndhurst"
                WarehouseID = "YCW"
            Case "Renton"
                WarehouseID = "RCW"
            Case "Lake Stevens"
                WarehouseID = "LSCW"
            Case "SRL"
                WarehouseID = "SRL"
            Case Else
                WarehouseID = ""
        End Select

        Dim QuantityOnHandString As String = "SELECT QuantityOnHand FROM ConsignmentInventory WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
        Dim QuantityOnHandCommand As New SqlCommand(QuantityOnHandString, con)
        QuantityOnHandCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
        QuantityOnHandCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = WarehouseID

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            QuantityOnHandConsignment = CDbl(QuantityOnHandCommand.ExecuteScalar)
        Catch ex As System.Exception
            QuantityOnHandConsignment = 0
        End Try
        con.Close()

        QuantityOnHandConsignment = FormatNumber(QuantityOnHandConsignment, 0)

        lblQOH.Text = QuantityOnHandConsignment
        lblQOHLabel.Text = WarehouseID + " QOH"
    End Sub

    Public Sub LoadQuantityOnHand()
        'Show Quantity On Hand for specific division
        Dim QuantityOnHandString As String = "SELECT QuantityOnHand, OpenSOQuantity, TotalShipQuantityPending FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
        Dim QuantityOnHandCommand As New SqlCommand(QuantityOnHandString, con)
        QuantityOnHandCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
        QuantityOnHandCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = QuantityOnHandCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("QuantityOnHand")) Then
                QuantityOnHand = 0
            Else
                QuantityOnHand = reader.Item("QuantityOnHand")
            End If
            If IsDBNull(reader.Item("OpenSOQuantity")) Then
                QuantityCommitted = 0
            Else
                QuantityCommitted = reader.Item("OpenSOQuantity")
            End If
            If IsDBNull(reader.Item("TotalShipQuantityPending")) Then
                QuantityPending = 0
            Else
                QuantityPending = reader.Item("TotalShipQuantityPending")
            End If
        Else
            QuantityOnHand = 0
            QuantityCommitted = 0
            QuantityPending = 0
        End If
        reader.Close()
        con.Close()

        lblQOHLabel.Text = "Quantity On Hand"
        lblQOH.Text = FormatNumber(QuantityOnHand, 1)
        lblQtyPending.Text = FormatNumber(QuantityPending, 1)
        lblQtyOpen.Text = FormatNumber(QuantityCommitted, 1)
        QuantityAvailable = QuantityOnHand - QuantityCommitted
    End Sub

    Public Sub LoadNextPieceSold()
        Dim TotalQuantityShipped As Double = 0
        Dim GetMaxTransactionNumber As Integer = 0

        If cboPartNumber.Text = "" And dgvSalesOrderLines.RowCount <> 0 Then
            Dim RowPartNumber As String = ""

            Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

            RowPartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value

            GlobalSOPartNumber = RowPartNumber
        Else
            GlobalSOPartNumber = cboPartNumber.Text
        End If


        'Get TQS for part
        Dim TotalQuantityShippedString As String = "SELECT SUM(QuantityShipped) FROM ShipmentLineQuery WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND Dropship = @Dropship"
        Dim TotalQuantityShippedCommand As New SqlCommand(TotalQuantityShippedString, con)
        TotalQuantityShippedCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = GlobalSOPartNumber
        TotalQuantityShippedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        TotalQuantityShippedCommand.Parameters.Add("@Dropship", SqlDbType.VarChar).Value = "NO"

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            TotalQuantityShipped = CDbl(TotalQuantityShippedCommand.ExecuteScalar)
        Catch ex As System.Exception
            TotalQuantityShipped = 0
        End Try
        con.Close()
        '******************************************************************************************************************************************
        'Add Total Quantity used in assemblies
        Dim GetBuildQuantity As Double = 0

        Dim TotalBuildQuantityStatement As String = "SELECT SUM(BuildQuantity) FROM AssemblyBuildQuery WHERE ComponentPartNumber = @ComponentPartNumber AND DivisionID = @DivisionID AND ComponentPartNumber <> AssemblyPartNumber"
        Dim TotalBuildQuantityCommand As New SqlCommand(TotalBuildQuantityStatement, con)
        TotalBuildQuantityCommand.Parameters.Add("@ComponentPartNumber", SqlDbType.VarChar).Value = GlobalSOPartNumber
        TotalBuildQuantityCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetBuildQuantity = CDbl(TotalBuildQuantityCommand.ExecuteScalar)
        Catch ex As Exception
            GetBuildQuantity = 0
        End Try
        con.Close()

        GetBuildQuantity = GetBuildQuantity * -1

        TotalQuantityShipped = TotalQuantityShipped + GetBuildQuantity + 1
        '******************************************************************************************************************************************

        'Get Max Transaction Number for the Correct Cost Tier
        Dim GetMaxTransactionNumberStatement As String = "SELECT MAX(TransactionNumber) FROM InventoryCosting WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND CostingDate <= @CostingDate AND @TotalQuantityShipped BETWEEN LowerLimit AND UpperLimit"
        Dim GetMaxTransactionNumberCommand As New SqlCommand(GetMaxTransactionNumberStatement, con)
        GetMaxTransactionNumberCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = GlobalSOPartNumber
        GetMaxTransactionNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetMaxTransactionNumberCommand.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = TotalQuantityShipped
        GetMaxTransactionNumberCommand.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = Today()

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetMaxTransactionNumber = CInt(GetMaxTransactionNumberCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetMaxTransactionNumber = 0
        End Try
        con.Close()

        'Get FIFO Cost for the next piece sold
        Dim NextPieceSoldStatement As String = "SELECT ItemCost FROM InventoryCosting WHERE DivisionID = @DivisionID AND TransactionNumber = @TransactionNumber AND PartNumber = @PartNumber"
        Dim NextPieceSoldCommand As New SqlCommand(NextPieceSoldStatement, con)
        NextPieceSoldCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = GlobalSOPartNumber
        NextPieceSoldCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        NextPieceSoldCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = GetMaxTransactionNumber

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            NextPieceSold = CDbl(NextPieceSoldCommand.ExecuteScalar)
        Catch ex As System.Exception
            NextPieceSold = 0
        End Try
        con.Close()
    End Sub

    Public Sub CalculateTotals()
        Dim OpenWeight As Double = 0

        'Show Totals
        Dim ProductTotalStatement As String = "SELECT SUM(ExtendedAmount) as TotalExtended, SUM(SalesTax) as TotalSalesTax, SUM(LineWeight) as TotalLineWeight, SUM(EstExtendedCOS) as TotalEstExtendedCOS FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim ProductTotalCommand As New SqlCommand(ProductTotalStatement, con)
        ProductTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        ProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = ProductTotalCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("TotalExtended")) Then
                ProductTotal = 0
            Else
                ProductTotal = reader.Item("TotalExtended")
            End If
            If IsDBNull(reader.Item("TotalSalesTax")) Then
                TotalTax = 0
            Else
                TotalTax = reader.Item("TotalSalesTax")
            End If
            If IsDBNull(reader.Item("TotalLineWeight")) Then
                TotalWeightRunningTotal = 0
            Else
                TotalWeightRunningTotal = reader.Item("TotalLineWeight")
            End If
            If IsDBNull(reader.Item("TotalEstExtendedCOS")) Then
                EstTotalCOS = 0
            Else
                EstTotalCOS = reader.Item("TotalEstExtendedCOS")
            End If
        Else
            ProductTotal = 0
            TotalTax = 0
            TotalWeightRunningTotal = 0
            EstTotalCOS = 0
        End If
        reader.Close()
        con.Close()

        'Get Shipped Weight
        Dim TotalWeightShippedStatement As String = "SELECT SUM(LineWeightShipped) FROM SalesOrderLineQueryNoQOH WHERE DivisionKey = @DivisionKey AND SalesOrderKey = @SalesOrderKey"
        Dim TotalWeightShippedCommand As New SqlCommand(TotalWeightShippedStatement, con)
        TotalWeightShippedCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        TotalWeightShippedCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            TotalWeightShipped = CDbl(TotalWeightShippedCommand.ExecuteScalar)
        Catch ex As System.Exception
            TotalWeightShipped = 0
        End Try
        con.Close()

        TotalWeightShipped = Math.Round(TotalWeightShipped, 2)
        OpenWeight = TotalWeightRunningTotal - TotalWeightShipped
        ProductTotal = Math.Round(ProductTotal, 2)

        FreightCharge = Val(txtFreightCharges.Text)
        OrderTotal = ProductTotal + TotalTax + FreightCharge

        OrderTotal = Math.Round(OrderTotal, 2)

        lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
        lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
        lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)
        lblTaxTotal.Text = FormatCurrency(TotalTax, 2)
        lblEstShippingWeight.Text = FormatNumber(TotalWeightRunningTotal, 2)
        lblOpenWeight.Text = FormatNumber(OpenWeight, 2)

        TotalSalesTax2 = 0
        TotalSalesTax3 = 0
    End Sub

    Public Sub CalculateCanadianTotals()
        'Load totals
        Dim TotalWeightShippedStatement As String = "SELECT SUM(LineWeight) FROM SalesOrderLineTable WHERE DivisionID = @DivisionID AND SalesOrderKey = @SalesOrderKey"
        Dim TotalWeightShippedCommand As New SqlCommand(TotalWeightShippedStatement, con)
        TotalWeightShippedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        TotalWeightShippedCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        Dim LineCOSStatement As String = "SELECT SUM(EstExtendedCOS) FROM SalesOrderLineTable WHERE DivisionID = @DivisionID AND SalesOrderKey = @SalesOrderKey"
        Dim LineCOSCommand As New SqlCommand(LineCOSStatement, con)
        LineCOSCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        LineCOSCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        Dim LineExtendedAmountStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE DivisionID = @DivisionID AND SalesOrderKey = @SalesOrderKey"
        Dim LineExtendedAmountCommand As New SqlCommand(LineExtendedAmountStatement, con)
        LineExtendedAmountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        LineExtendedAmountCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            ProductTotal = CDbl(LineExtendedAmountCommand.ExecuteScalar)
        Catch ex As System.Exception
            ProductTotal = 0
        End Try
        Try
            TotalWeightRunningTotal = CDbl(TotalWeightShippedCommand.ExecuteScalar)
        Catch ex As System.Exception
            TotalWeightRunningTotal = 0
        End Try
        Try
            EstTotalCOS = CDbl(LineCOSCommand.ExecuteScalar)
        Catch ex As System.Exception
            EstTotalCOS = 0
        End Try
        con.Close()

        FreightCharge = Val(txtFreightCharges.Text)

        LoadCanadianTaxRatesWithoutCheckingBoxes()

        If chkAddHST.Checked = True Then
            HSTTaxRate = Val(txtHSTRate.Text)
            HSTExtendedAmount = HSTTaxRate * (ProductTotal + FreightCharge)
            GSTExtendedAmount = 0
            PSTExtendedAmount = 0
        ElseIf chkAddPST.Checked = True Then
            GSTExtendedAmount = GSTTaxRate * (ProductTotal + FreightCharge)
            PSTExtendedAmount = PSTTaxRate * (ProductTotal + FreightCharge)
            HSTExtendedAmount = 0
        Else
            GSTExtendedAmount = GSTTaxRate * (ProductTotal + FreightCharge)
            PSTExtendedAmount = 0
            HSTExtendedAmount = 0
        End If

        If chkAddHST.Checked = False Then
            HSTExtendedAmount = 0
            TotalSalesTax3 = 0
            SalesTaxRate3 = 0
            HSTTaxRate = 0
        End If

        If chkAddPST.Checked = False Then
            PSTExtendedAmount = 0
            TotalSalesTax2 = 0
            SalesTaxRate2 = 0
            PSTTaxRate = 0
        End If

        GSTExtendedAmount = Math.Round(GSTExtendedAmount, 2)
        PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
        HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)

        TotalTax = GSTExtendedAmount
        TotalSalesTax1 = GSTExtendedAmount
        TotalSalesTax2 = PSTExtendedAmount
        TotalSalesTax3 = HSTExtendedAmount

        SalesTaxRate1 = GSTTaxRate
        SalesTaxRate2 = PSTTaxRate
        SalesTaxRate3 = HSTTaxRate

        OrderTotal = ProductTotal + GSTExtendedAmount + PSTExtendedAmount + HSTExtendedAmount + FreightCharge

        lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)
        lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
        lblEstShippingWeight.Text = FormatNumber(TotalWeightRunningTotal, 1)
        lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
        lblTaxTotal.Text = FormatCurrency(GSTExtendedAmount, 2)
        lblPST.Text = FormatCurrency(PSTExtendedAmount, 2)
        lblHST.Text = FormatCurrency(HSTExtendedAmount, 2)
    End Sub

    Public Sub LoadCanadianTaxRates()
        SalesTaxRate1 = 0
        SalesTaxRate2 = 0
        SalesTaxRate3 = 0

        chkAddHST.Checked = False
        chkAddPST.Checked = False

        Dim GetTaxRateString As String = "SELECT SalesTaxRate, SalesTaxRate2, SalesTaxRate3 FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetTaxRateCommand As New SqlCommand(GetTaxRateString, con)
        GetTaxRateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetTaxRateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetTaxRateCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("SalesTaxRate")) Then
                GSTTaxRate = 0
            Else
                GSTTaxRate = reader.Item("SalesTaxRate")
            End If
            If IsDBNull(reader.Item("SalesTaxRate2")) Then
                PSTTaxRate = 0
            Else
                PSTTaxRate = reader.Item("SalesTaxRate2")
            End If
            If IsDBNull(reader.Item("SalesTaxRate3")) Then
                HSTTaxRate = 0
            Else
                HSTTaxRate = reader.Item("SalesTaxRate3")
            End If
        Else
            GSTTaxRate = 0
            PSTTaxRate = 0
            HSTTaxRate = 0
        End If
        reader.Close()
        con.Close()

        If PSTTaxRate > 0 Then chkAddPST.Checked = True
        If HSTTaxRate > 0 Then chkAddHST.Checked = True

        txtHSTRate.Text = HSTTaxRate

        SalesTaxRate1 = GSTTaxRate
        SalesTaxRate2 = PSTTaxRate
        SalesTaxRate3 = HSTTaxRate
    End Sub

    Public Sub LoadCanadianTaxRatesWithoutCheckingBoxes()
        SalesTaxRate1 = 0
        SalesTaxRate2 = 0
        SalesTaxRate3 = 0
        GSTTaxRate = 0
        PSTTaxRate = 0
        HSTTaxRate = 0

        Dim GetTaxRateString As String = "SELECT SalesTaxRate, SalesTaxRate2, SalesTaxRate3 FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetTaxRateCommand As New SqlCommand(GetTaxRateString, con)
        GetTaxRateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetTaxRateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = GetTaxRateCommand.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If IsDBNull(reader.Item("SalesTaxRate")) Then
                GSTTaxRate = 0
            Else
                GSTTaxRate = reader.Item("SalesTaxRate")
            End If
            If IsDBNull(reader.Item("SalesTaxRate2")) Then
                PSTTaxRate = 0
            Else
                PSTTaxRate = reader.Item("SalesTaxRate2")
            End If
            If IsDBNull(reader.Item("SalesTaxRate3")) Then
                HSTTaxRate = 0
            Else
                HSTTaxRate = reader.Item("SalesTaxRate3")
            End If
        Else
            GSTTaxRate = 0
            PSTTaxRate = 0
            HSTTaxRate = 0
        End If
        reader.Close()
        con.Close()

        SalesTaxRate1 = GSTTaxRate
        SalesTaxRate2 = PSTTaxRate
        SalesTaxRate3 = HSTTaxRate
    End Sub

    Public Sub LoadSalesOrderTaxRates()
        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            SalesTax = 0
            SalesTaxRate1 = 0
            SalesTaxRate2 = 0
            SalesTaxRate3 = 0
            TaxRate = 0

            If chkAddPST.Checked = True Then
                SalesTaxRate1 = GSTTaxRate
                SalesTaxRate2 = PSTTaxRate
                SalesTaxRate3 = 0
            End If
            If chkAddHST.Checked = True Then
                SalesTaxRate1 = 0
                SalesTaxRate2 = 0
                SalesTaxRate3 = Val(txtHSTRate.Text)
            End If
            If chkAddHST.Checked = False And chkAddPST.Checked = False Then
                SalesTaxRate1 = GSTTaxRate
                SalesTaxRate2 = 0
                SalesTaxRate3 = 0
            End If
        Else
            'Calculate line sales tax and total
            If chkTaxable.Checked = True Then
                SalesTaxRate1 = Val(txtTaxRate.Text)
                SalesTaxRate2 = 0
                SalesTaxRate3 = 0
            Else
                SalesTax = 0
                SalesTaxRate1 = 0
                SalesTaxRate2 = 0
                SalesTaxRate3 = 0
            End If
        End If

        'Update Tax Rate in Sales Order Header Table
        cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET TaxRate1 = @TaxRate1, TaxRate2 = @TaxRate2, TaxRate3 = @TaxRate3 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

        With cmd.Parameters
            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            .Add("@TaxRate1", SqlDbType.VarChar).Value = SalesTaxRate1
            .Add("@TaxRate2", SqlDbType.VarChar).Value = SalesTaxRate2
            .Add("@TaxRate3", SqlDbType.VarChar).Value = SalesTaxRate3
        End With

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Public Sub RecalculateLineTaxTotals()
        Dim GetSOTaxRate As Double = 0

        Dim GetSOTaxRateStatement As String = "SELECT TaxRate1 FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetSOTaxRateCommand As New SqlCommand(GetSOTaxRateStatement, con)
        GetSOTaxRateCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        GetSOTaxRateCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetSOTaxRate = CDbl(GetSOTaxRateCommand.ExecuteScalar)
        Catch ex As Exception
            GetSOTaxRate = 0
        End Try
        con.Close()

        Try
            'Recalculate lines for changes
            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesTax = ExtendedAmount * @SOTaxRate WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@SOTaxRate", SqlDbType.VarChar).Value = GetSOTaxRate
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
        Catch ex As Exception
            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Sales Order Form - Re-Calc Line Sales Tax"
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "Tax fail"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()
        End Try
    End Sub

    Public Sub LoadBTCountryByCountryCode()
        Dim LoadBTCountry As String = ""

        Dim LoadCountryStatement As String = "SELECT Country FROM CountryCodes WHERE CountryCode = @CountryCode"
        Dim LoadCountryCommand As New SqlCommand(LoadCountryStatement, con)
        LoadCountryCommand.Parameters.Add("@CountryCode", SqlDbType.VarChar).Value = txtBTCountry.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            LoadBTCountry = CStr(LoadCountryCommand.ExecuteScalar)
        Catch ex As Exception
            LoadBTCountry = ""
        End Try
        con.Close()

        cboBTCountryName.Text = LoadBTCountry
    End Sub

    Public Sub LoadBTCountryCodeByCountry()
        Dim LoadBTCountryCode As String = ""

        Dim LoadCountryCodeStatement As String = "SELECT CountryCode FROM CountryCodes WHERE Country = @Country"
        Dim LoadCountryCodeCommand As New SqlCommand(LoadCountryCodeStatement, con)
        LoadCountryCodeCommand.Parameters.Add("@Country", SqlDbType.VarChar).Value = cboBTCountryName.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            LoadBTCountryCode = CStr(LoadCountryCodeCommand.ExecuteScalar)
        Catch ex As Exception
            LoadBTCountryCode = ""
        End Try
        con.Close()

        txtBTCountry.Text = LoadBTCountryCode
    End Sub

    Public Sub LoadSTCountryByCountryCode()
        Dim LoadSTCountry As String = ""

        Dim LoadCountryStatement As String = "SELECT Country FROM CountryCodes WHERE CountryCode = @CountryCode"
        Dim LoadCountryCommand As New SqlCommand(LoadCountryStatement, con)
        LoadCountryCommand.Parameters.Add("@CountryCode", SqlDbType.VarChar).Value = txtSTCountry.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            LoadSTCountry = CStr(LoadCountryCommand.ExecuteScalar)
        Catch ex As Exception
            LoadSTCountry = ""
        End Try
        con.Close()

        cboSTCountryName.Text = LoadSTCountry
    End Sub

    Public Sub LoadSTCountryCodeByCountry()
        Dim LoadSTCountryCode As String = ""

        Dim LoadCountryCodeStatement As String = "SELECT CountryCode FROM CountryCodes WHERE Country = @Country"
        Dim LoadCountryCodeCommand As New SqlCommand(LoadCountryCodeStatement, con)
        LoadCountryCodeCommand.Parameters.Add("@Country", SqlDbType.VarChar).Value = cboSTCountryName.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            LoadSTCountryCode = CStr(LoadCountryCodeCommand.ExecuteScalar)
        Catch ex As Exception
            LoadSTCountryCode = ""
        End Try
        con.Close()

        txtSTCountry.Text = LoadSTCountryCode
    End Sub

    Public Sub LoadPartByDescription()
        Dim PartNumber1 As String = ""

        Dim PartNumber1Statement As String = "SELECT ItemID FROM ItemList WHERE ShortDescription = @ShortDescription AND DivisionID = @DivisionID AND ItemClass <> 'DEACTIVATED-PART'"
        Dim PartNumber1Command As New SqlCommand(PartNumber1Statement, con)
        PartNumber1Command.Parameters.Add("@ShortDescription", SqlDbType.VarChar).Value = cboPartDescription.Text
        PartNumber1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            PartNumber1 = CStr(PartNumber1Command.ExecuteScalar)
        Catch ex As Exception
            PartNumber1 = ""
        End Try
        con.Close()

        cboPartNumber.Text = PartNumber1
    End Sub

    Public Sub LoadDescriptionByPart()
        Dim PartDescription1 As String = ""

        Dim PartDescription1Statement As String = "SELECT ShortDescription FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID AND ItemClass <> 'DEACTIVATED-PART'"
        Dim PartDescription1Command As New SqlCommand(PartDescription1Statement, con)
        PartDescription1Command.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
        PartDescription1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            PartDescription1 = CStr(PartDescription1Command.ExecuteScalar)
        Catch ex As Exception
            PartDescription1 = ""
        End Try
        con.Close()

        cboPartDescription.Text = PartDescription1
    End Sub

    Public Sub LoadCustomerNameByID()
        Dim CustomerName1 As String = ""

        Dim CustomerName1String As String = "SELECT CustomerName FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim CustomerName1Command As New SqlCommand(CustomerName1String, con)
        CustomerName1Command.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        CustomerName1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CustomerName1 = CStr(CustomerName1Command.ExecuteScalar)
        Catch ex As Exception
            CustomerName1 = ""
        End Try
        con.Close()

        cboCustomerName.Text = CustomerName1
    End Sub

    Public Sub LoadCustomerIDByName()
        Dim CustomerID1 As String = ""

        Dim CustomerID1String As String = "SELECT CustomerID FROM CustomerList WHERE CustomerName = @CustomerName AND DivisionID = @DivisionID"
        Dim CustomerID1Command As New SqlCommand(CustomerID1String, con)
        CustomerID1Command.Parameters.Add("@CustomerName", SqlDbType.VarChar).Value = cboCustomerName.Text
        CustomerID1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CustomerID1 = CStr(CustomerID1Command.ExecuteScalar)
        Catch ex As Exception
            CustomerID1 = ""
        End Try
        con.Close()

        cboCustomerID.Text = CustomerID1
    End Sub

    Public Sub LoadOrderTracking()
        Dim NumberOfShipmentsString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim NumberOfShipmentsCommand As New SqlCommand(NumberOfShipmentsString, con)
        NumberOfShipmentsCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        NumberOfShipmentsCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim NumberOfReturnsString As String = "SELECT COUNT(ReturnNumber) FROM ReturnProductHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID"
        Dim NumberOfReturnsCommand As New SqlCommand(NumberOfReturnsString, con)
        NumberOfReturnsCommand.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        NumberOfReturnsCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim NumberOfInvoicesString As String = "SELECT COUNT(InvoiceNumber) FROM InvoiceHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID"
        Dim NumberOfInvoicesCommand As New SqlCommand(NumberOfInvoicesString, con)
        NumberOfInvoicesCommand.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        NumberOfInvoicesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim SOInvoiceTotalString As String = "SELECT SUM(InvoiceTotal) FROM InvoiceHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID"
        Dim SOInvoiceTotalCommand As New SqlCommand(SOInvoiceTotalString, con)
        SOInvoiceTotalCommand.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        SOInvoiceTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim SOShipmentTotalString As String = "SELECT SUM(ShipmentTotal) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim SOShipmentTotalCommand As New SqlCommand(SOShipmentTotalString, con)
        SOShipmentTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        SOShipmentTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim SOReturnTotalString As String = "SELECT SUM(ReturnTotal) FROM ReturnProductHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID"
        Dim SOReturnTotalCommand As New SqlCommand(SOReturnTotalString, con)
        SOReturnTotalCommand.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        SOReturnTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            NumberOfShipments = CInt(NumberOfShipmentsCommand.ExecuteScalar)
        Catch ex As Exception
            NumberOfShipments = 0
        End Try
        Try
            NumberOfReturns = CInt(NumberOfReturnsCommand.ExecuteScalar)
        Catch ex As Exception
            NumberOfReturns = 0
        End Try
        Try
            NumberOfInvoices = CInt(NumberOfInvoicesCommand.ExecuteScalar)
        Catch ex As Exception
            NumberOfInvoices = 0
        End Try
        Try
            SOInvoiceTotal = CDbl(SOInvoiceTotalCommand.ExecuteScalar)
        Catch ex As Exception
            SOInvoiceTotal = 0
        End Try
        Try
            SOShipmentTotal = CDbl(SOShipmentTotalCommand.ExecuteScalar)
        Catch ex As Exception
            SOShipmentTotal = 0
        End Try
        Try
            SOReturnTotal = CDbl(SOReturnTotalCommand.ExecuteScalar)
        Catch ex As Exception
            SOReturnTotal = 0
        End Try
        con.Close()

        SODifference = SOInvoiceTotal - (SOShipmentTotal - SOReturnTotal)

        lblNumberShipments.Text = NumberOfShipments
        lblNumberReturns.Text = NumberOfReturns
        lblNumberInvoices.Text = NumberOfInvoices
        lblShipmentTotal.Text = FormatCurrency(SOShipmentTotal, 2)
        lblInvoiceTotal.Text = FormatCurrency(SOInvoiceTotal, 2)
        lblReturnTotal.Text = FormatCurrency(SOReturnTotal, 2)
        lblDifference.Text = FormatCurrency(SODifference, 2)
    End Sub

    Public Sub LoadCountryCodeFromState()
        Dim GetCountryCodeFromStateString As String = "SELECT CountryCode FROM StateTable WHERE StateCode = @StateCode"
        Dim GetCountryCodeFromStateCommand As New SqlCommand(GetCountryCodeFromStateString, con)
        GetCountryCodeFromStateCommand.Parameters.Add("@StateCode", SqlDbType.VarChar).Value = StateCode

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountryCodeFromState = CStr(GetCountryCodeFromStateCommand.ExecuteScalar)
        Catch ex As System.Exception
            CountryCodeFromState = ""
        End Try
        con.Close()

        If CountryCodeFromState = "" Then
            'Do nothing
        Else
            Dim GetCountryNameFromStateString As String = "SELECT Country FROM CountryCodes WHERE CountryCode = @CountryCode"
            Dim GetCountryNameFromStateCommand As New SqlCommand(GetCountryNameFromStateString, con)
            GetCountryNameFromStateCommand.Parameters.Add("@CountryCode", SqlDbType.VarChar).Value = CountryCodeFromState

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CountryNameFromState = CStr(GetCountryNameFromStateCommand.ExecuteScalar)
            Catch ex As System.Exception
                CountryNameFromState = ""
            End Try
            con.Close()
        End If
    End Sub

    'Load Shipping Data

    Public Sub ValidateShippingMethod()
        ShipMethod = cboShipMethod.Text

        Select Case ShipMethod
            Case "COLLECT"
                'Do nothing
            Case "PREPAID"
                'Do nothing
            Case "PREPAID/ADD"
                'Do nothing
            Case "PREPAID/NOADD"
                'Do nothing
            Case "THIRD PARTY"
                If txtThirdPartyShipper.Text = "" Then
                    MsgBox("You must fill-in third party shipping info", MsgBoxStyle.OkOnly)
                    CheckShippingMethod = "EXIT SUB"
                    txtThirdPartyShipper.Focus()
                    Exit Sub
                End If
            Case "OTHER"
                'Do nothing
            Case Else
                'MsgBox("You must select a valid Shipping Method", MsgBoxStyle.OkOnly)
                CheckShippingMethod = "EXIT SUB"
                cboShipMethod.Focus()
                Exit Sub
        End Select
    End Sub

    Public Sub GetThirdPartyBillingData()
        Dim BillToNameStatement As String = "SELECT CustomerName FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim BillToNameCommand As New SqlCommand(BillToNameStatement, con)
        BillToNameCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        BillToNameCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim BillToAddress1Statement As String = "SELECT BillToAddress1 FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim BillToAddress1Command As New SqlCommand(BillToAddress1Statement, con)
        BillToAddress1Command.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        BillToAddress1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim BillToAddress2Statement As String = "SELECT BillToAddress2 FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim BillToAddress2Command As New SqlCommand(BillToAddress2Statement, con)
        BillToAddress2Command.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        BillToAddress2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim BillToCityStatement As String = "SELECT BillToCity FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim BillToCityCommand As New SqlCommand(BillToCityStatement, con)
        BillToCityCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        BillToCityCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim BillToStateStatement As String = "SELECT BillToState FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim BillToStateCommand As New SqlCommand(BillToStateStatement, con)
        BillToStateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        BillToStateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        Dim BillToZipStatement As String = "SELECT BillToZip FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim BillToZipCommand As New SqlCommand(BillToZipStatement, con)
        BillToZipCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        BillToZipCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            SVBillToName = CStr(BillToNameCommand.ExecuteScalar)
        Catch ex As Exception
            SVBillToName = ""
        End Try
        Try
            SVBillToAddress1 = CStr(BillToAddress1Command.ExecuteScalar)
        Catch ex As Exception
            SVBillToAddress1 = ""
        End Try
        Try
            SVBillToAddress2 = CStr(BillToAddress2Command.ExecuteScalar)
        Catch ex As Exception
            SVBillToAddress2 = ""
        End Try
        Try
            SVBillToCity = CStr(BillToCityCommand.ExecuteScalar)
        Catch ex As Exception
            SVBillToCity = ""
        End Try
        Try
            SVBillToState = CStr(BillToStateCommand.ExecuteScalar)
        Catch ex As Exception
            SVBillToState = ""
        End Try
        Try
            SVBillToZip = CStr(BillToZipCommand.ExecuteScalar)
        Catch ex As Exception
            SVBillToZip = ""
        End Try
        con.Close()

        txtThirdPartyShipper.Text = SVBillToName + Environment.NewLine + SVBillToAddress1 + Environment.NewLine + SVBillToAddress2 + Environment.NewLine + SVBillToCity + ", " + SVBillToState + "  " + SVBillToZip
    End Sub

    Public Sub GetFreightAccountForUPSAndFEDEX()
        If cboShipVia.Text <> "" Then
            Try
                ShipViaCode = cboShipVia.Text
                ShipViaCode = ShipViaCode.Substring(0, 4)

                If ShipViaCode = "FDX-" Or ShipViaCode = "UPS-" Then
                    Dim FreightAccountNumber As String = ""

                    'get Account Number from customer
                    Dim FreightAccountNumberStatement As String = "SELECT ShippingAccount FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
                    Dim FreightAccountNumberCommand As New SqlCommand(FreightAccountNumberStatement, con)
                    FreightAccountNumberCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                    FreightAccountNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        FreightAccountNumber = CStr(FreightAccountNumberCommand.ExecuteScalar)
                    Catch ex As Exception
                        FreightAccountNumber = ""
                    End Try
                    con.Close()

                    txtFreightAccount.Text = FreightAccountNumber
                Else

                End If
            Catch ex As Exception
                'Skip
            End Try
        End If
    End Sub

    Public Sub LoadShipViaAdd()
        Dim AutoAddFreightStatement As String = "SELECT ShipMethodType FROM ShipMethod WHERE ShipMethID = @ShipMethID"
        Dim AutoAddFreightCommand As New SqlCommand(AutoAddFreightStatement, con)
        AutoAddFreightCommand.Parameters.Add("@ShipMethID", SqlDbType.VarChar).Value = cboShipVia.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            AutoAddFreight = CStr(AutoAddFreightCommand.ExecuteScalar)
        Catch ex As Exception
            AutoAddFreight = ""
        End Try
        con.Close()
    End Sub

    'Datagrid Events

    Private Sub dgvSalesOrderLines_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvSalesOrderLines.CellClick
        Dim RowPartNumber As String
        Dim RowBoxCount, RowLastPrice, RowLastCost, RowQOH, RowQuantityPending, RowQuantityCommitted, RowSTDCost, RowSTDPrice As Double
        Dim MAXDate1, MAXDate2, MAXDate3, RowLineNumber As Integer


        If Me.dgvSalesOrderLines.RowCount <> 0 Then
            Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

            If cboPartNumber.Text <> "" Then
                'Skip update
            Else
                RowPartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value
                RowLineNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("SalesOrderLineKeyColumn").Value

                cboDeleteLine.Text = RowLineNumber

                Dim GetStandardCostString As String = "SELECT StandardCost FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetStandardCostCommand As New SqlCommand(GetStandardCostString, con)
                GetStandardCostCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetStandardCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetStandardPriceString As String = "SELECT StandardPrice FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetStandardPriceCommand As New SqlCommand(GetStandardPriceString, con)
                GetStandardPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetStandardPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetBoxCountString As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetBoxCountCommand As New SqlCommand(GetBoxCountString, con)
                GetBoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetBoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQOHString As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQOHCommand As New SqlCommand(GetQOHString, con)
                GetQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQuantityCommittedString As String = "SELECT OpenSOQuantity FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQuantityCommittedCommand As New SqlCommand(GetQuantityCommittedString, con)
                GetQuantityCommittedCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQuantityCommittedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQuantityPendingString As String = "SELECT TotalShipQuantityPending FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQuantityPendingCommand As New SqlCommand(GetQuantityPendingString, con)
                GetQuantityPendingCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQuantityPendingCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    RowSTDCost = CDbl(GetStandardCostCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowSTDCost = 0
                End Try
                Try
                    RowSTDPrice = CDbl(GetStandardPriceCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowSTDPrice = 0
                End Try
                Try
                    RowBoxCount = CDbl(GetBoxCountCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowBoxCount = 0
                End Try
                Try
                    RowQOH = CDbl(GetQOHCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQOH = 0
                End Try
                Try
                    RowQuantityCommitted = CDbl(GetQuantityCommittedCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQuantityCommitted = 0
                End Try
                Try
                    RowQuantityPending = CDbl(GetQuantityPendingCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQuantityPending = 0
                End Try
                con.Close()

                If cboFOB.Text = "Medina" Or cboFOB.Text = "" Or cboDivisionID.Text <> "TWD" Then
                    lblQOH.Text = FormatNumber(RowQOH, 1)
                    lblQOHLabel.Text = "Quantity On Hand"
                Else
                    'Show Quantity On Hand for specific warehouse
                    Dim QuantityOnHandConsignment As Double = 0
                    Dim Warehousename, WarehouseID As String
                    Warehousename = cboFOB.Text

                    Select Case Warehousename
                        Case "Bessemer"
                            WarehouseID = "BCW"
                        Case "Downey"
                            WarehouseID = "DCW"
                        Case "Hayward"
                            WarehouseID = "HCW"
                        Case "Lewisville"
                            WarehouseID = "LCW"
                        Case "Phoenix"
                            WarehouseID = "PCW"
                        Case "Seattle"
                            WarehouseID = "SCW"
                        Case "Lyndhurst"
                            WarehouseID = "YCW"
                        Case "Renton"
                            WarehouseID = "RCW"
                        Case "Lake Stevens"
                            WarehouseID = "LSCW"
                        Case "SRL"
                            WarehouseID = "SRL"
                        Case Else
                            WarehouseID = ""
                    End Select

                    Dim QuantityOnHandString As String = "SELECT QuantityOnHand FROM ConsignmentInventory WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
                    Dim QuantityOnHandCommand As New SqlCommand(QuantityOnHandString, con)
                    QuantityOnHandCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                    QuantityOnHandCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = WarehouseID

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        QuantityOnHandConsignment = CDbl(QuantityOnHandCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        QuantityOnHandConsignment = 0
                    End Try
                    con.Close()

                    lblQOH.Text = QuantityOnHandConsignment
                    lblQOHLabel.Text = WarehouseID + " QOH"
                End If

                'Load values into Price Field (Last Purchase Cost for Remotes, Last Sale Price for TWD)
                Dim MAXDate1Statement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID"
                Dim MAXDate1Command As New SqlCommand(MAXDate1Statement, con)
                MAXDate1Command.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                MAXDate1Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDate1Command.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate1 = CInt(MAXDate1Command.ExecuteScalar)
                Catch ex As System.Exception
                    MAXDate1 = 0
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                LastPriceCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate1

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    RowLastPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowLastPrice = 0
                End Try
                con.Close()

                If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TFP" Then
                    'Load values into Cost Field
                    Dim MAXDate2Statement As String = "SELECT MAX(TransactionNumber) FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                    Dim MAXDate2Command As New SqlCommand(MAXDate2Statement, con)
                    MAXDate2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    MAXDate2Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        MAXDate2 = CInt(MAXDate2Command.ExecuteScalar)
                    Catch ex As Exception
                        MAXDate2 = 0
                    End Try
                    con.Close()

                    Dim LastCostStatement As String = "SELECT ItemCost FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND TransactionNumber = @TransactionNumber"
                    Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                    LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                    LastCostCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = MAXDate2

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        RowLastCost = CDbl(LastPriceCommand.ExecuteScalar)
                    Catch ex As Exception
                        RowLastCost = 0
                    End Try
                    con.Close()

                    lblLastPurchaseCost.Text = FormatCurrency(LastPurchaseCost, 4)
                Else
                    Try
                        'Load values into Cost Field 
                        Dim MAXDate3Statement As String = "SELECT MAX(ReceivingHeaderKey) FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                        Dim MAXDate3Command As New SqlCommand(MAXDate3Statement, con)
                        MAXDate3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        MAXDate3Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            MAXDate3 = CInt(MAXDate3Command.ExecuteScalar)
                        Catch ex As System.Exception
                            MAXDate3 = 0
                        End Try
                        con.Close()

                        Dim LastCostStatement As String = "SELECT UnitCost FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND ReceivingHeaderKey = @ReceivingHeaderKey"
                        Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                        LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                        LastCostCommand.Parameters.Add("@ReceivingHeaderKey", SqlDbType.VarChar).Value = MAXDate3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            RowLastCost = CDbl(LastCostCommand.ExecuteScalar)
                            lblLastPurchaseCost.Text = FormatCurrency(RowLastCost, 4)
                        Catch ex As System.Exception
                            RowLastCost = 0
                            lblLastPurchaseCost.Text = FormatCurrency(RowLastCost, 4)
                        End Try
                        con.Close()
                    Catch ex As System.Exception
                        lblLastPurchaseCost.Text = 0
                    End Try
                End If

                lblStdUnitCost.Text = FormatNumber(RowSTDCost, 4)
                lblStdUnitPrice.Text = FormatNumber(RowSTDPrice, 4)
                lblFullBoxCount.Text = RowBoxCount
                lblQtyPending.Text = FormatNumber(RowQuantityPending, 1)
                lblQtyOpen.Text = FormatNumber(RowQuantityCommitted, 1)
                lblLastSalePrice.Text = FormatNumber(RowLastPrice, 4)

            End If
        End If
        If e.ColumnIndex = 12 Then

            dgvSalesOrderLines.EditMode = DataGridViewEditMode.EditOnEnter
        Else

            dgvSalesOrderLines.EditMode = DataGridViewEditMode.EditOnKeystrokeOrF2
        End If
    End Sub

    Private Sub dgvSalesOrderLines_CellContentClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvSalesOrderLines.CellContentClick
        Dim RowPartNumber As String
        Dim RowBoxCount, RowLastPrice, RowLastCost, RowQOH, RowQuantityPending, RowQuantityCommitted, RowSTDCost, RowSTDPrice As Double
        Dim MAXDate1, MAXDate2, MAXDate3, RowLineNumber As Integer

        If Me.dgvSalesOrderLines.RowCount <> 0 Then
            Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

            If cboPartNumber.Text <> "" Then
                'Skip update
            Else
                RowPartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value
                RowLineNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("SalesOrderLineKeyColumn").Value

                cboDeleteLine.Text = RowLineNumber

                Dim GetStandardCostString As String = "SELECT StandardCost FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetStandardCostCommand As New SqlCommand(GetStandardCostString, con)
                GetStandardCostCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetStandardCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetStandardPriceString As String = "SELECT StandardPrice FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetStandardPriceCommand As New SqlCommand(GetStandardPriceString, con)
                GetStandardPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetStandardPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetBoxCountString As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetBoxCountCommand As New SqlCommand(GetBoxCountString, con)
                GetBoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetBoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQOHString As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQOHCommand As New SqlCommand(GetQOHString, con)
                GetQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQuantityCommittedString As String = "SELECT OpenSOQuantity FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQuantityCommittedCommand As New SqlCommand(GetQuantityCommittedString, con)
                GetQuantityCommittedCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQuantityCommittedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQuantityPendingString As String = "SELECT TotalShipQuantityPending FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQuantityPendingCommand As New SqlCommand(GetQuantityPendingString, con)
                GetQuantityPendingCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQuantityPendingCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    RowSTDCost = CDbl(GetStandardCostCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowSTDCost = 0
                End Try
                Try
                    RowSTDPrice = CDbl(GetStandardPriceCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowSTDPrice = 0
                End Try
                Try
                    RowBoxCount = CDbl(GetBoxCountCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowBoxCount = 0
                End Try
                Try
                    RowQOH = CDbl(GetQOHCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQOH = 0
                End Try
                Try
                    RowQuantityCommitted = CDbl(GetQuantityCommittedCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQuantityCommitted = 0
                End Try
                Try
                    RowQuantityPending = CDbl(GetQuantityPendingCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQuantityPending = 0
                End Try
                con.Close()

                If cboFOB.Text = "Medina" Or cboFOB.Text = "" Or cboDivisionID.Text <> "TWD" Then
                    lblQOH.Text = FormatNumber(RowQOH, 1)
                    lblQOHLabel.Text = "Quantity On Hand"
                Else
                    'Show Quantity On Hand for specific warehouse
                    Dim QuantityOnHandConsignment As Double = 0
                    Dim Warehousename, WarehouseID As String
                    Warehousename = cboFOB.Text

                    Select Case Warehousename
                        Case "Bessemer"
                            WarehouseID = "BCW"
                        Case "Downey"
                            WarehouseID = "DCW"
                        Case "Hayward"
                            WarehouseID = "HCW"
                        Case "Lewisville"
                            WarehouseID = "LCW"
                        Case "Phoenix"
                            WarehouseID = "PCW"
                        Case "Seattle"
                            WarehouseID = "SCW"
                        Case "Lyndhurst"
                            WarehouseID = "YCW"
                        Case "Renton"
                            WarehouseID = "RCW"
                        Case "Lake Stevens"
                            WarehouseID = "LSCW"
                        Case "SRL"
                            WarehouseID = "SRL"
                        Case Else
                            WarehouseID = ""
                    End Select

                    Dim QuantityOnHandString As String = "SELECT QuantityOnHand FROM ConsignmentInventory WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
                    Dim QuantityOnHandCommand As New SqlCommand(QuantityOnHandString, con)
                    QuantityOnHandCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                    QuantityOnHandCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = WarehouseID

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        QuantityOnHandConsignment = CDbl(QuantityOnHandCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        QuantityOnHandConsignment = 0
                    End Try
                    con.Close()

                    lblQOH.Text = QuantityOnHandConsignment
                    lblQOHLabel.Text = WarehouseID + " QOH"
                End If

                'Load values into Price Field (Last Purchase Cost for Remotes, Last Sale Price for TWD)
                Dim MAXDate1Statement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID"
                Dim MAXDate1Command As New SqlCommand(MAXDate1Statement, con)
                MAXDate1Command.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                MAXDate1Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDate1Command.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate1 = CInt(MAXDate1Command.ExecuteScalar)
                Catch ex As System.Exception
                    MAXDate1 = 0
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                LastPriceCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate1

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    RowLastPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowLastPrice = 0
                End Try
                con.Close()

                If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TFP" Then
                    'Load values into Cost Field
                    Dim MAXDate2Statement As String = "SELECT MAX(TransactionNumber) FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                    Dim MAXDate2Command As New SqlCommand(MAXDate2Statement, con)
                    MAXDate2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    MAXDate2Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        MAXDate2 = CInt(MAXDate2Command.ExecuteScalar)
                    Catch ex As Exception
                        MAXDate2 = 0
                    End Try
                    con.Close()

                    Dim LastCostStatement As String = "SELECT ItemCost FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND TransactionNumber = @TransactionNumber"
                    Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                    LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                    LastCostCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = MAXDate2

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        RowLastCost = CDbl(LastPriceCommand.ExecuteScalar)
                    Catch ex As Exception
                        RowLastCost = 0
                    End Try
                    con.Close()

                    lblLastPurchaseCost.Text = FormatCurrency(LastPurchaseCost, 4)
                Else
                    Try
                        'Load values into Cost Field 
                        Dim MAXDate3Statement As String = "SELECT MAX(ReceivingHeaderKey) FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                        Dim MAXDate3Command As New SqlCommand(MAXDate3Statement, con)
                        MAXDate3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        MAXDate3Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            MAXDate3 = CInt(MAXDate3Command.ExecuteScalar)
                        Catch ex As System.Exception
                            MAXDate3 = 0
                        End Try
                        con.Close()

                        Dim LastCostStatement As String = "SELECT UnitCost FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND ReceivingHeaderKey = @ReceivingHeaderKey"
                        Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                        LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                        LastCostCommand.Parameters.Add("@ReceivingHeaderKey", SqlDbType.VarChar).Value = MAXDate3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            RowLastCost = CDbl(LastCostCommand.ExecuteScalar)
                            lblLastPurchaseCost.Text = FormatCurrency(RowLastCost, 4)
                        Catch ex As System.Exception
                            RowLastCost = 0
                            lblLastPurchaseCost.Text = FormatCurrency(RowLastCost, 4)
                        End Try
                        con.Close()
                    Catch ex As System.Exception
                        lblLastPurchaseCost.Text = 0
                    End Try
                End If

                lblStdUnitCost.Text = FormatNumber(RowSTDCost, 4)
                lblStdUnitPrice.Text = FormatNumber(RowSTDPrice, 4)
                lblFullBoxCount.Text = RowBoxCount
                lblQtyPending.Text = FormatNumber(RowQuantityPending, 1)
                lblQtyOpen.Text = FormatNumber(RowQuantityCommitted, 1)
                lblLastSalePrice.Text = FormatNumber(RowLastPrice, 4)
            End If
        End If
    End Sub

    Private Sub dgvSalesOrderLines_RowHeaderMouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellMouseEventArgs) Handles dgvSalesOrderLines.RowHeaderMouseClick
        Dim RowPartNumber As String
        Dim RowBoxCount, RowLastPrice, RowLastCost, RowQOH, RowQuantityPending, RowQuantityCommitted, RowSTDCost, RowSTDPrice As Double
        Dim MAXDate1, MAXDate2, MAXDate3, RowLineNumber As Integer

        If Me.dgvSalesOrderLines.RowCount <> 0 Then
            Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

            If cboPartNumber.Text <> "" Then
                'Skip update
            Else
                RowPartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value
                RowLineNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("SalesOrderLineKeyColumn").Value

                cboDeleteLine.Text = RowLineNumber

                Dim GetStandardCostString As String = "SELECT StandardCost FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetStandardCostCommand As New SqlCommand(GetStandardCostString, con)
                GetStandardCostCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetStandardCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetStandardPriceString As String = "SELECT StandardPrice FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetStandardPriceCommand As New SqlCommand(GetStandardPriceString, con)
                GetStandardPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetStandardPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetBoxCountString As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetBoxCountCommand As New SqlCommand(GetBoxCountString, con)
                GetBoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetBoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQOHString As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQOHCommand As New SqlCommand(GetQOHString, con)
                GetQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQuantityCommittedString As String = "SELECT OpenSOQuantity FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQuantityCommittedCommand As New SqlCommand(GetQuantityCommittedString, con)
                GetQuantityCommittedCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQuantityCommittedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetQuantityPendingString As String = "SELECT TotalShipQuantityPending FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetQuantityPendingCommand As New SqlCommand(GetQuantityPendingString, con)
                GetQuantityPendingCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                GetQuantityPendingCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    RowSTDCost = CDbl(GetStandardCostCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowSTDCost = 0
                End Try
                Try
                    RowSTDPrice = CDbl(GetStandardPriceCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowSTDPrice = 0
                End Try
                Try
                    RowBoxCount = CDbl(GetBoxCountCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowBoxCount = 0
                End Try
                Try
                    RowQOH = CDbl(GetQOHCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQOH = 0
                End Try
                Try
                    RowQuantityCommitted = CDbl(GetQuantityCommittedCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQuantityCommitted = 0
                End Try
                Try
                    RowQuantityPending = CDbl(GetQuantityPendingCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowQuantityPending = 0
                End Try
                con.Close()

                If cboFOB.Text = "Medina" Or cboFOB.Text = "" Or cboDivisionID.Text <> "TWD" Then
                    lblQOH.Text = FormatNumber(RowQOH, 1)
                    lblQOHLabel.Text = "Quantity On Hand"
                Else
                    'Show Quantity On Hand for specific warehouse
                    Dim QuantityOnHandConsignment As Double = 0
                    Dim Warehousename, WarehouseID As String
                    Warehousename = cboFOB.Text

                    Select Case Warehousename
                        Case "Bessemer"
                            WarehouseID = "BCW"
                        Case "Downey"
                            WarehouseID = "DCW"
                        Case "Hayward"
                            WarehouseID = "HCW"
                        Case "Lewisville"
                            WarehouseID = "LCW"
                        Case "Phoenix"
                            WarehouseID = "PCW"
                        Case "Seattle"
                            WarehouseID = "SCW"
                        Case "Lyndhurst"
                            WarehouseID = "YCW"
                        Case "Renton"
                            WarehouseID = "RCW"
                        Case "Lake Stevens"
                            WarehouseID = "LSCW"
                        Case "SRL"
                            WarehouseID = "SRL"
                        Case Else
                            WarehouseID = ""
                    End Select

                    Dim QuantityOnHandString As String = "SELECT QuantityOnHand FROM ConsignmentInventory WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
                    Dim QuantityOnHandCommand As New SqlCommand(QuantityOnHandString, con)
                    QuantityOnHandCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                    QuantityOnHandCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = WarehouseID

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        QuantityOnHandConsignment = CDbl(QuantityOnHandCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        QuantityOnHandConsignment = 0
                    End Try
                    con.Close()

                    lblQOH.Text = QuantityOnHandConsignment
                    lblQOHLabel.Text = WarehouseID + " QOH"
                End If

                'Load values into Price Field (Last Purchase Cost for Remotes, Last Sale Price for TWD)
                Dim MAXDate1Statement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID"
                Dim MAXDate1Command As New SqlCommand(MAXDate1Statement, con)
                MAXDate1Command.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                MAXDate1Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDate1Command.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate1 = CInt(MAXDate1Command.ExecuteScalar)
                Catch ex As System.Exception
                    MAXDate1 = 0
                End Try
                con.Close()

                Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
                Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                LastPriceCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                LastPriceCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate1

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    RowLastPrice = CDbl(LastPriceCommand.ExecuteScalar)
                Catch ex As System.Exception
                    RowLastPrice = 0
                End Try
                con.Close()

                If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TFP" Then
                    'Load values into Cost Field
                    Dim MAXDate2Statement As String = "SELECT MAX(TransactionNumber) FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                    Dim MAXDate2Command As New SqlCommand(MAXDate2Statement, con)
                    MAXDate2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    MAXDate2Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        MAXDate2 = CInt(MAXDate2Command.ExecuteScalar)
                    Catch ex As Exception
                        MAXDate2 = 0
                    End Try
                    con.Close()

                    Dim LastCostStatement As String = "SELECT ItemCost FROM InventoryCosting WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND TransactionNumber = @TransactionNumber"
                    Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                    LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                    LastCostCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = MAXDate2

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        RowLastCost = CDbl(LastPriceCommand.ExecuteScalar)
                    Catch ex As Exception
                        RowLastCost = 0
                    End Try
                    con.Close()

                    lblLastPurchaseCost.Text = FormatCurrency(LastPurchaseCost, 4)
                Else
                    Try
                        'Load values into Cost Field 
                        Dim MAXDate3Statement As String = "SELECT MAX(ReceivingHeaderKey) FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                        Dim MAXDate3Command As New SqlCommand(MAXDate3Statement, con)
                        MAXDate3Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        MAXDate3Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            MAXDate3 = CInt(MAXDate3Command.ExecuteScalar)
                        Catch ex As System.Exception
                            MAXDate3 = 0
                        End Try
                        con.Close()

                        Dim LastCostStatement As String = "SELECT UnitCost FROM ReceivingLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND ReceivingHeaderKey = @ReceivingHeaderKey"
                        Dim LastCostCommand As New SqlCommand(LastCostStatement, con)
                        LastCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        LastCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = RowPartNumber
                        LastCostCommand.Parameters.Add("@ReceivingHeaderKey", SqlDbType.VarChar).Value = MAXDate3

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            RowLastCost = CDbl(LastCostCommand.ExecuteScalar)
                            lblLastPurchaseCost.Text = FormatCurrency(RowLastCost, 4)
                        Catch ex As System.Exception
                            RowLastCost = 0
                            lblLastPurchaseCost.Text = FormatCurrency(RowLastCost, 4)
                        End Try
                        con.Close()
                    Catch ex As System.Exception
                        lblLastPurchaseCost.Text = 0
                    End Try
                End If

                lblStdUnitCost.Text = FormatNumber(RowSTDCost, 4)
                lblStdUnitPrice.Text = FormatNumber(RowSTDPrice, 4)
                lblFullBoxCount.Text = RowBoxCount
                lblQtyPending.Text = FormatNumber(RowQuantityPending, 1)
                lblQtyOpen.Text = FormatNumber(RowQuantityCommitted, 1)
                lblLastSalePrice.Text = FormatNumber(RowLastPrice, 4)
            End If
        End If
    End Sub

    Private Sub dgvSalesOrderLines_CellValueChanged(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs) Handles dgvSalesOrderLines.CellValueChanged
        Dim NewLineCOS, LineUnitCOS, LineCOS, LinePrice, OldPrice, NewLineSalesTax, LineSalesTax, OldQuantity, LineExtendedAmount As Double
        Dim LineNumber As Integer = 0
        Dim LinePartNumber, LineCertType, LinePartDescription As String
        Dim CheckMoreOrLess As String = ""
        Dim LineStatus As String
        Dim LineQuantity As Double = 0
        Dim LineLabelCount As Integer = 0
        Dim UpdatedLabelCount As Integer = 0

        'If txtSOStatus.Text = "DROPSHIP" Then
        '    LineStatus = "DROPSHIP"
        'ElseIf txtSOStatus.Text = "CLOSED" Then
        '    LineStatus = "CLOSED"
        'Else
        '    LineStatus = "OPEN"
        'End If

        If txtSOStatus.Text = "CLOSED" Then
            'Do nothing - no changes
            If Me.dgvSalesOrderLines.RowCount <> 0 Then
                Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

                Try
                    LineNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("SalesOrderLineKeyColumn").Value
                Catch ex As Exception
                    LineNumber = 0
                End Try
                Try
                    LinePartDescription = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("DescriptionColumn").Value
                Catch ex As Exception
                    LinePartDescription = ""
                End Try
                Try
                    LineComment = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("LineCommentColumn").Value
                Catch ex As Exception
                    LineComment = ""
                End Try
                Try
                    LineLeadTime = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("LeadTimeColumn").Value
                Catch ex As Exception
                    LineLeadTime = ""
                End Try
                Try
                    LineCertType = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("CertificationTypeColumn").Value
                Catch ex As Exception
                    LineCertType = "0"
                End Try
                Try
                    LineLabelCount = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("LabelCountColumn").Value
                Catch ex As Exception
                    LineLabelCount = 0
                End Try
                Try
                    'UPDATE Sales Order based on line changes
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET Description = @Description, LineComment = @LineComment, LeadTime = @LeadTime, CertificationType = @CertificationType, LabelCount = @LabelCount WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                        '.Add("@ItemID", SqlDbType.VarChar).Value = LinePartNumber
                        .Add("@Description", SqlDbType.VarChar).Value = LinePartDescription
                        '.Add("@Price", SqlDbType.VarChar).Value = LinePrice
                        '.Add("@Quantity", SqlDbType.VarChar).Value = LineQuantity
                        '.Add("@ExtendedAmount", SqlDbType.VarChar).Value = LineExtendedAmount
                        '.Add("@SalesTax", SqlDbType.VarChar).Value = NewLineSalesTax
                        '.Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                        '.Add("@LineBoxes", SqlDbType.VarChar).Value = UpdatedLineBoxCount
                        .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                        .Add("@LeadTime", SqlDbType.VarChar).Value = LineLeadTime
                        .Add("@CertificationType", SqlDbType.VarChar).Value = LineCertType
                        '.Add("@EstExtendedCOS", SqlDbType.VarChar).Value = NewLineCOS
                        '.Add("@LineStatus", SqlDbType.VarChar).Value = LineStatus
                        .Add("@LabelCount", SqlDbType.VarChar).Value = LineLabelCount
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    '***************************************************************************************
                    'Since line changes were made, set variable to YES
                    LineChangesMade = "YES"
                    '***************************************************************************************
                Catch ex As System.Exception

                End Try
            End If
        Else
            If Me.dgvSalesOrderLines.RowCount <> 0 Then
                Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

                Try
                    LinePrice = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("PriceColumn").Value
                Catch ex As Exception
                    LinePrice = 0
                End Try
                Try
                    LineQuantity = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("QuantityColumn").Value
                Catch ex As Exception
                    LineQuantity = 0
                End Try
                Try
                    LineNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("SalesOrderLineKeyColumn").Value
                Catch ex As Exception
                    LineNumber = 0
                End Try
                Try
                    LinePartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value
                Catch ex As Exception
                    LinePartNumber = ""
                End Try
                Try
                    LinePartDescription = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("DescriptionColumn").Value
                Catch ex As Exception
                    LinePartDescription = ""
                End Try
                Try
                    LineComment = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("LineCommentColumn").Value
                Catch ex As Exception
                    LineComment = ""
                End Try
                Try
                    LineLeadTime = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("LeadTimeColumn").Value
                Catch ex As Exception
                    LineLeadTime = ""
                End Try
                Try
                    LineCertType = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("CertificationTypeColumn").Value
                Catch ex As Exception
                    LineCertType = "0"
                End Try
                Try
                    LineSalesTax = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("SalesTaxColumn").Value
                Catch ex As Exception
                    LineSalesTax = 0
                End Try
                Try
                    LineCOS = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("EstExtendedCOSColumn").Value
                Catch ex As Exception
                    LineCOS = 0
                End Try
                Try
                    LineLabelCount = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("LabelCountColumn").Value
                Catch ex As Exception
                    LineLabelCount = 0
                End Try
                '*******************************************************************************
                'Check to see if current quantity is less than what has already shipped.
                Dim CheckShipLineQuantityStatement As String = "SELECT QuantityShipped FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionKey = @DivisionKey"
                Dim CheckShipLineQuantityCommand As New SqlCommand(CheckShipLineQuantityStatement, con)
                CheckShipLineQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                CheckShipLineQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                CheckShipLineQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CheckShipLineQuantity = CDbl(CheckShipLineQuantityCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CheckShipLineQuantity = 0
                End Try
                con.Close()

                If LineQuantity < CheckShipLineQuantity Then
                    MsgBox("You cannot change this quantity to less than have already been shipped.", MsgBoxStyle.OkOnly)
                    CheckMoreOrLess = "LESS"
                ElseIf LineQuantity < 0 Then
                    MsgBox("You cannot change this quantity to less than zero.", MsgBoxStyle.OkOnly)
                    CheckMoreOrLess = "LESS"
                Else
                    '*******************************************************************************
                    'Determine if quantity or price changed
                    Dim OldQuantityString As String = "SELECT Quantity FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                    Dim OldQuantityCommand As New SqlCommand(OldQuantityString, con)
                    OldQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    OldQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                    Dim OldPriceString As String = "SELECT Price FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                    Dim OldPriceCommand As New SqlCommand(OldPriceString, con)
                    OldPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    OldPriceCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        OldQuantity = CDbl(OldQuantityCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        OldQuantity = 0
                    End Try
                    Try
                        OldPrice = CDbl(OldPriceCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        OldPrice = 0
                    End Try
                    con.Close()

                    LineExtendedAmount = LinePrice * LineQuantity
                    LineExtendedAmount = Math.Round(LineExtendedAmount, 2)
                    '********************************************************************************************************************************
                    'Load Tax Rate if customer is taxable
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        NewLineSalesTax = 0
                    Else
                        If chkTaxable.Checked = True And Val(txtTaxRate.Text) > 0 Then
                            SalesTaxRate1 = Val(txtTaxRate.Text)
                            NewLineSalesTax = SalesTaxRate1 * LineExtendedAmount
                        ElseIf chkTaxable.Checked = True And Val(txtTaxRate.Text) = 0 Then
                            Dim SalesTaxRateString As String = "SELECT SalesTaxRate FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
                            Dim SalesTaxRateCommand As New SqlCommand(SalesTaxRateString, con)
                            SalesTaxRateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            SalesTaxRateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                            If con.State = ConnectionState.Closed Then con.Open()
                            Try
                                SalesTaxRate1 = CDbl(SalesTaxRateCommand.ExecuteScalar)
                            Catch ex As System.Exception
                                SalesTaxRate1 = 0
                            End Try
                            con.Close()

                            NewLineSalesTax = SalesTaxRate1 * LineExtendedAmount
                        Else
                            NewLineSalesTax = 0
                        End If
                    End If

                    'Compare Line Quantity to make adjustment to Line COS
                    If OldQuantity = LineQuantity Then
                        'Do nothing - COS is correct
                        NewLineCOS = LineCOS
                    ElseIf LineQuantity = 0 Then
                        NewLineCOS = 0
                    Else
                        If OldQuantity = 0 Then
                            LineUnitCOS = 0
                        Else
                            LineUnitCOS = LineCOS / OldQuantity

                            NewLineCOS = LineUnitCOS * LineQuantity
                        End If
                    End If

                    LineStatus = txtSOStatus.Text
                    '*******************************************************************************
                    'Update Line Weight and Line Boxes
                    Dim GetBoxCount As Integer = 0
                    Dim GetPieceWeight As Double = 0
                    Dim BoxWeight As Integer = 0

                    Dim GetPieceWeightString As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                    Dim GetPieceWeightCommand As New SqlCommand(GetPieceWeightString, con)
                    GetPieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = LinePartNumber
                    GetPieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim GetBoxWeightString As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                    Dim GetBoxWeightCommand As New SqlCommand(GetBoxWeightString, con)
                    GetBoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = LinePartNumber
                    GetBoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim GetBoxCountString As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                    Dim GetBoxCountCommand As New SqlCommand(GetBoxCountString, con)
                    GetBoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = LinePartNumber
                    GetBoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        GetPieceWeight = CDbl(GetPieceWeightCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetPieceWeight = 0
                    End Try
                    Try
                        GetBoxWeight = CInt(GetBoxWeightCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetBoxWeight = 0
                    End Try
                    Try
                        GetBoxCount = CInt(GetBoxCountCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetBoxCount = 0
                    End Try
                    con.Close()

                    If BoxCount <> 0 Then
                        LineBoxes = LineQuantity / GetBoxCount

                        If GetBoxWeight <> 0 Then
                            LineWeight = LineBoxes * GetBoxWeight
                            LineWeight = Math.Round(LineWeight, 2)
                        Else
                            LineWeight = LineQuantity * GetPieceWeight
                            LineWeight = Math.Round(LineWeight, 2)
                        End If
                    Else
                        LineBoxes = 0

                        LineWeight = LineQuantity * GetPieceWeight
                        LineWeight = Math.Round(LineWeight, 2)
                    End If
                    '*******************************************************************************
                    'Round box count to even numbers (round up)
                    UpdatedLineBoxCount = Math.Ceiling(LineBoxes)

                    'Round label count to even numbers (round up)
                    UpdatedLabelCount = Math.Ceiling(LineLabelCount)
                    '*******************************************************************************
                    'Dim CurrentLineStatus As String

                    'If txtSOStatus.Text = "DROPSHIP" Then
                    '    CurrentLineStatus = "DROPSHIP"
                    'Else
                    '    CurrentLineStatus = "OPEN"
                    'End If

                    'UPDATE Sales Order based on line changes
                    Try
                        cmd = New SqlCommand("UPDATE SalesOrderLineTable SET Description = @Description, Price = @Price, Quantity = @Quantity, ExtendedAmount = @ExtendedAmount, SalesTax = @SalesTax, LineWeight = @LineWeight, LineBoxes = @LineBoxes, LineComment = @LineComment, LeadTime = @LeadTime, CertificationType = @CertificationType, EstExtendedCOS = @EstExtendedCOS, LabelCount = @LabelCount WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

                        With cmd.Parameters
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                            .Add("@ItemID", SqlDbType.VarChar).Value = LinePartNumber
                            .Add("@Description", SqlDbType.VarChar).Value = LinePartDescription
                            .Add("@Price", SqlDbType.VarChar).Value = LinePrice
                            .Add("@Quantity", SqlDbType.VarChar).Value = LineQuantity
                            .Add("@ExtendedAmount", SqlDbType.VarChar).Value = LineExtendedAmount
                            .Add("@SalesTax", SqlDbType.VarChar).Value = NewLineSalesTax
                            .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                            .Add("@LineBoxes", SqlDbType.VarChar).Value = UpdatedLineBoxCount
                            .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                            .Add("@LeadTime", SqlDbType.VarChar).Value = LineLeadTime
                            .Add("@CertificationType", SqlDbType.VarChar).Value = LineCertType
                            .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = NewLineCOS
                            .Add("@LabelCount", SqlDbType.VarChar).Value = UpdatedLabelCount
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()

                        CheckMoreOrLess = "MORE"
                    Catch ex As System.Exception

                    End Try
                End If
                '***********************************************************************
                'Check Line Status and open or close lines as needed
                Dim CheckOpenQuantity As Double = 0

                Dim CheckOpenQuantityStatement As String = "SELECT (QuantityOrdered - QuantityShipped) as QuantityOpen FROM SalesOrderQuantityStatus WHERE DivisionKey = @DivisionKey AND SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                Dim CheckOpenQuantityCommand As New SqlCommand(CheckOpenQuantityStatement, con)
                CheckOpenQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                CheckOpenQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                CheckOpenQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CheckOpenQuantity = CDbl(CheckOpenQuantityCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CheckOpenQuantity = 0
                End Try
                con.Close()
                Try
                    If CheckOpenQuantity = 0 Then
                        'Update Line table in case of datagrid changes
                        cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                        cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                        cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Else
                        'Update Line table in case of datagrid changes
                        cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                        cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                        cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    End If
                Catch ex As System.Exception
                End Try
                '***************************************************************************************
                If CheckMoreOrLess = "LESS" Then
                    'Do nothing
                Else
                    LoadSalesOrderTaxRates()

                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        CalculateCanadianTotals()
                    Else
                        RecalculateLineTaxTotals()
                        CalculateTotals()
                    End If
                    '*******************************************************************************
                    'Update SO Header Table
                    Try
                        cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET FreightCharge = @FreightCharge, TotalSalesTax = @TotalSalesTax, ProductTotal = @ProductTotal, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey", con)

                        With cmd.Parameters
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@FreightCharge", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                            .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                            .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                            .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                            .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                            .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                            .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                            .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As System.Exception
                    End Try
                    '***************************************************************************************
                    'Since line changes were made, set variable to YES
                    LineChangesMade = "YES"
                    '*******************************************************************************
                    ''updates the notifications to reflect the change
                    UpdateNotifications(cboEditPartNumber.Text)
                End If
                '***************************************************************************************
                'Reload data in datagrid after changes
                ShowData()
            End If
        End If
    End Sub

    Private Sub dgvSOInvoices_CellDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvSOInvoices.CellDoubleClick
        Dim RowInvoiceNumber, RowShipNumber As Integer
        Dim CustomerEmail As String

        If dgvSOInvoices.RowCount <> 0 Then
            Dim RowIndex2 As Integer = Me.dgvSOInvoices.CurrentCell.RowIndex

            RowInvoiceNumber = Me.dgvSOInvoices.Rows(RowIndex2).Cells("SOInvoiceNumberColumn").Value
            RowShipNumber = Me.dgvSOInvoices.Rows(RowIndex2).Cells("SOInvoiceShipmentNumberColumn").Value

            Dim CustomerEmailStatement As String = "SELECT APEmailAddress FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
            Dim CustomerEmailCommand As New SqlCommand(CustomerEmailStatement, con)
            CustomerEmailCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
            CustomerEmailCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CustomerEmail = CStr(CustomerEmailCommand.ExecuteScalar)
            Catch ex As Exception
                CustomerEmail = ""
            End Try
            con.Close()

            'Choose the Invoice Print Form by division
            If RowShipNumber = 0 Or Val(cboSalesOrderNumber.Text) = 0 Then
                GlobalInvoiceNumber = RowInvoiceNumber
                GlobalDivisionCode = cboDivisionID.Text
                'Get string Customer/InvoiceNumber for emails
                EmailInvoiceCustomer = cboCustomerID.Text
                EmailStringInvoiceNumber = CStr(GlobalInvoiceNumber)
                EmailCustomerEmailAddress = CustomerEmail
                'Choose the correct Print Form (REMOTE or LOCAL)

                'Get Login Type
                Dim GetLoginType As String = ""

                Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
                Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
                GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetLoginType = ""
                End Try
                con.Close()

                If GetLoginType = "REMOTE" Then
                    Using NewPrintInvoiceBillOnlyRemote As New PrintInvoiceBillOnlyRemote
                        Dim result = NewPrintInvoiceBillOnlyRemote.ShowDialog()
                    End Using
                Else
                    Using NewPrintInvoiceBillOnly As New PrintInvoiceBillOnly
                        Dim result = NewPrintInvoiceBillOnly.ShowDialog()
                    End Using
                End If
            Else
                GlobalInvoiceNumber = RowInvoiceNumber
                GlobalDivisionCode = cboDivisionID.Text
                'Get string Customer/InvoiceNumber for emails
                EmailInvoiceCustomer = cboCustomerID.Text
                EmailStringInvoiceNumber = CStr(GlobalInvoiceNumber)
                EmailCustomerEmailAddress = CustomerEmail

                'Choose the correct Print Form (REMOTE or LOCAL)

                'Get Login Type
                Dim GetLoginType As String = ""

                Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
                Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
                GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetLoginType = ""
                End Try
                con.Close()

                If GetLoginType = "REMOTE" Then
                    Using NewPrintInvoiceSingleRemote As New PrintInvoiceSingleRemote
                        Dim result = NewPrintInvoiceSingleRemote.ShowDialog()
                    End Using
                Else
                    Using NewPrintInvoiceSingle As New PrintInvoiceSingle
                        Dim result = NewPrintInvoiceSingle.ShowDialog()
                    End Using
                End If
            End If
        End If
    End Sub

    Private Sub dgvSOReturns_CellDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvSOReturns.CellDoubleClick
        Dim RowReturnNumber As Integer
        If Me.dgvSOReturns.RowCount <> 0 Then
            Dim RowIndex As Integer = Me.dgvSOReturns.CurrentCell.RowIndex

            RowReturnNumber = Me.dgvSOReturns.Rows(RowIndex).Cells("SOReturnNumberColumn").Value

            GlobalCustomerReturnNumber = RowReturnNumber
            GlobalDivisionCode = cboDivisionID.Text

            Using NewPrintCustomerReturn As New PrintCustomerReturn
                Dim Result = NewPrintCustomerReturn.ShowDialog()
            End Using
        End If
    End Sub

    Private Sub dgvSOShipments_CellDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvSOShipments.CellDoubleClick
        Dim RowShipNumber As Integer = 0

        If dgvSOShipments.RowCount <> 0 Then
            Dim RowIndex As Integer = Me.dgvSOShipments.CurrentCell.RowIndex

            RowShipNumber = Me.dgvSOShipments.Rows(RowIndex).Cells("SOShipmentNumberColumn").Value

            GlobalShipmentNumber = RowShipNumber
            GlobalDivisionCode = cboDivisionID.Text

            'Choose the correct Print Form (REMOTE or LOCAL)

            'Get Login Type
            Dim GetLoginType As String = ""

            Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
            Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
            GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetLoginType = ""
            End Try
            con.Close()

            If GetLoginType = "REMOTE" Then
                Using NewPrintPackingListRemote As New PrintPackingListRemote
                    Dim Result = NewPrintPackingListRemote.ShowDialog()
                End Using
            Else
                Using NewPrintPackingList As New PrintPackingList
                    Dim Result = NewPrintPackingList.ShowDialog()
                End Using
            End If
        End If
    End Sub

    'Clear Sub-routines

    Public Sub ClearData()
        cboCustomerName.Refresh()
        cboPartNumber.Refresh()
        cboCustomerID.Refresh()
        cboSalesOrderNumber.Refresh()
        cboShipVia.Refresh()
        cboPartDescription.Refresh()
        cboSalesOrderNumber.Refresh()
        cboShipToID.Refresh()
        cboCertCode.Refresh()
        cboCertType.Refresh()
        cboCustomerClass.Refresh()
        cboShipMethod.Refresh()
        cboSTCountryName.Refresh()
        cboBTCountryName.Refresh()

        txtBTAddress1.Refresh()
        txtBTAddress2.Refresh()
        txtBTCity.Refresh()
        txtBTZip.Refresh()
        txtBTState.Refresh()
        txtComment.Refresh()
        txtBTCountry.Refresh()
        txtSTAddress1.Refresh()
        txtSTAddress2.Refresh()
        txtSTCity.Refresh()
        txtSTZip.Refresh()
        txtPRONumber.Refresh()
        txtFreightCharges.Refresh()
        txtSTCountry.Refresh()
        txtFreightQuoteNumber.Refresh()
        txtFreightQuoteAmount.Refresh()
        txtCustomerPO.Refresh()
        txtSOStatus.Refresh()
        txtLeadTime.Refresh()
        txtShippingInstructions.Refresh()
        txtCertDescription.Refresh()
        txtLongDescription.Refresh()
        txtDSPONumber.Refresh()
        txtDSVendorID.Refresh()
        txtHSTRate.Refresh()
        txtEditExtendedAmount.Refresh()
        txtEditLeadTime.Refresh()
        txtEditLineComments.Refresh()
        txtEditPrice.Refresh()
        txtEditQuantity.Refresh()
        txtSTState.Refresh()
        txtFreightAccount.Refresh()
        txtSpecialLabelLine1.Refresh()
        txtSpecialLabelLine2.Refresh()
        txtSpecialLabelLine3.Refresh()

        txtBTAddress1.Clear()
        txtBTAddress2.Clear()
        txtBTCity.Clear()
        txtBTZip.Clear()
        txtBTState.Clear()
        txtComment.Clear()
        txtBTCountry.Clear()
        txtSTAddress1.Clear()
        txtSTAddress2.Clear()
        txtSTCity.Clear()
        txtSTZip.Clear()
        txtPRONumber.Clear()
        txtFreightCharges.Clear()
        txtSTCountry.Clear()
        txtFreightQuoteNumber.Clear()
        txtFreightQuoteAmount.Clear()
        txtCustomerPO.Clear()
        txtSOStatus.Clear()
        txtLeadTime.Clear()
        txtExtendedAmount.Clear()
        txtLineComment.Clear()
        txtPricePerUnit.Clear()
        txtQuantityOrdered.Clear()
        txtShippingInstructions.Clear()
        txtLongDescription.Clear()
        txtCertDescription.Clear()
        txtDSPONumber.Clear()
        txtDSVendorID.Clear()
        txtTaxRate.Clear()
        txtHSTRate.Clear()
        txtEditExtendedAmount.Clear()
        txtEditLeadTime.Clear()
        txtEditLineComments.Clear()
        txtEditPrice.Clear()
        txtEditQuantity.Clear()
        txtSTState.Clear()
        txtFreightAccount.Clear()
        txtSpecialLabelLine1.Clear()
        txtSpecialLabelLine2.Clear()
        txtSpecialLabelLine3.Clear()
        txtDeclaredValue.Clear()

        cboPartNumber.SelectedIndex = -1
        cboCustomerID.SelectedIndex = -1
        cboCustomerName.SelectedIndex = -1
        cboSalesOrderNumber.SelectedIndex = -1
        cboShipVia.SelectedIndex = -1
        cboPartDescription.SelectedIndex = -1
        cboShipToID.SelectedIndex = -1
        cboCertCode.SelectedIndex = -1
        cboCertType.SelectedIndex = -1
        cboCustomerClass.SelectedIndex = -1
        cboPartDescription.SelectedIndex = -1
        cboEditPartDescription.SelectedIndex = -1
        cboEditCertType.SelectedIndex = -1
        cboDeleteLine.SelectedIndex = -1
        cboSalesPersonID.Text = EmployeeSalespersonCode
        cboShipMethod.SelectedIndex = -1
        cboSTCountryName.SelectedIndex = -1
        cboBTCountryName.SelectedIndex = -1

        lblOrderTotal.Text = ""
        lblFreightTotal.Text = ""
        lblProductTotal.Text = ""
        lblTaxTotal.Text = ""
        lblPieceWeight.Text = ""
        lblFullBoxCount.Text = ""
        lblEstShippingWeight.Text = ""
        lblLastPurchaseCost.Text = ""
        lblLastSalePrice.Text = ""
        lblHST.Text = ""
        lblPST.Text = ""
        lblQtyOpen.Text = ""
        lblStdUnitCost.Text = ""
        lblStdUnitPrice.Text = ""
        lblPricingLevel.Text = ""
        lblQtyPending.Text = ""
        lblQOH.Text = ""
        lblOpenWeight.Text = ""
        lblDifference.Text = ""
        lblInvoiceTotal.Text = ""
        lblNumberInvoices.Text = ""
        lblNumberReturns.Text = ""
        lblNumberShipments.Text = ""
        lblShipmentTotal.Text = ""
        lblReturnTotal.Text = ""
        lblPaymentTerms.Text = ""
        lblCreditLimit.Text = ""
        lblCountPOs.Text = ""

        dtpSalesOrderDate.Value = Today()
        dtpShippingDate.Value = Today()

        chkTaxable.Checked = False
        chkAddHST.Checked = False
        chkAddPST.Checked = False
        txtHSTRate.Visible = False
        chkDropShip.Checked = False

        cboCustomerID.Enabled = True
        cboCustomerName.Enabled = True

        UnlockControlsIfUnlocked()

        chkAddFerrules.Checked = True

        lblUpdatedPrice.Visible = False

        cmdExpediteOrder.ForeColor = Color.Blue
        ExpediteToShippingToolStripMenuItem.ForeColor = Color.Blue
        txtFreightCharges.BackColor = Color.White
        gpxDropShipDefaults.Enabled = True

        DisableFieldsIfNoSO()

        'Set default delivery type for companies
        If EmployeeCompanyCode = "CBS" Then
            cboShipVia.Text = "Will Call"
        ElseIf EmployeeCompanyCode = "SLC" Then
            cboShipVia.Text = "SEE SALESMAN"
        ElseIf EmployeeCompanyCode = "TWD" Then
            cboShipVia.Text = ""
        Else
            cboShipVia.Text = "Delivery"
        End If

        If cboDivisionID.Text = "TWD" Then
            cboFOB.Text = "Medina"
        Else
            cboFOB.Text = "Standard"
        End If

        'Set up tax totals for TFF
        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            LabelHST.Visible = True
            LabelPST.Visible = True
            lblPST.Visible = True
            lblHST.Visible = True
            LabelTotalTax.Text = "GST"
        Else
            LabelHST.Visible = False
            LabelPST.Visible = False
            lblPST.Visible = False
            lblHST.Visible = False
            LabelTotalTax.Text = "Total Tax"
        End If

        '***************************************************************************************
        'Since line changes were made, set variable to NO
        LineChangesMade = "NO"
        '***************************************************************************************

        'Initialize Counters
        counter = 1
        cboSalesOrderNumber.Enabled = True
        cboSalesOrderNumber.Focus()
    End Sub

    Public Sub ClearVariables()
        CheckDivision = ""
        txtFreightCharges.BackColor = Color.White
        CheckInvoiceStatus = 0
        PaymentTerms = "N30"
        ShipToName = ""
        ShipMethod = ""
        CheckShippingMethod = ""
        SVBillToName = ""
        SVBillToAddress1 = ""
        SVBillToAddress2 = ""
        SVBillToCity = ""
        SVBillToState = ""
        SVBillToZip = ""
        ThirdPartyShipper = ""
        NumberOfShipments = 0
        NumberOfReturns = 0
        NumberOfInvoices = 0
        SOShipmentTotal = 0
        SOReturnTotal = 0
        SOInvoiceTotal = 0
        SODifference = 0
        ShippingMethod = ""
        TotalWeightShipped = 0
        QuantityCommitted = 0
        PickQOH = 0
        PricingLevel = ""
        BillToAddress1 = ""
        BillToAddress2 = ""
        BillToCity = ""
        BillToState = ""
        BillToZip = ""
        BillToCountry = ""
        ShipToAddress1 = ""
        ShipToAddress2 = ""
        ShipToCity = ""
        ShipToState = ""
        ShipToZip = ""
        ShipToCountry = ""
        CustomerID = ""
        CustomerName = ""
        CustomerClass = ""
        CustomerPO = ""
        ShipVia = ""
        HeaderComment = ""
        PRONumber = ""
        AdditionalShipTo = ""
        QuoteNumber = ""
        PreferredShipper = ""
        CheckPartNumber = ""
        FreightCharge = 0
        TotalSalesTax = 0
        ProductTotal = 0
        SOTotal = 0
        QuotedFreight = 0
        ShippingWeight = 0
        OrderTotal = 0
        OrderQuantity = 0
        OrderPrice = 0
        SaleAmount = 0
        TaxRate = 0
        SalesTax = 0
        TotalTax = 0
        PieceWeight = 0
        StandardCost = 0
        StandardPrice = 0
        SalesTaxRate1 = 0
        BoxCount = 0
        MAXDate = 0
        SOLinePartNumber = 0
        SOLineHeatNumber = 0
        SOLineLotNumber = 0
        SOLineComment = 0
        LastLineNumber = 0
        NextLineNumber = 0
        LastTransactionNumber = 0
        NextTransactionNumber = 0
        counter = 0
        ItemPieceWeight = 0
        TotalWeight = 0
        TotalWeightRunningTotal = 0
        FullBoxCount = 0
        LineBoxCount = 0
        UpdatedLineBoxCount = 0
        LastCustomerPrice = 0
        QuantityOnHand = 0
        NominalDiameter = 0
        GetLineNumber = 0
        CheckOrderQuantity = 0
        NewOrderQuantity = 0
        ClearingAccount = ""
        SOStatus = ""
        LongDescription = ""
        OldPartNumber = ""
        ItemClass = ""
        GLCreditAccount = ""
        CustomerComment = ""
        SpecialInstructions = ""
        CheckBrokenBoxCharge = ""
        OnHoldStatus = ""
        CertificationType = ""
        CertDescription = ""
        FOXCertType = ""
        LongDescription = ""
        VendorID = ""
        PurchaseOrderHeaderKey = 0
        NominalLength = 0
        DropShipPONumber = 0
        StatusDropShipPO = 0
        LastPurchaseCost = 0
        PLSOLineNumber = 0
        CustomerPOType = ""
        TotalSalesTax = 0
        TotalSalesTax1 = 0
        TotalSalesTax2 = 0
        TotalSalesTax3 = 0
        CustomerClassType = ""
        CanadianPST = 0
        CanadianHST = 0
        GSTTaxRate = 0
        GSTExtendedAmount = 0
        PSTTaxRate = 0
        PSTExtendedAmount = 0
        HSTTaxRate = 0
        HSTExtendedAmount = 0
        HSTValue = 0
        QuantityPending = 0
        QuantityAvailable = 0
        EstExtendedCOS = 0
        EstTotalCOS = 0
        FIFOExtendedAmount = 0
        FIFOCost = 0
        FIFOTransactionCost = 0
        FIFOLastPurchaseCost = 0
        CheckShipmentPartNumber = 0
        CheckShipmentCustomer = 0
        CheckIfShipmentExists = 0
        CountShipLines = 0
        CheckSalesOrderKey = 0
        CheckShipmentStatus = 0
        AccountingHold = ""
        SalesTaxRate1 = 0
        SalesTaxRate2 = 0
        SalesTaxRate3 = 0
        CertCode = ""
        CertType = ""
        LoadFreightCharge = 0
        PurchProdLineID = ""
        ShippingAccount = ""
        needsSaved = False
        CheckPending = 0
        lastSO = ""
        NextPieceSold = 0
        CountryCodeFromState = ""
        StateCode = ""
        CountryNameFromState = ""
        EditGLCreditAccount = ""
        EditItemClass = ""
        InsertGLCreditAccount = ""
        InsertItemClass = ""
        CustomerOpenReceivables = 0
        CustomerCreditLimit = 0
        SpecialLabelLine1 = ""
        SpecialLabelLine2 = ""
        SpecialLabelLine3 = ""
        DeclaredValueAdded = ""
        DeclaredValue = 0
        AdjustedLastSalesPrice = 0
        CurrentPartNumber = ""
        CheckTWELabelCount = 0

        LineChangesMade = "NO"
    End Sub

    Public Sub ClearDataOnChange()
        NumberOfShipments = 0
        NumberOfReturns = 0
        NumberOfInvoices = 0
        SOShipmentTotal = 0
        SOReturnTotal = 0
        SOInvoiceTotal = 0
        SODifference = 0
        ShippingMethod = ""
        BillToAddress1 = ""
        BillToAddress2 = ""
        BillToCity = ""
        BillToState = ""
        BillToZip = ""
        BillToCountry = ""
        ShipToAddress1 = ""
        ShipToAddress2 = ""
        ShipToCity = ""
        ShipToState = ""
        ShipToZip = ""
        ShipToCountry = ""
        CustomerID = ""
        CustomerName = ""
        CustomerClass = ""
        CustomerPO = ""
        ShipVia = ""
        HeaderComment = ""
        PRONumber = ""
        AdditionalShipTo = ""
        QuoteNumber = ""
        SOLineLotNumber = ""
        SOLineComment = ""
        CustomerPOType = ""
        VendorID = ""
        ItemLongDescription = ""
        FOXCertType = ""
        CertDescription = ""
        CertificationType = ""
        OnHoldStatus = ""
        CheckBrokenBoxCharge = ""
        CheckPartNumber = ""
        AddAccessory = ""
        LineLeadTime = ""
        LineComment = ""
        SpecialInstructions = ""
        CustomerComment = ""
        PreferredShipper = ""
        LongDescription = ""
        VerifyItemID = ""
        ClearingAccount = ""
        SOStatus = ""
        OldPartNumber = ""
        ItemClass = ""
        GLCreditAccount = ""
        ShipAddress1 = ""
        ShipAddress2 = ""
        ShipCity = ""
        ShipState = ""
        ShipZip = ""
        ShipCountry = ""
        ShipName = ""
        GLDebitAccount = ""
        DSVendor = ""
        ItemID = ""
        Description = ""
        CustomerClassType = ""
        CheckIfLinesChanged = ""
        PaymentTerms = ""
        EditGLCreditAccount = ""
        EditItemClass = ""
        InsertGLCreditAccount = ""
        InsertItemClass = ""
        DeclaredValueAdded = ""

        txtFreightCharges.BackColor = Color.White

        FreightCharge = 0
        TotalSalesTax = 0
        ProductTotal = 0
        SOTotal = 0
        QuotedFreight = 0
        ShippingWeight = 0
        OrderTotal = 0
        OrderQuantity = 0
        OrderPrice = 0
        SaleAmount = 0
        TaxRate = 0
        SalesTax = 0
        TotalTax = 0
        PieceWeight = 0
        StandardCost = 0
        StandardPrice = 0
        SalesTaxRate1 = 0
        DropShipPONumber = 0
        PurchaseOrderHeaderKey = 0
        NominalLength = 0
        NewOrderQuantity = 0
        CheckOrderQuantity = 0
        BoxCount = 0
        MAXDate = 0
        SOLinePartNumber = 0
        SOLineHeatNumber = 0
        StatusDropShipPO = 0
        GetLineNumber = 0
        LastLineNumber = 0
        NextLineNumber = 0
        LastTransactionNumber = 0
        NextTransactionNumber = 0
        counter = 0
        QuantityOpen = 0
        ItemPieceWeight = 0
        TotalWeight = 0
        TotalWeightRunningTotal = 0
        FullBoxCount = 0
        LineBoxCount = 0
        UpdatedLineBoxCount = 0
        NewCheckBBCCharge = 0
        CheckPreviousBBC = 0
        NominalDiameter = 0
        LastCustomerPrice = 0
        QuantityOnHand = 0
        SalesTaxOpen = 0
        LineWeightOpen = 0
        OpenExtendedAmount = 0
        LineWeight = 0
        LineBoxes = 0
        LineProductTotal = 0
        LineProductWeight = 0
        LineSalesTax = 0
        ShipmentTotal = 0
        CheckShipStatus = 0
        CheckShipLineQuantity = 0
        LineBoxesOpen = 0
        CountLines = 0
        ShipmentLineNumber = 0
        NextPickLineNumber = 0
        LastPickLineNumber = 0
        LastBatchNumber = 0
        NextBatchNumber = 0
        LastShipmentNumber = 0
        NextShipmentNumber = 0
        Quantity = 0
        GLBatchNumber = 0
        ExtendedAmount = 0
        Price = 0
        LastPurchaseCost = 0
        PLSOLineNumber = 0
        DSPONumber = 0
        CheckSOLines = 0
        LineNumber = 0
        TotalQuantityOpen = 0
        CanadianPST = 0
        CanadianHST = 0
        CanadianGST = 0
        TotalSalesTax1 = 0
        TotalSalesTax2 = 0
        TotalSalesTax3 = 0
        PSTTaxRate = 0
        GSTTaxRate = 0
        HSTTaxRate = 0
        PSTExtendedAmount = 0
        GSTExtendedAmount = 0
        HSTExtendedAmount = 0
        QuantityPending = 0
        QuantityAvailable = 0
        AccountingHold = ""
        SalesTaxRate1 = 0
        SalesTaxRate2 = 0
        SalesTaxRate3 = 0
        ShippingAccount = ""
        SpecialLabelLine1 = ""
        SpecialLabelLine2 = ""
        SpecialLabelLine3 = ""

        cboCertCode.SelectedIndex = -1
        cboCertType.SelectedIndex = -1
        cboCustomerClass.SelectedIndex = -1
        cboCustomerID.SelectedIndex = -1
        cboCustomerName.SelectedIndex = -1
        cboDeleteLine.SelectedIndex = -1
        cboPartDescription.SelectedIndex = -1
        cboPartNumber.SelectedIndex = -1
        cboShipToID.SelectedIndex = -1
        cboShipVia.SelectedIndex = -1
        cboPartDescription.SelectedIndex = -1
        cboEditPartDescription.SelectedIndex = -1
        cboEditCertType.SelectedIndex = -1
        cboShipMethod.SelectedIndex = -1

        cboCertCode.Text = ""
        cboCertType.Text = ""
        cboCustomerClass.Text = ""
        cboCustomerID.Text = ""
        cboCustomerName.Text = ""
        cboDeleteLine.Text = ""
        cboPartDescription.Text = ""
        cboPartNumber.Text = ""
        cboShipToID.Text = ""
        cboShipVia.Text = ""
        cboPartDescription.Text = ""
        cboEditPartDescription.Text = ""
        cboEditCertType.Text = ""
        cboShipMethod.Text = ""

        txtBTAddress1.Clear()
        txtBTAddress2.Clear()
        txtBTCity.Clear()
        txtBTCountry.Clear()
        txtBTZip.Clear()
        txtBTState.Clear()
        txtCertDescription.Clear()
        txtComment.Clear()
        txtCustomerPO.Clear()
        txtDSPONumber.Clear()
        txtDSVendorID.Clear()
        txtExtendedAmount.Clear()
        txtFreightCharges.Clear()
        txtFreightQuoteAmount.Clear()
        txtFreightQuoteNumber.Clear()
        txtHSTRate.Clear()
        txtLeadTime.Clear()
        txtLineComment.Clear()
        txtLongDescription.Clear()
        txtPricePerUnit.Clear()
        txtPRONumber.Clear()
        txtQuantityOrdered.Clear()
        txtShippingInstructions.Clear()
        txtSOStatus.Clear()
        txtSTAddress1.Clear()
        txtSTAddress2.Clear()
        txtSTCity.Clear()
        txtSTCountry.Clear()
        txtSTName.Clear()
        txtSTZip.Clear()
        txtTaxRate.Clear()
        txtEditExtendedAmount.Clear()
        txtEditLeadTime.Clear()
        txtEditLineComments.Clear()
        txtEditPrice.Clear()
        txtEditQuantity.Clear()
        txtThirdPartyShipper.Clear()
        txtFreightAccount.Clear()
        txtSpecialLabelLine1.Clear()
        txtSpecialLabelLine2.Clear()
        txtSpecialLabelLine3.Clear()
        txtDeclaredValue.Clear()

        chkDropShip.Checked = False
        chkTaxable.Checked = False
        chkAddHST.Checked = False
        chkAddPST.Checked = False
        chkTaxable.Checked = False

        cboCustomerID.Enabled = True
        cboCustomerName.Enabled = True
        gpxDropShipDefaults.Enabled = True

        UnlockControlsIfUnlocked()

        lblFreightTotal.Text = ""
        lblEstShippingWeight.Text = ""
        lblFullBoxCount.Text = ""
        lblLastPurchaseCost.Text = ""
        lblLastSalePrice.Text = ""
        lblOrderTotal.Text = ""
        lblPieceWeight.Text = ""
        lblProductTotal.Text = ""
        lblPST.Text = ""
        lblQOH.Text = ""
        lblTaxTotal.Text = ""
        lblHST.Text = ""
        lblQtyOpen.Text = ""
        lblStdUnitCost.Text = ""
        lblStdUnitPrice.Text = ""
        lblPricingLevel.Text = ""
        lblOpenWeight.Text = ""
        lblQtyPending.Text = ""
        lblDifference.Text = ""
        lblInvoiceTotal.Text = ""
        lblNumberInvoices.Text = ""
        lblNumberReturns.Text = ""
        lblNumberShipments.Text = ""
        lblShipmentTotal.Text = ""
        lblReturnTotal.Text = ""
        lblPaymentTerms.Text = ""
        lblCreditLimit.Text = ""
        lblCountPOs.Text = ""

        LineChangesMade = "NO"
        lblUpdatedPrice.Visible = False

        If cboDivisionID.Text = "TWD" Then
            cboFOB.Text = "Medina"
        Else
            cboFOB.Text = "Standard"
        End If

        CheckToolStripMenuItem.Visible = False
    End Sub

    Public Sub ClearEditLines()
        cboPartDescription.SelectedIndex = -1
        cboEditPartDescription.SelectedIndex = -1
        cboEditCertType.SelectedIndex = -1

        txtEditExtendedAmount.Clear()
        txtEditLeadTime.Clear()
        txtEditLineComments.Clear()
        txtEditPrice.Clear()
        txtEditQuantity.Clear()
    End Sub

    Public Sub ClearInsertLines()
        cboInsertDescription.SelectedIndex = -1
        cboInsertPartNumber.SelectedIndex = -1
        numLineNumber.Value = 0

        txtInsertPrice.Clear()
        txtInsertComment.Clear()
        txtInsertQuantity.Clear()
        txtInsertExtendedAmount.Clear()
        txtInsertLeadTime.Clear()

        lblUpdatedPrice.Visible = False
    End Sub

    Public Sub ClearDataInDatagrid()
        dgvSalesOrderLines.DataSource = Nothing
    End Sub

    Public Sub ClearAllDatagrids()
        dgvSalesOrderLines.DataSource = Nothing
        dgvSOInvoices.DataSource = Nothing
        dgvSOReturns.DataSource = Nothing
        dgvSOShipments.DataSource = Nothing
    End Sub

    Public Sub ClearSOReturns()
        dgvSOReturns.DataSource = Nothing
    End Sub

    Public Sub ClearSOShipments()
        dgvSOShipments.DataSource = Nothing
    End Sub

    Public Sub ClearSOInvoices()
        dgvSOInvoices.DataSource = Nothing
    End Sub

    'Combo Box Index/Text Changes Events

    Private Sub cboDivisionID_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDivisionID.SelectedIndexChanged
        If Not String.IsNullOrEmpty(lastSO) Then
            unlockBatch(lastSO)
        End If

        'Set date format and Canadian Defaults
        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            chkAddHST.Visible = True
            chkAddPST.Visible = True
            txtHSTRate.Visible = False
            chkTaxable.Visible = False
            txtTaxRate.Visible = False
            lblHST.Visible = True
            lblPST.Visible = True
            LabelTotalTax.Text = "GST"
            cmdRemoveSalesTax.Visible = False
            dgvSalesOrderLines.Columns("SalesTaxColumn").Visible = False
            AddTaxToSOToolStripMenuItem.Enabled = False
        Else
            chkAddHST.Visible = False
            chkAddPST.Visible = False
            txtHSTRate.Visible = False
            chkTaxable.Visible = True
            lblHST.Visible = False
            lblPST.Visible = False
            LabelTotalTax.Text = "Total Tax"
            cmdRemoveSalesTax.Visible = True
            dgvSalesOrderLines.Columns("SalesTaxColumn").Visible = True
            AddTaxToSOToolStripMenuItem.Enabled = True
        End If

        'Clear text boxes on load and set load defaults
        LoadItemList()
        LoadPartDescription()
        LoadCustomerList()
        LoadCustomerName()
        LoadSalesOrderNumber()
        LoadCertificationData()
        LoadCustomerClass()
        LoadEditItemList()
        LoadEditCertificationData()
        LoadInsertItemList()
        LoadShipMethod()
        LoadSalesID()
        LoadFOB()
        LoadShipToCountry()
        LoadBillToCountry()

        'Set defaults for FOB
        If cboDivisionID.Text = "TWD" Then
            cboFOB.Enabled = True
            cboFOB.Text = "Medina"
            llLastCost.Text = "Manufactured Cost"
            llLastCost.Enabled = False
        ElseIf cboDivisionID.Text = "TFP" Then
            cboFOB.Enabled = False
            cboFOB.Text = "Standard"
            llLastCost.Text = "Manufactured Cost"
            llLastCost.Enabled = False
        ElseIf cboDivisionID.Text = "TFF" Then
            cboFOB.Enabled = True
            cboFOB.Text = "Standard"
            llLastCost.Text = "Last Purchase Cost"
            llLastCost.Enabled = True
        ElseIf cboDivisionID.Text = "TWE" Then
            cboFOB.Enabled = True
            cboFOB.Text = "Standard"
            llLastCost.Text = "Manufactured Cost"
            llLastCost.Enabled = True
        ElseIf cboDivisionID.Text = "TST" Then
            cboFOB.Enabled = True
            cboFOB.Text = "Standard"
            llLastCost.Text = "Last Purchase Cost"
            llLastCost.Enabled = True
        Else
            cboFOB.Enabled = False
            cboFOB.Text = "Standard"
            llLastCost.Text = "Last Purchase Cost"
            llLastCost.Enabled = True
        End If

        'Set default delivery type for companies
        If EmployeeCompanyCode = "CBS" Then
            cboShipVia.Text = "WILL CALL"
        ElseIf EmployeeCompanyCode = "SLC" Then
            cboShipVia.Text = "SEE SALESMAN"
        ElseIf EmployeeCompanyCode = "TWD" Then
            cboShipVia.Text = ""
        Else
            cboShipVia.Text = ""
        End If

        'Set button defaults for TFP
        If cboDivisionID.Text = "TFP" Then
            cmdPrintConfirm.Text = "Print NOR Letter"
            cmdPrint.Text = "Print ACKGT."
        Else
            cmdPrintConfirm.Text = "Print/Email Confirm."
            cmdPrint.Text = "Print Sales Order"
        End If

        If cboDivisionID.Text = "TWE" Then
            cmdPrintTWELabels.Visible = True
        Else
            cmdPrintTWELabels.Visible = False
        End If

        If cboDivisionID.Text = "SLC" Then
            cmdPrintSLCLabels.Visible = True
        Else
            cmdPrintSLCLabels.Visible = False
        End If

        ClearVariables()
        ClearData()
        ClearSOInvoices()
        ClearSOReturns()
        ClearSOShipments()
        ClearDataInDatagrid()
    End Sub

    Private Sub cboCertType_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCertType.SelectedIndexChanged
        If isLoaded Then
            LoadCertDataByType()
        End If
    End Sub

    Private Sub cboCertCode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCertCode.SelectedIndexChanged
        If isLoaded Then
            LoadCertDataByCode()
        End If
        If cboCertCode.Focused And isLoaded Then
            needsSaved = True
        End If
    End Sub

    Private Sub cboPartDescription_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPartDescription.SelectedIndexChanged
        LoadPartByDescription()
    End Sub

    Private Sub cboCustomerName_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCustomerName.SelectedIndexChanged
        If cboCustomerName.Text = "" Then
            'skip load routine if blank
        Else
            LoadCustomerIDByName()
        End If
    End Sub

    Private Sub cboSalesOrderNumber_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboSalesOrderNumber.SelectedIndexChanged
        If isLoaded Then
            If Not String.IsNullOrEmpty(lastSO) Then
                unlockBatch(lastSO)
            End If

            ClearDataOnChange()

            If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
                DisableFieldsIfNoSO()
                ClearDataInDatagrid()
                ClearSOInvoices()
                ClearSOReturns()
                ClearSOShipments()
            Else
                ShowData()
                LoadSOShipments()
                LoadSOReturns()
                LoadSOInvoices()
                LoadShipmentCustomer()
                LoadSalesOrderData()
                LoadOrderTracking()
                LoadSalesOrderStatus()
                DisableFieldsIfNoSO()


                If SOStatus = "DROPSHIP" Then
                    LoadDropShipDetails()
                End If
            End If

            CheckIfLocked()

            If IsSalesOrderLocked = "YES" Then
                LockControlsIfLocked()
            Else
                LockBatch()
            End If

            lastSO = cboSalesOrderNumber.Text
        End If
    End Sub

    Private Sub cboPartNumber_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPartNumber.SelectedIndexChanged
        'If isLoaded Then
        GlobalMaintenancePartNumber = cboPartNumber.Text
        GlobalMaintenancePartDescription = cboPartDescription.Text

        If cboPartNumber.Text = "" Then
            'Skip - no part number, no part data
        Else
            LoadItemData()

            Select Case ItemClass
                Case "FREIGHT"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case "MISC ITEMS"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case "MISC-CHARGE"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case "OUTSIDE WORK"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case "SALES TAX"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case "REPAIR"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case "RENTAL"
                    lblQOH.Text = 0
                    lblQtyOpen.Text = 0
                    lblQtyPending.Text = 0
                    lblLastSalePrice.Text = 0
                    lblLastPurchaseCost.Text = 0
                    txtPricePerUnit.Text = 0
                    cboCertType.Text = "0"
                Case Else
                    'Load Cert Type/Last Price for Inventory Items only
                    LoadDefaultCertFromFOX()

                    If cboDivisionID.Text = "TWD" Then
                        If cboFOB.Text = "Medina" Or cboFOB.Text = "" Then
                            CurrentPartNumber = cboPartNumber.Text
                            LoadLastSalesPriceTWDRevised()
                            LoadQuantityOnHand()
                        Else
                            CurrentPartNumber = cboPartNumber.Text
                            LoadLastSalesPriceTWDRevised()
                            LoadQOHConsignment()
                        End If
                    Else
                        LoadQuantityOnHand()
                        LoadLastPrice()
                    End If
            End Select

            LoadGLAccountNumber()
            LoadDescriptionByPart()
        End If
        'End If
    End Sub

    Private Sub cboShipToID_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboShipToID.SelectedIndexChanged
        If isLoaded Then
            If cboShipToID.Text = "" Then
                LoadDefaultShipTo()
            Else
                LoadAddShipToData()
            End If

            If cboShipToID.Focused Then
                needsSaved = True
            End If
        End If
    End Sub

    Private Sub cboCustomerID_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCustomerID.SelectedIndexChanged
        If isLoaded Then
            If cboCustomerID.Text = "" Then
                'Skip routine if no customer ID
            Else
                LoadCustomerData()
                isLoaded = False
                ShowAdditionalShipTo()
                isLoaded = True
                CheckForShipmentsForCustomer()
                LoadCustomerNameByID()

                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    LoadCanadianTaxRates()
                End If
            End If

            If cboCustomerID.Focused Then
                needsSaved = True
            End If
        End If
    End Sub

    Private Sub cboBTCountryName_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboBTCountryName.SelectedIndexChanged
        LoadBTCountryCodeByCountry()
    End Sub

    Private Sub cboSTCountryName_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboSTCountryName.SelectedIndexChanged
        LoadSTCountryCodeByCountry()
    End Sub

    Private Sub cboInsertPartNumber_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboInsertPartNumber.SelectedIndexChanged
        'Load Cert Type
        Dim FOXCertTypeString As String = "SELECT CertificationType FROM FOXTable WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
        Dim FOXCertTypeCommand As New SqlCommand(FOXCertTypeString, con)
        FOXCertTypeCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboInsertPartNumber.Text
        FOXCertTypeCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = "TWD"

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            FOXCertType = CStr(FOXCertTypeCommand.ExecuteScalar)
            If FOXCertType = "" Then FOXCertType = "0"
        Catch ex As System.Exception
            FOXCertType = "0"
        End Try
        con.Close()

        cboCertCode.Text = FOXCertType

        'Get Last Price
        Try
            'Load values into Price Field
            Dim MAXDateStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID"
            Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
            MAXDateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
            MAXDateCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            MAXDateCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                MAXDate = CInt(MAXDateCommand.ExecuteScalar)
            Catch ex As System.Exception
                MAXDate = 0
            End Try
            con.Close()

            If MAXDate = 0 Then
                Dim MAXDate1Statement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderLineQuery WHERE DivisionKey = @DivisionKey AND ItemID = @ItemID"
                Dim MAXDate1Command As New SqlCommand(MAXDate1Statement, con)
                MAXDate1Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                MAXDate1Command.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    MAXDate = CInt(MAXDate1Command.ExecuteScalar)
                Catch ex As System.Exception
                    MAXDate = 0
                End Try
                con.Close()
            End If

            Dim LastPriceStatement As String = "SELECT Price FROM SalesOrderLineQuery WHERE CustomerID = @CustomerID AND DivisionKey = @DivisionKey AND ItemID = @ItemID AND SalesOrderKey = @SalesOrderKey"
            Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
            LastPriceCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
            LastPriceCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            LastPriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text
            LastPriceCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = MAXDate

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                LastCustomerPrice = CDbl(LastPriceCommand.ExecuteScalar)
            Catch ex As System.Exception
                LastCustomerPrice = 0
            End Try
            con.Close()

            txtInsertPrice.Text = LastCustomerPrice
        Catch ex As System.Exception
            txtInsertPrice.Text = 0
        End Try
    End Sub

    Private Sub cboDeleteLine_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDeleteLine.SelectedIndexChanged
        ClearEditLines()
        LoadEditLineData()
    End Sub

    Private Sub cboDeleteLine_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDeleteLine.TextChanged
        LoadCheckShipmentPartNumber()
    End Sub

    Private Sub cboShipMethod_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboShipMethod.SelectedIndexChanged
        If cboShipMethod.Text = "THIRD PARTY" And txtSOStatus.Text = "OPEN" Then
            txtThirdPartyShipper.Enabled = True
            GetThirdPartyBillingData()
            tabExpandedMenu.SelectedIndex = 1
            txtThirdPartyShipper.Focus()
        ElseIf cboShipMethod.Text = "THIRD PARTY" And txtSOStatus.Text = "SHIPPED" Then
            txtThirdPartyShipper.Enabled = True
            If txtThirdPartyShipper.Text = "" Then
                GetThirdPartyBillingData()
            Else
                'Skip
            End If
            tabExpandedMenu.SelectedIndex = 1
            txtThirdPartyShipper.Focus()
        ElseIf cboShipMethod.Text = "THIRD PARTY" And txtSOStatus.Text = "DROPSHIP" Then
            txtThirdPartyShipper.Enabled = True
            If txtThirdPartyShipper.Text = "" Then
                GetThirdPartyBillingData()
            Else
                'Skip
            End If
            tabExpandedMenu.SelectedIndex = 1
            txtThirdPartyShipper.Focus()
        Else
            txtThirdPartyShipper.Enabled = False
            txtThirdPartyShipper.Clear()
        End If
    End Sub

    Private Sub cboFOB_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboFOB.SelectedIndexChanged
        If cboDivisionID.Text = "TWD" And cboFOB.Text = "Medina" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        ElseIf cboDivisionID.Text = "TWD" And cboFOB.Text = "" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        ElseIf cboDivisionID.Text = "TWD" And (cboFOB.Text = "Downey" Or cboFOB.Text = "Hayward" Or cboFOB.Text = "Bessemer" Or cboFOB.Text = "Seattle" Or cboFOB.Text = "Lewisville" Or cboFOB.Text = "Lyndhurst" Or cboFOB.Text = "Phoenix" Or cboFOB.Text = "SRL" Or cboFOB.Text = "Renton" Or cboFOB.Text = "Lake Stevens") Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True

            Dim Warehousename, WarehouseID As String
            Warehousename = cboFOB.Text

            Select Case Warehousename
                Case "Bessemer"
                    WarehouseID = "BCW"
                Case "Downey"
                    WarehouseID = "DCW"
                Case "Hayward"
                    WarehouseID = "HCW"
                Case "Lewisville"
                    WarehouseID = "LCW"
                Case "Phoenix"
                    WarehouseID = "PCW"
                Case "Seattle"
                    WarehouseID = "SCW"
                Case "Lyndhurst"
                    WarehouseID = "YCW"
                Case "Renton"
                    WarehouseID = "RCW"
                Case "Lake Stevens"
                    WarehouseID = "LSCW"
                Case "SRL"
                    WarehouseID = "SRL"
                Case Else
                    WarehouseID = ""
            End Select

            lblQOHLabel.Text = WarehouseID + " QOH"
        ElseIf cboDivisionID.Text = "TFF" And cboFOB.Text = "SRL" Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True

            Dim Warehousename, WarehouseID As String
            Warehousename = cboFOB.Text

            Select Case Warehousename
                Case "SRL"
                    WarehouseID = "SRL"
                Case Else
                    WarehouseID = ""
            End Select

            lblQOHLabel.Text = WarehouseID + " QOH"
        ElseIf cboDivisionID.Text = "TST" And cboFOB.Text = "Standard" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        ElseIf cboDivisionID.Text = "TST" And cboFOB.Text = "" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        ElseIf cboDivisionID.Text = "TST" And (cboFOB.Text = "Downey" Or cboFOB.Text = "Hayward" Or cboFOB.Text = "Bessemer" Or cboFOB.Text = "Seattle" Or cboFOB.Text = "Lewisville" Or cboFOB.Text = "Lyndhurst" Or cboFOB.Text = "Phoenix" Or cboFOB.Text = "SRL") Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True

            Dim Warehousename, WarehouseID As String
            Warehousename = cboFOB.Text

            Select Case Warehousename
                Case "Bessemer"
                    WarehouseID = "BCW"
                Case "Downey"
                    WarehouseID = "DCW"
                Case "Hayward"
                    WarehouseID = "HCW"
                Case "Lewisville"
                    WarehouseID = "LCW"
                Case "Phoenix"
                    WarehouseID = "PCW"
                Case "Seattle"
                    WarehouseID = "SCW"
                Case "Lyndhurst"
                    WarehouseID = "YCW"
                Case "Renton"
                    WarehouseID = "RCW"
                Case "Lake Stevens"
                    WarehouseID = "LSCW"
                Case "SRL"
                    WarehouseID = "SRL"
                Case Else
                    WarehouseID = ""
            End Select

            lblQOHLabel.Text = WarehouseID + " QOH"
        ElseIf cboDivisionID.Text = "TWE" And cboFOB.Text = "Standard" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        ElseIf cboDivisionID.Text = "TWE" And cboFOB.Text = "" Then
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        ElseIf cboDivisionID.Text = "TWE" And (cboFOB.Text = "Downey" Or cboFOB.Text = "Hayward" Or cboFOB.Text = "Bessemer" Or cboFOB.Text = "Seattle" Or cboFOB.Text = "Lewisville" Or cboFOB.Text = "Lyndhurst" Or cboFOB.Text = "Phoenix" Or cboFOB.Text = "Renton" Or cboFOB.Text = "Lake Stevens" Or cboFOB.Text = "SRL") Then
            cmdExpediteOrder.Visible = False
            cmdBillOnly.Visible = True

            Dim Warehousename, WarehouseID As String
            Warehousename = cboFOB.Text

            Select Case Warehousename
                Case "Bessemer"
                    WarehouseID = "BCW"
                Case "Downey"
                    WarehouseID = "DCW"
                Case "Hayward"
                    WarehouseID = "HCW"
                Case "Lewisville"
                    WarehouseID = "LCW"
                Case "Phoenix"
                    WarehouseID = "PCW"
                Case "Seattle"
                    WarehouseID = "SCW"
                Case "Lyndhurst"
                    WarehouseID = "YCW"
                Case "Renton"
                    WarehouseID = "RCW"
                Case "Lake Stevens"
                    WarehouseID = "LSCW"
                Case "SRL"
                    WarehouseID = "SRL"
                Case Else
                    WarehouseID = ""
            End Select

            lblQOHLabel.Text = WarehouseID + " QOH"

        Else
            cboFOB.Text = "STANDARD"
            cmdExpediteOrder.Visible = True
            cmdBillOnly.Visible = False
            lblQOHLabel.Text = "Quantity On Hand"
        End If
    End Sub

    Private Sub cboShipVia_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboShipVia.SelectedIndexChanged
        If cboShipVia.Focused And isLoaded Then
            needsSaved = True
        End If

        LoadShipViaAdd()
        GetFreightAccountForUPSAndFEDEX()
    End Sub

    Private Sub cboCustomerClass_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboCustomerClass.SelectedIndexChanged
        If cboCustomerClass.Focused And isLoaded Then
            needsSaved = True
        End If
    End Sub

    'Text Box text changed events

    Private Sub txtHSTRate_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtHSTRate.TextChanged
        'Load product total to determine tax amounts
        Dim ProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim ProductTotalCommand As New SqlCommand(ProductTotalStatement, con)
        ProductTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        ProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            ProductTotal = CDbl(ProductTotalCommand.ExecuteScalar)
        Catch ex As System.Exception
            ProductTotal = 0
        End Try
        con.Close()

        HSTTaxRate = Val(txtHSTRate.Text)

        FreightCharge = Val(txtFreightCharges.Text)
        lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)

        GSTExtendedAmount = 0
        PSTExtendedAmount = 0
        HSTExtendedAmount = HSTTaxRate * (ProductTotal + FreightCharge)

        GSTExtendedAmount = Math.Round(GSTExtendedAmount, 2)
        PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
        HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)

        TotalSalesTax1 = GSTExtendedAmount
        TotalSalesTax2 = PSTExtendedAmount
        TotalSalesTax3 = HSTExtendedAmount
        TotalSalesTax = TotalSalesTax1
        TotalTax = GSTExtendedAmount

        OrderTotal = FreightCharge + ProductTotal + GSTExtendedAmount + PSTExtendedAmount + HSTExtendedAmount
        lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
        lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
        lblPST.Text = FormatCurrency(PSTExtendedAmount, 2)
        lblTaxTotal.Text = FormatCurrency(GSTExtendedAmount, 2)
        lblHST.Text = FormatCurrency(HSTExtendedAmount, 2)
    End Sub

    Private Sub txtTaxRate_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtTaxRate.TextChanged
        SalesTaxRate1 = Val(txtTaxRate.Text)
    End Sub

    Private Sub txtQuantityOrdered_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtQuantityOrdered.TextChanged
        OrderPrice = Val(txtPricePerUnit.Text)
        OrderQuantity = Val(txtQuantityOrdered.Text)
        SaleAmount = OrderPrice * OrderQuantity
        txtExtendedAmount.Text = FormatCurrency(SaleAmount, 2)
    End Sub

    Private Sub txtPricePerUnit_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPricePerUnit.TextChanged
        OrderPrice = Val(txtPricePerUnit.Text)
        OrderQuantity = Val(txtQuantityOrdered.Text)
        SaleAmount = OrderPrice * OrderQuantity
        txtExtendedAmount.Text = FormatCurrency(SaleAmount, 2)
    End Sub

    Private Sub txtFreightCharges_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtFreightCharges.TextChanged
        FreightCharge = Val(txtFreightCharges.Text)
        lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)

        If cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "ALB" Then
            'Update Tax with change in freight anount
            CalculateCanadianTotals()
        Else
            RecalculateLineTaxTotals()
            CalculateTotals()
        End If
    End Sub

    Private Sub txtCustomerCountry_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtBTCountry.TextChanged
        BillToCountry = txtBTCountry.Text
        LoadBTCountryByCountryCode()
    End Sub

    Private Sub txtSTCountry_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtSTCountry.TextChanged
        LoadSTCountryByCountryCode()
    End Sub

    Private Sub txtInsertQuantity_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInsertQuantity.TextChanged
        InsertPrice = Val(txtInsertPrice.Text)
        InsertOrderQuantity = Val(txtInsertQuantity.Text)
        InsertExtendedAmount = InsertPrice * InsertOrderQuantity
        txtInsertExtendedAmount.Text = FormatCurrency(InsertExtendedAmount, 2)
    End Sub

    Private Sub txtInsertPrice_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtInsertPrice.TextChanged
        InsertPrice = Val(txtInsertPrice.Text)
        InsertOrderQuantity = Val(txtInsertQuantity.Text)
        InsertExtendedAmount = InsertPrice * InsertOrderQuantity
        txtInsertExtendedAmount.Text = FormatCurrency(InsertExtendedAmount, 2)
    End Sub

    Private Sub txtEditQuantity_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtEditQuantity.TextChanged
        Dim EditLinePrice, EditLineQuantity, EditLineExtendedAmount As Double

        EditLinePrice = Val(txtEditPrice.Text)
        EditLineQuantity = Val(txtEditQuantity.Text)
        EditLineExtendedAmount = EditLinePrice * EditLineQuantity
        txtEditExtendedAmount.Text = FormatCurrency(EditLineExtendedAmount, 2)
    End Sub

    Private Sub txtEditPrice_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtEditPrice.TextChanged
        Dim EditLinePrice, EditLineQuantity, EditLineExtendedAmount As Double

        EditLinePrice = Val(txtEditPrice.Text)
        EditLineQuantity = Val(txtEditQuantity.Text)
        EditLineExtendedAmount = EditLinePrice * EditLineQuantity
        txtEditExtendedAmount.Text = FormatCurrency(EditLineExtendedAmount, 2)
    End Sub

    Private Sub txtCustomerPO_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtCustomerPO.TextChanged
        If txtCustomerPO.Focused And isLoaded Then
            needsSaved = True
        End If
    End Sub

    'DateTimePicker Value Changed Events

    Private Sub dtpSalesOrderDate_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpSalesOrderDate.ValueChanged
        If dtpSalesOrderDate.Focused And isLoaded Then
            needsSaved = True
        End If
    End Sub

    Private Sub dtpShippingDate_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpShippingDate.ValueChanged
        If isLoaded And dtpShippingDate.Focused Then
            needsSaved = True
        End If
    End Sub

    'Check box changed events

    Private Sub chkAddPST_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkAddPST.CheckedChanged
        If chkAddPST.Checked = True Then
            'Load product total to determine tax amounts
            Dim ProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim ProductTotalCommand As New SqlCommand(ProductTotalStatement, con)
            ProductTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            ProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                ProductTotal = CDbl(ProductTotalCommand.ExecuteScalar)
            Catch ex As System.Exception
                ProductTotal = 0
            End Try
            con.Close()

            chkAddHST.Checked = False
            txtHSTRate.Visible = False

           LoadCanadianTaxRatesWithoutCheckingBoxes

            FreightCharge = Val(txtFreightCharges.Text)
            lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)

            GSTExtendedAmount = GSTTaxRate * (ProductTotal + FreightCharge)
            PSTExtendedAmount = PSTTaxRate * (ProductTotal + FreightCharge)
            HSTExtendedAmount = 0

            GSTExtendedAmount = Math.Round(GSTExtendedAmount, 2)
            PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)

            TotalSalesTax1 = GSTExtendedAmount
            TotalSalesTax2 = PSTExtendedAmount
            TotalSalesTax3 = HSTExtendedAmount
            TotalSalesTax = TotalSalesTax1

            lblPST.Text = FormatCurrency(PSTExtendedAmount, 2)
            lblTaxTotal.Text = FormatCurrency(GSTExtendedAmount, 2)
            lblHST.Text = FormatCurrency(0, 2)

            OrderTotal = FreightCharge + ProductTotal + GSTExtendedAmount + PSTExtendedAmount + HSTExtendedAmount
            lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
            lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
        Else
            'Load product total to determine tax amounts
            Dim ProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim ProductTotalCommand As New SqlCommand(ProductTotalStatement, con)
            ProductTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            ProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                ProductTotal = CDbl(ProductTotalCommand.ExecuteScalar)
            Catch ex As System.Exception
                ProductTotal = 0
            End Try
            con.Close()

            LoadCanadianTaxRatesWithoutCheckingBoxes()

            FreightCharge = Val(txtFreightCharges.Text)
            lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)

            GSTExtendedAmount = GSTTaxRate * (ProductTotal + FreightCharge)
            PSTExtendedAmount = 0
            HSTExtendedAmount = 0

            GSTExtendedAmount = Math.Round(GSTExtendedAmount, 2)
            PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)

            TotalSalesTax1 = GSTExtendedAmount
            TotalSalesTax2 = PSTExtendedAmount
            TotalSalesTax3 = HSTExtendedAmount
            TotalSalesTax = TotalSalesTax1

            lblPST.Text = FormatCurrency(PSTExtendedAmount, 2)
            lblTaxTotal.Text = FormatCurrency(GSTExtendedAmount, 2)
            lblHST.Text = FormatCurrency(0, 2)

            OrderTotal = FreightCharge + ProductTotal + GSTExtendedAmount + PSTExtendedAmount + HSTExtendedAmount
            lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
            lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
        End If
    End Sub

    Private Sub chkAddHST_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkAddHST.CheckedChanged
        If chkAddHST.Checked = True Then
            'Load product total to determine tax amounts
            Dim ProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim ProductTotalCommand As New SqlCommand(ProductTotalStatement, con)
            ProductTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            ProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                ProductTotal = CDbl(ProductTotalCommand.ExecuteScalar)
            Catch ex As System.Exception
                ProductTotal = 0
            End Try
            con.Close()

            Dim HSTRateString As String = "SELECT SalesTaxRate3 FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
            Dim HSTRateCommand As New SqlCommand(HSTRateString, con)
            HSTRateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
            HSTRateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                HSTTaxRate = CDbl(HSTRateCommand.ExecuteScalar)
            Catch ex As System.Exception
                HSTTaxRate = 0
            End Try
            con.Close()

            FreightCharge = Val(txtFreightCharges.Text)
            lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)

            chkAddPST.Checked = False

            GSTExtendedAmount = 0
            PSTExtendedAmount = 0
            HSTExtendedAmount = HSTTaxRate * (ProductTotal + FreightCharge)

            GSTExtendedAmount = Math.Round(GSTExtendedAmount, 2)
            PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
            HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)

            TotalSalesTax1 = GSTExtendedAmount
            TotalSalesTax2 = PSTExtendedAmount
            TotalSalesTax3 = HSTExtendedAmount
            TotalSalesTax = TotalSalesTax1

            txtHSTRate.Visible = True
            txtHSTRate.Text = HSTTaxRate

            OrderTotal = FreightCharge + ProductTotal + GSTExtendedAmount + PSTExtendedAmount + HSTExtendedAmount
            lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
            lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
            lblPST.Text = FormatCurrency(PSTExtendedAmount, 2)
            lblTaxTotal.Text = FormatCurrency(GSTExtendedAmount, 2)
            lblHST.Text = FormatCurrency(HSTExtendedAmount, 2)
        Else
            'Load product total to determine tax amounts
            Dim ProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim ProductTotalCommand As New SqlCommand(ProductTotalStatement, con)
            ProductTotalCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            ProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                ProductTotal = CDbl(ProductTotalCommand.ExecuteScalar)
            Catch ex As System.Exception
                ProductTotal = 0
            End Try
            con.Close()

            PSTTaxRate = 0.07
            GSTTaxRate = 0.05
            HSTTaxRate = 0

            FreightCharge = Val(txtFreightCharges.Text)
            lblFreightTotal.Text = FormatCurrency(FreightCharge, 2)

            GSTExtendedAmount = GSTTaxRate * (ProductTotal + FreightCharge)
            PSTExtendedAmount = 0
            HSTExtendedAmount = 0

            GSTExtendedAmount = Math.Round(GSTExtendedAmount, 2)
            PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)

            TotalSalesTax1 = GSTExtendedAmount
            TotalSalesTax2 = PSTExtendedAmount
            TotalSalesTax3 = HSTExtendedAmount
            TotalSalesTax = TotalSalesTax1

            txtHSTRate.Visible = False
            txtHSTRate.Text = HSTTaxRate

            OrderTotal = FreightCharge + ProductTotal + GSTExtendedAmount + PSTExtendedAmount + HSTExtendedAmount
            lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)
            lblProductTotal.Text = FormatCurrency(ProductTotal, 2)
            lblPST.Text = FormatCurrency(PSTExtendedAmount, 2)
            lblTaxTotal.Text = FormatCurrency(GSTExtendedAmount, 2)
            lblHST.Text = FormatCurrency(HSTExtendedAmount, 2)
        End If
    End Sub

    Private Sub chkTaxable_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkTaxable.CheckedChanged
        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
            'Do nothing - both fields invisible
        Else
            If chkTaxable.Checked = True Then
                txtTaxRate.Visible = True
            Else
                txtTaxRate.Visible = False
            End If

            If chkTaxable.Checked = True And SaleAmount <> 0 Then
                SalesTaxRate1 = Val(txtTaxRate.Text)
                SalesTax = SaleAmount * SalesTaxRate1
            Else
                SalesTax = 0
            End If
        End If
    End Sub

    Private Sub chkDropShip_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDropShip.CheckedChanged
        If chkDropShip.Checked = True And (SOStatus = "OPEN" Or txtSOStatus.Text = "OPEN") Then
            If isSomeoneEditing() Then
                ShowData()
                LoadSalesOrderStatus()
                LoadShipmentCustomer()
                LoadSalesOrderData()
                Exit Sub
            End If

            LockBatch()
            txtSOStatus.Text = "DROPSHIP"
            SOStatus = "DROPSHIP"
            cmdExpediteOrder.Enabled = False

            'Get Drop Ship SO Number
            Dim DSSONumberStatement As String = "SELECT PurchaseOrderHeaderKey, VendorID FROM PurchaseOrderHeaderTable WHERE DropShipSalesOrderNumber = @DropShipSalesOrderNumber AND DivisionID = @DivisionID"
            Dim DSSONumberCommand As New SqlCommand(DSSONumberStatement, con)
            DSSONumberCommand.Parameters.Add("@DropShipSalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            DSSONumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Dim reader As SqlDataReader = DSSONumberCommand.ExecuteReader()
            If reader.HasRows Then
                reader.Read()
                If IsDBNull(reader.Item("PurchaseOrderHeaderKey")) Then
                    DSPONumber = 0
                Else
                    DSPONumber = reader.Item("PurchaseOrderHeaderKey")
                End If
                If IsDBNull(reader.Item("VendorID")) Then
                    DSVendor = ""
                Else
                    DSVendor = reader.Item("VendorID")
                End If
            Else
                DSPONumber = 0
                DSVendor = ""
            End If
            reader.Close()
            con.Close()

            txtDSPONumber.Text = DSPONumber
            txtDSVendorID.Text = DSVendor

            'Check to see how many PO's have the same sales order number
            Dim CountDropShipPOs As Integer = 0

            Dim CountDropShipPOsString As String = "SELECT COUNT(PurchaseOrderHeaderKey) FROM PurchaseOrderHeaderTable WHERE DropShipSalesOrderNumber = @DropShipSalesOrderNumber AND DivisionID = @DivisionID"
            Dim CountDropShipPOsCommand As New SqlCommand(CountDropShipPOsString, con)
            CountDropShipPOsCommand.Parameters.Add("@DropShipSalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CountDropShipPOsCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CountDropShipPOs = CInt(CountDropShipPOsCommand.ExecuteScalar)
            Catch ex As System.Exception
                CountDropShipPOs = 0
            End Try
            con.Close()

            If CountDropShipPOs <= 1 Then
                lblCountPOs.Text = ""
            Else
                lblCountPOs.Text = "This sales order has more than one PO linked to it."
            End If

            'Refresh datagrid and update so lines
            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            ShowData()

            Dim ReopenLineNumber As Integer = 0
            Dim ReopenQuantity As Double = 0

            For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                'Check for open quantities
                Try
                    ReopenLineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                Catch ex As System.Exception
                    ReopenLineNumber = 0
                End Try
                Try
                    ReopenQuantity = row.Cells("OpenSOQuantityColumn").Value
                Catch ex As System.Exception
                    ReopenQuantity = 0
                End Try

                If ReopenQuantity = 0 Then
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = ReopenLineNumber
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                Else
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = ReopenLineNumber
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "DROPSHIP"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                End If
            Next
        ElseIf chkDropShip.Checked = False Then
            txtSOStatus.Text = "OPEN"
            SOStatus = "OPEN"
            cmdExpediteOrder.Enabled = True
            lblCountPOs.Text = ""
            txtDSPONumber.Clear()
            txtDSVendorID.Clear()

            'Refresh datagrid and update so lines
            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            ShowData()

            Dim ReopenLineNumber As Integer = 0
            Dim ReopenQuantity As Double = 0

            For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                'Check for open quantities
                Try
                    ReopenLineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                Catch ex As System.Exception
                    ReopenLineNumber = 0
                End Try
                Try
                    ReopenQuantity = row.Cells("OpenSOQuantityColumn").Value
                Catch ex As System.Exception
                    ReopenQuantity = 0
                End Try

                If ReopenQuantity = 0 Then
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = ReopenLineNumber
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                Else
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = ReopenLineNumber
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                End If
            Next
        End If

        'Reload datagrid with the changes
        ShowData()

        If isLoaded And chkDropShip.Focused Then
            needsSaved = True
        End If
    End Sub

    'Command Buttons

    Private Sub cmdClear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdClear.Click
        cboPartNumber.Text = ""
        cboPartDescription.Text = ""
        cboCertCode.Text = ""
        cboCertType.Text = ""

        cboPartNumber.Refresh()
        cboPartDescription.Refresh()
        cboCertCode.Refresh()
        cboCertType.Refresh()

        txtQuantityOrdered.Refresh()
        txtPricePerUnit.Refresh()
        txtComment.Refresh()
        txtLeadTime.Refresh()
        txtCertDescription.Refresh()
        txtLongDescription.Refresh()

        cboPartNumber.SelectedIndex = -1
        cboPartDescription.SelectedIndex = -1
        cboCertCode.SelectedIndex = -1
        cboCertType.SelectedIndex = -1

        txtQuantityOrdered.Clear()
        txtPricePerUnit.Clear()
        txtComment.Clear()
        txtLeadTime.Clear()
        txtCertDescription.Clear()
        txtLongDescription.Clear()

        lblQOH.Text = ""
        lblLastSalePrice.Text = ""
        lblLastPurchaseCost.Text = ""
        lblStdUnitCost.Text = ""
        lblStdUnitPrice.Text = ""
        lblQtyOpen.Text = ""
        lblFullBoxCount.Text = ""
        lblQtyPending.Text = ""

        isLoaded = True
        cboPartNumber.Focus()
    End Sub

    Private Sub cmdCopyBTAddress_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdCopyBTAddress.Click
        txtSTAddress1.Text = BillToAddress1
        txtSTAddress2.Text = BillToAddress2
        txtSTCity.Text = BillToCity
        txtSTZip.Text = BillToZip
        txtSTState.Text = BillToState
        txtSTCountry.Text = BillToCountry
        ''makes sure things get saved
        needsSaved = True
    End Sub

    Private Sub cmdCustomerData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        GlobalCustomerID = cboCustomerID.Text
        GlobalCustomerName = cboCustomerName.Text

        Using NewCustomerData As New CustomerData
            Dim result = NewCustomerData.ShowDialog()
        End Using
    End Sub

    Private Sub cmdAddItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdAddItem.Click
        If canAddItem() Then
            LockBatch()
            '********************************************************************************
            'Deny ability to put on negative quantities
            If Val(txtQuantityOrdered.Text) < 0 Then
                MsgBox("You cannot add a negative quantity on a Sales Order.", MsgBoxStyle.OkOnly)
                Exit Sub
            Else
                'Continue
            End If
            '********************************************************************************
            'Get division of the sales order number
            ValidateDivision()

            newItem = True

            If CheckDivision <> cboDivisionID.Text Then
                MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

                'Error Log
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "SO Form - ADD LINES - Invalid Division (L6196)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()

                Exit Sub
            Else
                'Skip
            End If
            '********************************************************************************
            'Save all updates to Sales Order Header Table
            ValidateShippingMethod()

            If CheckShippingMethod = "EXIT SUB" Then
                MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
                CheckShippingMethod = ""
                Exit Sub
            End If
            '****************************************************************************************
            If txtSOStatus.Text = "SHIPPED" Then
                SOStatus = "SHIPPED"
            ElseIf txtSOStatus.Text = "OPEN" Then
                'Determine Shipping Status (if changed)
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    SOStatus = "OPEN"
                    txtSOStatus.Text = "OPEN"
                End If
            Else
                'SO Status is correct
            End If
            '***************************************************************************************
            'Load GL Inventory Account for specific Item
            LoadGLAccountNumber()
            '***************************************************************************************
            'If TWD, check lead times
            If cboDivisionID.Text = "TWD" And txtLeadTime.Text = "  /  /" And cboFOB.Text = "Medina" Then
                'Check Quantity Available
                LoadQuantityOnHand()

                'Check QOH and Quantity Committed for part and force lead time entry
                If Val(txtQuantityOrdered.Text) > QuantityAvailable Then
                    MsgBox("You must enter a lead time for this part.", MsgBoxStyle.OkOnly)
                    txtLeadTime.Focus()
                    Exit Sub
                End If
            ElseIf cboDivisionID.Text.Equals("TWD") And Not txtLeadTime.Equals("  /  /") Then
                Dim spl As String() = txtLeadTime.Text.Split(New String() {"/", " "}, StringSplitOptions.RemoveEmptyEntries)
                If spl.Count = 3 Then
                    If spl(2).Length = 2 Then
                        spl(2) = "20" + spl(2)
                    End If
                    Dim NotificationDate As New DateTime(Val(spl(2)), Val(spl(0)), Val(spl(1)), 8, 0, 0)
                    NotificationDate = NotificationDate.AddDays(-7)
                    cmd = New SqlCommand("SELECT (EmployeeFirst + ' ' + EmployeeLast) FROM EmployeeData WHERE LoginName = @LoginName;", con)
                    cmd.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName
                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim EmployeeName As String = Convert.ToString(cmd.ExecuteScalar())
                    con.Close()

                    Dim details As String = "Customer: " + cboCustomerName.Text + Environment.NewLine
                    details += "Lead Time: " + txtLeadTime.Text + Environment.NewLine
                    details += "Part Description: " + cboPartDescription.Text + Environment.NewLine
                    details += "Quantity: " + txtQuantityOrdered.Text + Environment.NewLine + "FOX: "
                    Dim notification As New NotificationAPI(New NotificationAPI.NotificationData(0, "TWD", EmployeeName, cboSalesOrderNumber.Text, "Sales Order Lead Time", "Only Once", NotificationDate, details, "Active", EmployeeLoginName, 0))
                    notification.AddNotification(cboPartNumber.Text, True)
                End If
            ElseIf cboDivisionID.Text.Equals("SLC") Then
                'Check QOH and Quantity Committed for part and force lead time entry
                LoadQuantityOnHand()

                If Val(txtQuantityOrdered.Text) > QuantityAvailable Then
                    Dim button As DialogResult = MessageBox.Show("Quantity on this order exceeds Quantity Available (Quantity Available = QOH minus Quantity Committed). Do you wish to proceed?", "DO YOU WISH TO PROCEED?", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                    If button = DialogResult.Yes Then
                        'Continue
                    ElseIf button = DialogResult.No Then
                        Exit Sub
                    End If
                Else
                    'Do nothing - sufficient quantity in stock
                End If
            Else
                'Do nothing
            End If
            '***************************************************************************************
            'Populate totals and text boxes
            OrderPrice = Val(txtPricePerUnit.Text)
            OrderQuantity = Val(txtQuantityOrdered.Text)
            SaleAmount = OrderPrice * OrderQuantity
            ProductTotal = ProductTotal + SaleAmount
            lblProductTotal.Text = FormatCurrency(ProductTotal, 2)

            'Get box weight and box count for line
            Dim BoxWeight As Double = 0
            Dim NewBoxCount As Integer = 0
            Dim NewBoxType As String = ""

            Dim BoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim BoxWeightCommand As New SqlCommand(BoxWeightStatement, con)
            BoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            BoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            Dim NewBoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim NewBoxCountCommand As New SqlCommand(NewBoxCountStatement, con)
            NewBoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            NewBoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            Dim NewBoxTypeStatement As String = "SELECT BoxType FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim NewBoxTypeCommand As New SqlCommand(NewBoxTypeStatement, con)
            NewBoxTypeCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            NewBoxTypeCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                BoxWeight = CDbl(BoxWeightCommand.ExecuteScalar)
            Catch ex As System.Exception
                BoxWeight = 0
            End Try
            Try
                NewBoxCount = CInt(NewBoxCountCommand.ExecuteScalar)
            Catch ex As System.Exception
                NewBoxCount = 0
            End Try
            Try
                NewBoxType = CStr(NewBoxTypeCommand.ExecuteScalar)
            Catch ex As System.Exception
                NewBoxType = ""
            End Try
            con.Close()

            If BoxWeight = 0 Or NewBoxCount = 0 Then
                TotalWeight = OrderQuantity * PieceWeight
                TotalWeightRunningTotal = TotalWeightRunningTotal + TotalWeight

                lblEstShippingWeight.Text = FormatNumber(TotalWeightRunningTotal, 1)
            Else
                TotalWeight = (OrderQuantity / NewBoxCount) * BoxWeight
                TotalWeightRunningTotal = TotalWeightRunningTotal + TotalWeight

                lblEstShippingWeight.Text = FormatNumber(TotalWeightRunningTotal, 1)
            End If
            '***************************************************************************************
            'Load Tax Rates into Sales Order Header Table based on User selections
            LoadSalesOrderTaxRates()

            If chkTaxable.Checked = True And (cboDivisionID.Text <> "TFF" Or cboDivisionID.Text <> "TOR" Or cboDivisionID.Text <> "ALB") Then
                SalesTaxRate1 = Val(txtTaxRate.Text)
                SalesTax = SaleAmount * SalesTaxRate1
                TotalTax = TotalTax + SalesTax
                lblTaxTotal.Text = FormatCurrency(TotalTax, 2)
            Else
                SalesTax = 0
            End If

            OrderTotal = ProductTotal + FreightCharge + TotalTax
            lblOrderTotal.Text = FormatCurrency(OrderTotal, 2)

            'Round Variables
            SaleAmount = Math.Round(SaleAmount, 2)
            '***************************************************************************************
            'Verify full boxes and apply broken box charge if necessary
            If OrderQuantity Mod BoxCount = 0 Then
                'Do nothing
            Else
                If ItemClass = "TW CA" Or ItemClass = "TW DB" Or ItemClass = "TW SC" Or ItemClass = "TW DS" Or ItemClass = "TW PS" Then
                    GlobalSONumber = Val(cboSalesOrderNumber.Text)
                    GlobalSalesOrderQuantity = Val(txtQuantityOrdered.Text)
                    Try
                        GlobalSalesOrderHigher = Math.Ceiling(OrderQuantity / BoxCount) * BoxCount
                        GlobalSalesOrderLower = Math.Floor(OrderQuantity / BoxCount) * BoxCount
                    Catch ex As System.Exception
                        'Box Count is NULL
                    End Try

                    'Apply Broken Box Charge for Truweld only
                    If cboDivisionID.Text = "TWD" Then
                        Using NewSOBrokenBoxForm As New SOBrokenBoxForm
                            Dim result = NewSOBrokenBoxForm.ShowDialog
                        End Using
                    Else
                        'Do nothing
                    End If

                    txtQuantityOrdered.Text = GlobalSalesOrderQuantity
                    OrderQuantity = GlobalSalesOrderQuantity
                Else
                    GlobalBrokenBoxCharge = "NO"
                End If
            End If
            '***************************************************************************************
            'Avoid "Divide by 0 error"
            If BoxCount = 0 Then
                LineBoxCount = 0
            Else
                LineBoxCount = OrderQuantity / BoxCount
            End If

            'Round Boxes to next highest number
            UpdatedLineBoxCount = Math.Round(LineBoxCount, 1)

            If cboDivisionID.Text = "TWE" Or cboDivisionID.Text = "SLC" Then
                If LineBoxCount < 1 And LineBoxCount > 0 Then
                    CheckTWELabelCount = 1
                Else
                    CheckTWELabelCount = Math.Ceiling(LineBoxCount)
                End If
            Else
                CheckTWELabelCount = 0
            End If
            '***************************************************************************************
            'Update header table
            SOStatus = txtSOStatus.Text

            SaveUpdateSalesOrderHeader()
            '***************************************************************************************
            'If Purchase Product Line is Non-Inventory, skip FIFO
            Dim PurchProdLineIDStatement As String = "SELECT PurchProdLineID FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim PurchProdLineIDCommand As New SqlCommand(PurchProdLineIDStatement, con)
            PurchProdLineIDCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
            PurchProdLineIDCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                PurchProdLineID = CStr(PurchProdLineIDCommand.ExecuteScalar)
            Catch ex As System.Exception
                PurchProdLineID = ""
            End Try
            con.Close()

            If PurchProdLineID = "" Or PurchProdLineID = "NON-INVENTORY" Or PurchProdLineID = "SUPPLIES-JANITORIAL" Or PurchProdLineID = "SUPPLIES-MISC" Or PurchProdLineID = "SUPPLIES-OFFICE" Or PurchProdLineID = "SUPPLIES-PACKAGING" Or PurchProdLineID = "EXPENSES" Or PurchProdLineID = "EQUIPMENT" Or ItemClass = "RENTAL" Or ItemClass = "MACHINING (NO COS)" Or ItemClass = "MISC ITEMS" Then
                'FIFO = 0 where item is non-inventory
                FIFOExtendedAmount = 0
            Else
                '***************************************************************************************
                'Get FIFO Cost 
                '******************************************************************************************************************************************
                '******************************************************************************************************************************************
                'Get FIFO Cost of Part

                'Define Variables used in FIFO
                Dim GetMaxTransactionNumber As Integer
                Dim GetUpperLimit As Double = 0
                Dim UpperLimit As Double = 0
                Dim QuantityRemaining As Double = 0
                Dim NextUpperLimit As Double = 0
                Dim NextLowerLimit As Double = 0
                '******************************************************************************************************************************************
                'Determine FIFO Cost on Part Number to remove from Inventory
                Dim TotalQuantityShipped As Double = 0
                Dim NoCostTierFound As String = "FALSE"
                FIFOCost = 0
                FIFOExtendedAmount = 0
                '******************************************************************************************************************************************
                'Determine Total Quantity Shipped
                Dim TotalQuantityShippedStatement As String = "SELECT SUM(QuantityShipped) FROM ShipmentLineQuery WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND ShipDate <= @ShipDate AND Dropship <> @Dropship AND LineStatus <> @LineStatus"
                Dim TotalQuantityShippedCommand As New SqlCommand(TotalQuantityShippedStatement, con)
                TotalQuantityShippedCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                TotalQuantityShippedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                TotalQuantityShippedCommand.Parameters.Add("@ShipDate", SqlDbType.VarChar).Value = dtpSalesOrderDate.Text
                TotalQuantityShippedCommand.Parameters.Add("@Dropship", SqlDbType.VarChar).Value = "YES"
                TotalQuantityShippedCommand.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    TotalQuantityShipped = CDbl(TotalQuantityShippedCommand.ExecuteScalar)
                Catch ex As System.Exception
                    TotalQuantityShipped = 0
                End Try
                con.Close()
                '******************************************************************************************************************************************
                'Add Total Quantity used in assemblies
                Dim GetBuildQuantity As Double = 0

                Dim TotalBuildQuantityStatement As String = "SELECT SUM(BuildQuantity) FROM AssemblyBuildQuery WHERE ComponentPartNumber = @ComponentPartNumber AND DivisionID = @DivisionID AND ComponentPartNumber <> AssemblyPartNumber"
                Dim TotalBuildQuantityCommand As New SqlCommand(TotalBuildQuantityStatement, con)
                TotalBuildQuantityCommand.Parameters.Add("@ComponentPartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                TotalBuildQuantityCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetBuildQuantity = CDbl(TotalBuildQuantityCommand.ExecuteScalar)
                Catch ex As Exception
                    GetBuildQuantity = 0
                End Try
                con.Close()

                GetBuildQuantity = GetBuildQuantity * -1

                TotalQuantityShipped = TotalQuantityShipped + GetBuildQuantity
                '******************************************************************************************************************************************
                'Check to see if Total Quantity Shipped falls within the Cost Tiers
                Dim GetUpperLimitStatement As String = "SELECT UpperLimit FROM InventoryCosting WHERE TransactionNumber = (SELECT isnull(MAX(TransactionNumber), 0) FROM InventoryCosting WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND CostingDate <= @CostingDate) AND DivisionID = @DivisionID"
                Dim GetUpperLimitCommand As New SqlCommand(GetUpperLimitStatement, con)
                GetUpperLimitCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                GetUpperLimitCommand.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = dtpSalesOrderDate.Text
                GetUpperLimitCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetUpperLimit = CDbl(GetUpperLimitCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetUpperLimit = 0
                End Try
                con.Close()

                If TotalQuantityShipped - OrderQuantity = 0 Then
                    TotalQuantityShipped = 1
                Else
                    TotalQuantityShipped = TotalQuantityShipped - OrderQuantity
                End If

                If TotalQuantityShipped > GetUpperLimit Then
                    'Item is beyond the Cost Tier - skip FIFO
                    FIFOCost = 0
                    FIFOExtendedAmount = 0
                Else
                    '******************************************************************************************************************************************
                    'Determine Item Cost where Quantity Shipped falls in the Inventory Costing Table
                    'Get Max Transaction Number where 
                    Dim GetMaxTransactionNumber1Statement As String = "SELECT MAX(TransactionNumber)as MaxTranNumber FROM InventoryCosting WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND CostingDate <= @CostingDate AND @TotalQuantityShipped BETWEEN LowerLimit AND UpperLimit"
                    Dim GetMaxTransactionNumber1Command As New SqlCommand(GetMaxTransactionNumber1Statement, con)
                    GetMaxTransactionNumber1Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                    GetMaxTransactionNumber1Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    GetMaxTransactionNumber1Command.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = TotalQuantityShipped
                    GetMaxTransactionNumber1Command.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = dtpSalesOrderDate.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim reader As SqlDataReader = GetMaxTransactionNumber1Command.ExecuteReader()
                    If reader.HasRows Then
                        reader.Read()
                        If IsDBNull(reader.Item("MaxTranNumber")) Then
                            GetMaxTransactionNumber = 0
                        Else
                            GetMaxTransactionNumber = reader.Item("MaxTranNumber")
                        End If
                    Else
                        GetMaxTransactionNumber = 0
                    End If
                    reader.Close()
                    con.Close()

                    'If value is NULL, skip to Last Purchase Cost
                    If GetMaxTransactionNumber = 0 Then
                        NoCostTierFound = "TRUE"
                    Else
                        Dim ItemCost2Statement As String = "SELECT ItemCost, UpperLimit FROM InventoryCosting WHERE DivisionID = @DivisionID AND TransactionNumber = @TransactionNumber"
                        Dim ItemCost2Command As New SqlCommand(ItemCost2Statement, con)
                        ItemCost2Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                        ItemCost2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        ItemCost2Command.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = TotalQuantityShipped
                        ItemCost2Command.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = dtpShippingDate.Text
                        ItemCost2Command.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = GetMaxTransactionNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        reader = ItemCost2Command.ExecuteReader()
                        If reader.HasRows Then
                            reader.Read()
                            If IsDBNull(reader.Item("ItemCost")) Then
                                FIFOCost = 0
                            Else
                                FIFOCost = reader.Item("ItemCost")
                            End If
                            If IsDBNull(reader.Item("UpperLimit")) Then
                                UpperLimit = 0
                            Else
                                UpperLimit = reader.Item("UpperLimit")
                            End If
                        Else
                            FIFOCost = 0
                            UpperLimit = 0
                        End If
                        reader.Close()
                        con.Close()
                    End If

                    If NoCostTierFound = "TRUE" Then
                        FIFOCost = 0
                        FIFOExtendedAmount = 0
                    Else
                        If TotalQuantityShipped + OrderQuantity > UpperLimit Then
                            'Quantity crosses a cost tier
                            QuantityRemaining = (TotalQuantityShipped + OrderQuantity) - UpperLimit

                            FIFOExtendedAmount = (UpperLimit - TotalQuantityShipped) * FIFOCost

                            'Create loop to calculate remainder of quantity
                            Do While QuantityRemaining > 0
                                Dim TempQuantity As Double = 0

                                'Get Max Transaction Number where 
                                Dim GetMaxTransactionNumber2Statement As String = "SELECT MAX(TransactionNumber) FROM InventoryCosting WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND CostingDate <= @CostingDate AND @TotalQuantityShipped BETWEEN LowerLimit AND UpperLimit"
                                Dim GetMaxTransactionNumber2Command As New SqlCommand(GetMaxTransactionNumber2Statement, con)
                                GetMaxTransactionNumber2Command.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                                GetMaxTransactionNumber2Command.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                GetMaxTransactionNumber2Command.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = UpperLimit + 1
                                GetMaxTransactionNumber2Command.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = dtpSalesOrderDate.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    GetMaxTransactionNumber = CInt(GetMaxTransactionNumber2Command.ExecuteScalar)
                                Catch ex As System.Exception
                                    GetMaxTransactionNumber = 0
                                End Try
                                con.Close()

                                If GetMaxTransactionNumber = 0 Then
                                    'Determine Item Cost where Quantity Shipped falls in the Inventory Costing Table
                                    Dim NextItemCostStatement As String = "SELECT ItemCost, UpperLimit, LowerLimit FROM InventoryCosting WHERE CostingDate <= @CostingDate AND PartNumber = @PartNumber AND DivisionID = @DivisionID AND @TotalQuantityShipped BETWEEN LowerLimit AND UpperLimit"
                                    Dim NextItemCostCommand As New SqlCommand(NextItemCostStatement, con)
                                    NextItemCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                                    NextItemCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    NextItemCostCommand.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = UpperLimit + 1
                                    NextItemCostCommand.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = dtpSalesOrderDate.Text

                                    If con.State = ConnectionState.Closed Then con.Open()
                                    reader = NextItemCostCommand.ExecuteReader()
                                    If reader.HasRows Then
                                        reader.Read()
                                        If IsDBNull(reader.Item("ItemCost")) Then
                                            FIFOCost = 0
                                        Else
                                            FIFOCost = reader.Item("ItemCost")
                                        End If
                                        If IsDBNull(reader.Item("UpperLimit")) Then
                                            NextUpperLimit = 0
                                        Else
                                            NextUpperLimit = reader.Item("UpperLimit")
                                        End If
                                        If IsDBNull(reader.Item("LowerLimit")) Then
                                            NextLowerLimit = 0
                                        Else
                                            NextLowerLimit = reader.Item("LowerLimit")
                                        End If
                                    Else
                                        FIFOCost = 0
                                        NextUpperLimit = 0
                                        NextLowerLimit = 0
                                    End If
                                    reader.Close()
                                    con.Close()
                                Else
                                    'Determine Item Cost where Quantity Shipped falls in the Inventory Costing Table
                                    Dim NextItemCostStatement As String = "SELECT ItemCost, UpperLimit, LowerLimit FROM InventoryCosting WHERE CostingDate <= @CostingDate AND PartNumber = @PartNumber AND DivisionID = @DivisionID AND TransactionNumber = @TransactionNumber AND @TotalQuantityShipped BETWEEN LowerLimit AND UpperLimit"
                                    Dim NextItemCostCommand As New SqlCommand(NextItemCostStatement, con)
                                    NextItemCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                                    NextItemCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    NextItemCostCommand.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = UpperLimit + 1
                                    NextItemCostCommand.Parameters.Add("@CostingDate", SqlDbType.VarChar).Value = dtpSalesOrderDate.Text
                                    NextItemCostCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = GetMaxTransactionNumber

                                    If con.State = ConnectionState.Closed Then con.Open()
                                    reader = NextItemCostCommand.ExecuteReader()
                                    If reader.HasRows Then
                                        reader.Read()
                                        If IsDBNull(reader.Item("ItemCost")) Then
                                            FIFOCost = 0
                                        Else
                                            FIFOCost = reader.Item("ItemCost")
                                        End If
                                        If IsDBNull(reader.Item("UpperLimit")) Then
                                            NextUpperLimit = 0
                                        Else
                                            NextUpperLimit = reader.Item("UpperLimit")
                                        End If
                                        If IsDBNull(reader.Item("LowerLimit")) Then
                                            NextLowerLimit = 0
                                        Else
                                            NextLowerLimit = reader.Item("LowerLimit")
                                        End If
                                    Else
                                        FIFOCost = 0
                                        NextUpperLimit = 0
                                        NextLowerLimit = 0
                                    End If
                                    reader.Close()
                                    con.Close()
                                End If

                                TempQuantity = (NextUpperLimit + 1) - NextLowerLimit

                                If QuantityRemaining > TempQuantity Then
                                    'Add to existing FIFO Extended Amount
                                    FIFOExtendedAmount = FIFOExtendedAmount + (TempQuantity * FIFOCost)

                                    'Redefine Quantity Remaining after the next cost tier
                                    QuantityRemaining = QuantityRemaining - TempQuantity
                                    UpperLimit = NextUpperLimit
                                Else
                                    FIFOExtendedAmount = FIFOExtendedAmount + (QuantityRemaining * FIFOCost)
                                    QuantityRemaining = 0
                                End If
                            Loop
                        Else
                            'Entire quantity falls into one cost tier
                            FIFOExtendedAmount = FIFOCost * OrderQuantity
                        End If
                    End If
                End If

                'Run routine if no FIFO Cost is retrieved - Use LPC, TC, STD Cost
                '*****************************************************************************************************************************************
                If FIFOCost = 0 Then
                    Dim TransactionCost As Double = 0

                    Dim TransactionCostStatement As String = "SELECT ItemCost FROM InventoryTransactionTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND TransactionNumber = (SELECT isnull(MAX(TransactionNumber), 0) FROM InventoryTransactionTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber)"
                    Dim TransactionCostCommand As New SqlCommand(TransactionCostStatement, con)
                    TransactionCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    TransactionCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        TransactionCost = CDbl(TransactionCostCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        TransactionCost = 0
                    End Try
                    con.Close()

                    FIFOCost = TransactionCost
                    FIFOExtendedAmount = FIFOCost * OrderQuantity
                End If
                '*****************************************************************************************************************************************
                If FIFOCost = 0 Then
                    LastPurchaseCost = 0

                    Dim LastPriceStatement As String = "SELECT UnitCost FROM PurchaseOrderLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND PurchaseOrderHeaderKey = (SELECT isnull(MAX(PurchaseOrderHeaderKey), 0) FROM PurchaseOrderLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber)"
                    Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                    LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text
                    'LastPriceCommand.Parameters.Add("@PurchaseOrderHeaderKey", SqlDbType.VarChar).Value = MAXDate

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        LastPurchaseCost = CDbl(LastPriceCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LastPurchaseCost = 0
                    End Try
                    con.Close()

                    FIFOCost = LastPurchaseCost
                    FIFOExtendedAmount = FIFOCost * OrderQuantity
                End If
                '*****************************************************************************************************************************************
                'If FIFO Cost = 0, pull Standard Cost from Item List
                If FIFOCost = 0 Then
                    StandardCost = 0

                    Dim StandardCostStatement As String = "SELECT StandardCost FROM ItemList WHERE DivisionID = @DivisionID AND ItemID = @ItemID"
                    Dim StandardCostCommand As New SqlCommand(StandardCostStatement, con)
                    StandardCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    StandardCostCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        StandardCost = CDbl(StandardCostCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        StandardCost = 0
                    End Try
                    con.Close()

                    FIFOCost = StandardCost
                    FIFOExtendedAmount = FIFOCost * OrderQuantity
                End If
            End If
            '***************************************************************************************
            'Recalculate Sales Tax for lines
            If chkTaxable.Checked = True And (cboDivisionID.Text <> "TFF" Or cboDivisionID.Text <> "TOR" Or cboDivisionID.Text <> "ALB") Then
                SalesTax = SaleAmount * Val(txtTaxRate.Text)
            Else
                SalesTax = 0
            End If
            '***************************************************************************************
            'If cert code is blank, get default
            Dim GetCertCode As String = "0"

            If cboCertCode.Text = "" Then
                Dim GetCertCodeStatement As String = "SELECT CertificationType FROM FOXTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                Dim GetCertCodeCommand As New SqlCommand(GetCertCodeStatement, con)
                GetCertCodeCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = "TWD"
                GetCertCodeCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboPartNumber.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetCertCode = CStr(GetCertCodeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetCertCode = "0"
                End Try
                con.Close()

                If GetCertCode = "" Then
                    'If Cert Code is blank, use default
                    Dim NewGetCertCode As String = ""

                    Select Case ItemClass
                        Case "TW DS"
                            NewGetCertCode = "1"
                        Case "TW CA"
                            NewGetCertCode = "1"
                        Case "TW SC"
                            NewGetCertCode = "1"
                        Case "TW DB"
                            NewGetCertCode = "2"
                        Case "TW TT"
                            NewGetCertCode = "6"
                        Case "TW TP"
                            NewGetCertCode = "6"
                        Case "TW CS"
                            NewGetCertCode = "6"
                        Case "TW NT"
                            NewGetCertCode = "6"
                        Case "TW PS"
                            NewGetCertCode = "1"
                        Case "TW SWR"
                            NewGetCertCode = "17"
                        Case "TW GS"
                            NewGetCertCode = "7"
                        Case "TW HX"
                            NewGetCertCode = "19"
                        Case "TW HSR"
                            NewGetCertCode = "21"
                        Case Else
                            NewGetCertCode = "0"
                    End Select

                    cboCertCode.Text = NewGetCertCode
                Else
                    cboCertCode.Text = GetCertCode
                End If
            End If
            '***************************************************************************************
            'Round Variables

            SalesTax = Math.Round(SalesTax, 2)
            SaleAmount = Math.Round(SaleAmount, 2)
            FIFOExtendedAmount = Math.Round(FIFOExtendedAmount, 2)
            '***************************************************************************************
            'Write Data to Sales Order Line Database Table (Line Items)
            cmd = New SqlCommand("Insert Into SalesOrderLineTable(SalesOrderKey, SalesOrderLineKey, ItemID, Description, Quantity, Price, LineComment, SalesTax, SalesTax2, SalesTax3, DivisionID, ExtendedAmount, LineWeight, LineBoxes, LineStatus, DebitGLAccount, CreditGLAccount, LeadTime, CertificationType, EstExtendedCOS, ShippedPrevious, LabelCount, SpecialLineComment)Values(@SalesOrderKey, (SELECT isnull(MAX(SalesOrderLineKey) + 1, 1) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey), @ItemID, @Description, @Quantity, @Price, @LineComment, @SalesTax, @SalesTax2, @SalesTax3, @DivisionID, @ExtendedAmount, @LineWeight, @LineBoxes, @LineStatus, @DebitGLAccount, @CreditGLAccount, @LeadTime, @CertificationType, @EstExtendedCOS, @ShippedPrevious, @LabelCount, @SpecialLineComment)", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = NextLineNumber
                .Add("@ItemID", SqlDbType.VarChar).Value = cboPartNumber.Text
                .Add("@Description", SqlDbType.VarChar).Value = cboPartDescription.Text
                .Add("@Quantity", SqlDbType.VarChar).Value = Val(txtQuantityOrdered.Text)
                .Add("@Price", SqlDbType.VarChar).Value = OrderPrice
                .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                .Add("@SalesTax2", SqlDbType.VarChar).Value = 0
                .Add("@SalesTax3", SqlDbType.VarChar).Value = 0
                .Add("@ExtendedAmount", SqlDbType.VarChar).Value = SaleAmount
                .Add("@LineComment", SqlDbType.VarChar).Value = txtLineComment.Text
                .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@LineWeight", SqlDbType.VarChar).Value = TotalWeight
                .Add("@LineBoxes", SqlDbType.VarChar).Value = UpdatedLineBoxCount
                .Add("@DebitGLAccount", SqlDbType.VarChar).Value = "49999"
                .Add("@CreditGLAccount", SqlDbType.VarChar).Value = GLCreditAccount
                .Add("@LeadTime", SqlDbType.VarChar).Value = txtLeadTime.Text
                .Add("@CertificationType", SqlDbType.VarChar).Value = cboCertCode.Text
                .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = FIFOExtendedAmount
                .Add("@ShippedPrevious", SqlDbType.VarChar).Value = 0
                .Add("@LabelCount", SqlDbType.VarChar).Value = CheckTWELabelCount
                .Add("@SpecialLineComment", SqlDbType.VarChar).Value = ""
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '***************************************************************************************
            If GlobalBrokenBoxCharge = "YES" Then
                'Verify if there is already a broken box charge added
                Dim CheckBrokenBoxChargeStatement As String = "SELECT ItemID FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND ItemID = @ItemID"
                Dim CheckBrokenBoxChargeCommand As New SqlCommand(CheckBrokenBoxChargeStatement, con)
                CheckBrokenBoxChargeCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                CheckBrokenBoxChargeCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = "BROKEN BOX CHG"

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CheckBrokenBoxCharge = CStr(CheckBrokenBoxChargeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CheckBrokenBoxCharge = "NEW PART"
                End Try
                con.Close()

                If CheckBrokenBoxCharge = "NEW PART" Or CheckBrokenBoxCharge = "" Then
                    'Write Data to Sales Order Line Database Table (Line Items)
                    cmd = New SqlCommand("Insert Into SalesOrderLineTable(SalesOrderKey, SalesOrderLineKey, ItemID, Description, Quantity, Price, LineComment, SalesTax, SalesTax2, SalesTax3, DivisionID, ExtendedAmount, LineWeight, LineBoxes, LineStatus, DebitGLAccount, CreditGLAccount, LeadTime, CertificationType, EstExtendedCOS, ShippedPrevious, LabelCount, SpecialLineComment)Values(@SalesOrderKey, (SELECT isnull(MAX(SalesOrderLineKey) + 1, 1) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey), @ItemID, @Description, @Quantity, @Price, @LineComment, @SalesTax, @SalesTax2, @SalesTax3, @DivisionID, @ExtendedAmount, @LineWeight, @LineBoxes, @LineStatus, @DebitGLAccount, @CreditGLAccount, @LeadTime, @CertificationType, @EstExtendedCOS, @ShippedPrevious, @LabelCount, @SpecialLineComment)", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@ItemID", SqlDbType.VarChar).Value = "BROKEN BOX CHG"
                        .Add("@Description", SqlDbType.VarChar).Value = "BROKEN BOX CHARGE"
                        .Add("@Quantity", SqlDbType.VarChar).Value = 1
                        .Add("@Price", SqlDbType.VarChar).Value = 25.0
                        .Add("@LineComment", SqlDbType.VarChar).Value = ""
                        .Add("@SalesTax", SqlDbType.VarChar).Value = 0
                        .Add("@SalesTax2", SqlDbType.VarChar).Value = 0
                        .Add("@SalesTax3", SqlDbType.VarChar).Value = 0
                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        .Add("@ExtendedAmount", SqlDbType.VarChar).Value = 25.0
                        .Add("@LineWeight", SqlDbType.VarChar).Value = 0
                        .Add("@LineBoxes", SqlDbType.VarChar).Value = 0
                        .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                        .Add("@DebitGLAccount", SqlDbType.VarChar).Value = "49999"
                        .Add("@CreditGLAccount", SqlDbType.VarChar).Value = "12175"
                        .Add("@LeadTime", SqlDbType.VarChar).Value = ""
                        .Add("@CertificationType", SqlDbType.VarChar).Value = "0"
                        .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = 0
                        .Add("@ShippedPrevious", SqlDbType.VarChar).Value = 0
                        .Add("@LabelCount", SqlDbType.VarChar).Value = 0
                        .Add("@SpecialLineComment", SqlDbType.VarChar).Value = ""
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                Else
                    'Extract order quantity from previous line item entered
                    Dim CheckPreviousBBCStatement As String = "SELECT ExtendedAmount, SalesOrderLineKey FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND ItemID = @ItemID"
                    Dim CheckPreviousBBCCommand As New SqlCommand(CheckPreviousBBCStatement, con)
                    CheckPreviousBBCCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    CheckPreviousBBCCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = "BROKEN BOX CHG"

                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim reader As SqlDataReader = CheckPreviousBBCCommand.ExecuteReader()
                    If reader.HasRows Then
                        reader.Read()
                        If IsDBNull(reader.Item("ExtendedAmount")) Then
                            CheckPreviousBBC = 0
                        Else
                            CheckPreviousBBC = reader.Item("ExtendedAmount")
                        End If
                        If IsDBNull(reader.Item("SalesOrderLineKey")) Then
                            GetLineNumber = 0
                        Else
                            GetLineNumber = reader.Item("SalesOrderLineKey")
                        End If
                    Else
                        CheckPreviousBBC = 0
                        GetLineNumber = 0
                    End If
                    reader.Close()
                    con.Close()

                    NewCheckBBCCharge = CheckPreviousBBC + 25.0

                    'Update existing line item with new quantity
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET Quantity = @Quantity, ExtendedAmount = @ExtendedAmount WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = GetLineNumber
                        .Add("@Quantity", SqlDbType.VarChar).Value = NewCheckBBCCharge / 25
                        .Add("@ExtendedAmount", SqlDbType.VarChar).Value = NewCheckBBCCharge
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                End If
            Else
                'Do nothing
            End If
            '***************************************************************************************
            'Since line changes were made, set variable to YES
            LineChangesMade = "YES"
            '***************************************************************************************
            'If accessories are associated with this item, bring up accessory form
            If AddAccessory = "YES" And chkAddFerrules.Checked = True Then
                GlobalDivisionCode = cboDivisionID.Text
                GlobalOrderQuantity = Val(txtQuantityOrdered.Text)
                GlobalNominalDiameter = NominalDiameter
                GlobalSONumber = Val(cboSalesOrderNumber.Text)
                GlobalSOUnitPrice = Val(txtPricePerUnit.Text)
                GlobalSOStatus = SOStatus
                GlobalItemClass = ItemClass
                GlobalNominalLength = NominalLength
                GlobalCustomerID = cboCustomerID.Text
                GlobalSOPartNumber = cboPartNumber.Text

                Using NewSOAccessoriesForm As New SOAccessoriesForm
                    Dim result = NewSOAccessoriesForm.ShowDialog
                End Using
            Else
                'Do nothing
            End If
            '***************************************************************************************
            If NewBoxType = "BOX-7GALLONCAN" And cboDivisionID.Text = "TWD" Then
                'SEE IF THERE IS ALREADY AN EXISTING CAN CHARGE ON THIS ORDER
                Dim CheckForCanCharge As Integer = 0

                Dim CheckForCanChargeStatement As String = "SELECT COUNT(ItemID) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND ItemID = @ItemID"
                Dim CheckForCanChargeCommand As New SqlCommand(CheckForCanChargeStatement, con)
                CheckForCanChargeCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                CheckForCanChargeCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = "CAN CHARGE (WELD STUDS)"

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CheckForCanCharge = CInt(CheckForCanChargeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CheckForCanCharge = 0
                End Try
                con.Close()
                '************************************************
                If CheckForCanCharge = 0 Then
                    'Can Charge not already added to this order

                    'Get number of cans to add - based on number of studs / can count
                    Dim CanQuantity As Double = 0
                    Dim CanBoxCount As Double = NewBoxCount
                    Dim CanExtendedAmount As Double = 0

                    'Avoid Divide By Zero Error
                    If CanBoxCount = 0 Or Val(txtQuantityOrdered.Text) = 0 Then
                        CanQuantity = 0
                    Else
                        CanBoxCount = NewBoxCount
                        CanQuantity = Val(txtQuantityOrdered.Text) / CanBoxCount

                        'Round up the number of cans
                        CanQuantity = Math.Ceiling(CanQuantity)
                        CanExtendedAmount = CanQuantity * 4.46
                        CanExtendedAmount = Math.Round(CanExtendedAmount, 2)

                        'Write Data to Sales Order Line Database Table (Line Items)
                        Try
                            cmd = New SqlCommand("Insert Into SalesOrderLineTable(SalesOrderKey, SalesOrderLineKey, ItemID, Description, Quantity, Price, LineComment, SalesTax, SalesTax2, SalesTax3, DivisionID, ExtendedAmount, LineWeight, LineBoxes, LineStatus, DebitGLAccount, CreditGLAccount, LeadTime, CertificationType, EstExtendedCOS, ShippedPrevious, LabelCount, SpecialLineComment)Values(@SalesOrderKey, (SELECT isnull(MAX(SalesOrderLineKey) + 1, 1) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey), @ItemID, @Description, @Quantity, @Price, @LineComment, @SalesTax, @SalesTax2, @SalesTax3, @DivisionID, @ExtendedAmount, @LineWeight, @LineBoxes, @LineStatus, @DebitGLAccount, @CreditGLAccount, @LeadTime, @CertificationType, @EstExtendedCOS, @ShippedPrevious, @LabelCount, @SpecialLineComment)", con)

                            With cmd.Parameters
                                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                .Add("@ItemID", SqlDbType.VarChar).Value = "CAN CHARGE (WELD STUDS)"
                                .Add("@Description", SqlDbType.VarChar).Value = "CAN CHARGE FOR WELD STUDS SOLD IN CANS"
                                .Add("@Quantity", SqlDbType.VarChar).Value = CanQuantity
                                .Add("@Price", SqlDbType.VarChar).Value = 4.46
                                .Add("@LineComment", SqlDbType.VarChar).Value = ""
                                .Add("@SalesTax", SqlDbType.VarChar).Value = 0
                                .Add("@SalesTax2", SqlDbType.VarChar).Value = 0
                                .Add("@SalesTax3", SqlDbType.VarChar).Value = 0
                                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@ExtendedAmount", SqlDbType.VarChar).Value = CanExtendedAmount
                                .Add("@LineWeight", SqlDbType.VarChar).Value = 0
                                .Add("@LineBoxes", SqlDbType.VarChar).Value = 0
                                .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                                .Add("@DebitGLAccount", SqlDbType.VarChar).Value = "49999"
                                .Add("@CreditGLAccount", SqlDbType.VarChar).Value = "12100"
                                .Add("@LeadTime", SqlDbType.VarChar).Value = ""
                                .Add("@CertificationType", SqlDbType.VarChar).Value = "0"
                                .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = 0
                                .Add("@ShippedPrevious", SqlDbType.VarChar).Value = 0
                                .Add("@LabelCount", SqlDbType.VarChar).Value = 0
                                .Add("@SpecialLineComment", SqlDbType.VarChar).Value = ""
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            'Clear Variables
                            CanExtendedAmount = 1
                            CanQuantity = 0
                            CanBoxCount = 0
                        Catch ex As Exception
                            'Error Log
                            Dim TempSONumber As Integer = 0
                            Dim strSONumber As String
                            TempSONumber = Val(cboSalesOrderNumber.Text)
                            strSONumber = CStr(TempSONumber)

                            ErrorDate = Today()
                            ErrorComment = "Sales Order Form - Add Line Item"
                            ErrorDivision = cboDivisionID.Text
                            ErrorDescription = "Adding Can Charge failed"
                            ErrorReferenceNumber = "SO # " + strSONumber
                            ErrorUser = EmployeeLoginName

                            TFPErrorLogUpdate()
                        End Try
                    End If
                Else
                    'Can Charge already exists on this order - update existing

                    'Get number of cans to add - based on number of studs / can count
                    Dim OldCanQuantity As Integer = 0
                    Dim NewCanQuantity As Double = 0
                    Dim CanBoxCount As Double = NewBoxCount
                    Dim CanExtendedAmount As Double = 0
                    Dim CurrentCanQuantity As Double = 0

                    'Get existing number of cans
                    Dim OldCanQuantityStatement As String = "SELECT SUM(Quantity) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND ItemID = @ItemID"
                    Dim OldCanQuantityCommand As New SqlCommand(OldCanQuantityStatement, con)
                    OldCanQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    OldCanQuantityCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = "CAN CHARGE (WELD STUDS)"

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        OldCanQuantity = CInt(OldCanQuantityCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        OldCanQuantity = 0
                    End Try
                    con.Close()

                    'Get Sales Order Line Number for Can Charge
                    Dim CanLineNumber As Integer = 0

                    Dim CanLineNumberStatement As String = "SELECT SalesOrderLineKey FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND ItemID = @ItemID"
                    Dim CanLineNumberCommand As New SqlCommand(CanLineNumberStatement, con)
                    CanLineNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    CanLineNumberCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = "CAN CHARGE (WELD STUDS)"

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        CanLineNumber = CInt(CanLineNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        CanLineNumber = 0
                    End Try
                    con.Close()

                    'Calculate Variables
                    CurrentCanQuantity = Val(txtQuantityOrdered.Text)

                    If CurrentCanQuantity <> 0 And CanBoxCount <> 0 Then
                        NewCanQuantity = CurrentCanQuantity / CanBoxCount
                        NewCanQuantity = Math.Ceiling(NewCanQuantity)
                        NewCanQuantity = NewCanQuantity + OldCanQuantity
                        CanExtendedAmount = NewCanQuantity * 4.46
                        CanExtendedAmount = Math.Round(CanExtendedAmount, 2)

                        'Write Data to Sales Order Line Database Table (Line Items)
                        Try
                            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET Quantity = @Quantity, ExtendedAmount = @ExtendedAmount, LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

                            With cmd.Parameters
                                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = CanLineNumber
                                .Add("@Quantity", SqlDbType.VarChar).Value = NewCanQuantity
                                .Add("@ExtendedAmount", SqlDbType.VarChar).Value = CanExtendedAmount
                                .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            'Clear Variables
                            CanExtendedAmount = 0
                            NewCanQuantity = 0
                            OldCanQuantity = 0
                            CurrentCanQuantity = 0
                            CanBoxCount = 0
                        Catch ex As Exception
                            'Error Log
                            Dim TempSONumber As Integer = 0
                            Dim strSONumber As String
                            TempSONumber = Val(cboSalesOrderNumber.Text)
                            strSONumber = CStr(TempSONumber)

                            ErrorDate = Today()
                            ErrorComment = "Sales Order Form - Add Line Item"
                            ErrorDivision = cboDivisionID.Text
                            ErrorDescription = "Updating Can Charge failed"
                            ErrorReferenceNumber = "SO # " + strSONumber
                            ErrorUser = EmployeeLoginName

                            TFPErrorLogUpdate()
                        End Try
                    Else
                        'Do not update Can Charge
                    End If
                End If
            End If
            '***************************************************************************************
            'Call procedure to populate grid on form
            ShowData()
            '***************************************************************************************
            'Clear labels and text boxes after entry
            lblLastSalePrice.Text = ""
            lblLastPurchaseCost.Text = ""
            lblQOH.Text = ""
            lblFullBoxCount.Text = ""
            lblPieceWeight.Text = ""
            lblStdUnitCost.Text = ""
            lblStdUnitPrice.Text = ""
            lblQtyOpen.Text = ""
            lblQtyPending.Text = ""

            txtQuantityOrdered.Clear()
            txtPricePerUnit.Clear()
            txtLeadTime.Clear()
            txtLineComment.Clear()
            txtLongDescription.Clear()

            cboPartNumber.SelectedIndex = -1
            cboPartDescription.SelectedIndex = -1

            If Not String.IsNullOrEmpty(cboPartDescription.Text) Then
                cboPartDescription.Text = ""
            End If
            '***************************************************************************************
            'Re-initialize data
            GlobalBrokenBoxCharge = "NO"
            CheckPartNumber = ""
            GetLineNumber = 0
            CheckOrderQuantity = 0
            SalesTax = 0
            PieceWeight = 0
            TotalWeight = 0
            SaleAmount = 0
            LineBoxCount = 0
            CheckTWELabelCount = 0
            counter = counter + 1
            '***************************************************************************************
            'Show Totals (datagrid tab for line items)
            tabExpandedMenu.SelectedIndex = 0

            'Calculate tax for canadian customers
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If
            '***************************************************************************************
            'After calculated totals, update Header Table
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                'UPDATE Header Table based on line amounts
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS, TaxRate1 = @TaxRate1, TaxRate2 = @TaxRate2, TaxRate3 = @TaxRate3 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                    .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                    .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                    .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                    .Add("@TaxRate1", SqlDbType.VarChar).Value = SalesTaxRate1
                    .Add("@TaxRate2", SqlDbType.VarChar).Value = SalesTaxRate2
                    .Add("@TaxRate3", SqlDbType.VarChar).Value = SalesTaxRate3
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Else
                'UPDATE Header Table based on line amounts
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                    .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = 0
                    .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = 0
                    .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            End If
            '***************************************************************************************
            'ReCalculate SO Totals
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOTotal = (ProductTotal + FreightCharge + TotalSalesTax + TotalSalesTax2 + TotalSalesTax3) WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '***************************************************************************************
            Try
                dgvSalesOrderLines.Rows(dgvSalesOrderLines.Rows.Count - 1).Selected = True
                dgvSalesOrderLines.CurrentCell = dgvSalesOrderLines.Rows(dgvSalesOrderLines.Rows.Count - 1).Cells("QuantityColumn")
            Catch ex As Exception
                'Skip
            End Try
            '***************************************************************************************
            'Set focus back to part number
            cboPartNumber.Focus()
        End If
    End Sub

    Private Sub cmdRemoveSalesTax_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdRemoveSalesTax.Click
        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Exit Sub
        End If

        Dim button As DialogResult = MessageBox.Show("Do you wish to remove Sales Tax from this Sales Order?", "REMOVE TAX", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
        If button = DialogResult.Yes Then
            LockBatch()
            Dim SumSOLines, SumFreight, SumSOTotal As Double

            Try
                'Load Product Total and Freight to re-calc Quote Total
                Dim SUMStatement1 As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
                Dim SUMCommand1 As New SqlCommand(SUMStatement1, con)
                SUMCommand1.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                SUMCommand1.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim SELStatement3 As String = "SELECT FreightCharge FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
                Dim SELCommand3 As New SqlCommand(SELStatement3, con)
                SELCommand3.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                SELCommand3.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    SumSOLines = CDbl(SUMCommand1.ExecuteScalar)
                Catch ex As System.Exception
                    SumSOLines = 0
                End Try
                Try
                    SumFreight = CDbl(SELCommand3.ExecuteScalar)
                Catch ex As System.Exception
                    SumFreight = 0
                End Try
                con.Close()

                SumSOTotal = SumSOLines + SumFreight
                '************************************************************************************************
                'Write Data to Sales Order Header Database Table (One Time)
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET TotalSalesTax = @TotalSalesTax, SOTotal = @SOTotal, TaxRate1 = @TaxRate1, TaxRate2 = @TaxRate2, TaxRate3 = @TaxRate3 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = 0
                    .Add("@SOTotal", SqlDbType.VarChar).Value = SumSOTotal
                    .Add("@TaxRate1", SqlDbType.VarChar).Value = 0
                    .Add("@TaxRate2", SqlDbType.VarChar).Value = 0
                    .Add("@TaxRate3", SqlDbType.VarChar).Value = 0
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '************************************************************************************************
                'Write Data to Sales Order Header Database Table (One Time)
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesTax = @SalesTax WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@SalesTax", SqlDbType.VarChar).Value = 0
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '************************************************************************************************
                ShowData()

                '***************************************************************************************
                'Since line changes were made, set variable to YES
                LineChangesMade = "YES"
                '***************************************************************************************

                lblOrderTotal.Text = FormatCurrency(SumSOTotal, 2)
                lblTaxTotal.Text = FormatCurrency(0, 2)
                chkTaxable.Checked = False
                txtTaxRate.Visible = False

                MsgBox("Sales Tax has been removed.", MsgBoxStyle.OkOnly)
            Catch ex As System.Exception
                MsgBox("There is an error - sales tax not removed.", MsgBoxStyle.OkOnly)
            End Try
        ElseIf button = DialogResult.No Then
            cmdRemoveSalesTax.Focus()
        End If
    End Sub

    Private Sub cmdGenerateNewSO_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdGenerateNewSO.Click
        If Not String.IsNullOrEmpty(lastSO) Then
            unlockBatch(lastSO)
        End If

        'Clear form on next number
        ClearVariables()
        ClearData()
        ClearDataInDatagrid()

        If cboDivisionID.Text = "ADM" Then
            MsgBox("You must select a valid division.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If

        SOStatus = "OPEN"
        txtSOStatus.Text = SOStatus

        SalesOrderDate = dtpSalesOrderDate.Value
        ShippingDate = dtpShippingDate.Value
        '****************************************************************************************************
        If cboSalesPersonID.Text = "" Then
            cboSalesPersonID.Text = EmployeeSalespersonCode
        Else
            'Do nothing
        End If
        '****************************************************************************************************
        'Reserve Sales Order Number
        SaveInsertIntoSalesOrderHeader()

        cboSalesOrderNumber.Focus()

        DisableFieldsIfNoSO()

        needsSaved = True
    End Sub

    Private Sub cmdSalesHistory_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSalesHistory.Click
        GlobalCustomerID = cboCustomerID.Text
        GlobalCustomerName = cboCustomerName.Text
        GlobalMaintenancePartNumber = cboPartNumber.Text
        GlobalMaintenancePartDescription = cboPartDescription.Text

        Using NewViewCustomerSalesHistory As New ViewCustomerSalesHistory
            Dim result = NewViewCustomerSalesHistory.ShowDialog()
        End Using
    End Sub

    Private Sub cmdOpenOrders_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdOpenOrders.Click
        GlobalCustomerID = cboCustomerID.Text
        GlobalDivisionCode = cboDivisionID.Text

        Using NewCustomerOpenOrders As New CustomerOpenOrders
            Dim result = NewCustomerOpenOrders.ShowDialog()
        End Using
    End Sub

    Private Sub cmdStockStatus_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdStockStatus.Click
        Using NewInventoryStatus As New InventoryStatus
            Dim result = NewInventoryStatus.ShowDialog()
        End Using
    End Sub

    Private Sub cmdClearAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdClearAll.Click
        If Not String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            unlockBatch()
        End If

        If LineChangesMade = "YES" And txtSOStatus.Text = "SHIPPED" Then
            'Force update to lines





        Else
            'Skip
        End If

        ClearDataInDatagrid()
        ClearSOInvoices()
        ClearSOReturns()
        ClearSOShipments()
        'LoadItemList()
        'LoadSalesOrderNumber()
        ClearVariables()
        ClearData()
    End Sub

    Private Sub cmdClearShipTo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdClearShipTo.Click
        cboShipToID.SelectedIndex = -1
        LoadDefaultShipTo()
        ''changes the variable to make sure that things get saved
        needsSaved = True
    End Sub

    Private Sub cmdDeleteLine_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdDeleteLine.Click
        If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
            MsgBox("You must have a valid Sales Order # selected.", MsgBoxStyle.OkOnly)
        End If

        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Exit Sub
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - DELETE LINE BUTTON - Invalid Division (L7313)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        LockBatch()
        '**********************************************************************************************************************************************
        'Validate if there are shipment lines for this item
        Dim CheckShipLineQuantityStatement As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentLineQuery WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID AND SOLineNumber = @SOLineNumber"
        Dim CheckShipLineQuantityCommand As New SqlCommand(CheckShipLineQuantityStatement, con)
        CheckShipLineQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CheckShipLineQuantityCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        CheckShipLineQuantityCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckShipLineQuantity = CInt(CheckShipLineQuantityCommand.ExecuteScalar)
        Catch ex As System.Exception
            CheckShipLineQuantity = 0
        End Try
        con.Close()

        If CheckShipLineQuantity > 0 Then
            MsgBox("This Line exists on a shipment and cannot be deleted.", MsgBoxStyle.OkOnly)
            Exit Sub
        Else
            'Continue - no shipments
        End If
        '************************************************************************************************************************************************
        Dim button As DialogResult = MessageBox.Show("Do you wish to delete this Sales Order Line?", "DELETE SALES ORDER LINE", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
        If button = DialogResult.Yes Then
            'Check to see if shipment exists - if it does, do not re-order
            Dim CheckShipmentForSO As Integer = 0

            Dim CheckShipmentForSOStatement As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID AND ShipmentStatus <> @ShipmentStatus"
            Dim CheckShipmentForSOCommand As New SqlCommand(CheckShipmentForSOStatement, con)
            CheckShipmentForSOCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CheckShipmentForSOCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            CheckShipmentForSOCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckShipmentForSO = CInt(CheckShipmentForSOCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckShipmentForSO = 0
            End Try
            con.Close()

            'Re-Order Sales Order Numbers

            'Removes any notifications for this line
            cmd = New SqlCommand("DELETE FROM NotificationTable WHERE ReferenceNumber = @SalesOrderNumber AND DivisionID = @DivisionID AND EmployeeID = (SELECT EmployeeID FROM EmployeeData WHERE LoginName = @LoginName) AND Details like @Details", con)
            cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
            cmd.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            cmd.Parameters.Add("@Details", SqlDbType.VarChar).Value = "%" + cboCustomerName.Text + "%" + cboEditPartDescription.Text + "%"

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '***************************************************************************************************
            'Create command to update database and fill with text box enties
            cmd = New SqlCommand("DELETE FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '***************************************************************************************************
            'Refresh datagrid
            ShowData()

            If CheckShipmentForSO = 0 Then
                'Renumber Lines in datagrid
                Dim TempLineNumber As Integer = 1000

                For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                    Try
                        LineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                    Catch ex As Exception
                        LineNumber = 0
                    End Try

                    'UPDATE Voucher Lines
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesOrderLineKey = @SalesOrderLineKey WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey2", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = TempLineNumber
                        .Add("@SalesOrderLineKey2", SqlDbType.VarChar).Value = LineNumber
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    TempLineNumber = TempLineNumber + 1
                Next

                'Reload datagrid
                ShowData()

                'Renumber lines
                Dim TempLineNumber2 As Integer = 1

                For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                    Try
                        LineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                    Catch ex As Exception
                        LineNumber = 0
                    End Try

                    'UPDATE Voucher Lines
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesOrderlineKey = @SalesOrderLineKey WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey2", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = TempLineNumber2
                        .Add("@SalesOrderLineKey2", SqlDbType.VarChar).Value = LineNumber
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    TempLineNumber2 = TempLineNumber2 + 1
                Next

                'Reload datagrid
                ShowData()
            Else
                'Skip renumbering the lines
            End If
            '***************************************************************************************************
            'Load Sales Order Tax Rate based on user entry
            LoadSalesOrderTaxRates()
            '***************************************************************************************************
            'Calculate tax for canadian customers
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If
            '***************************************************************************************
            If txtSOStatus.Text = "SHIPPED" Then
                SOStatus = "SHIPPED"
            ElseIf txtSOStatus.Text = "OPEN" Then
                'Determine Shipping Status (if changed)
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    SOStatus = "OPEN"
                    txtSOStatus.Text = "OPEN"
                End If
            Else
                'SO Status is correct
            End If
            '***************************************************************************************
            'Save all updates to Sales Order Header Table
            SOStatus = txtSOStatus.Text

            SaveUpdateSalesOrderHeader()

            ShowData()
            '***************************************************************************************************
            'Run check to see if Sales Order is closed after deletion
            Dim CheckOpenLineQuantity As Double

            For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                'Check to to see if there are any open quantities
                Try
                    CheckOpenLineQuantity = row.Cells("OpenSOQuantityColumn").Value
                Catch ex As System.Exception
                    CheckOpenLineQuantity = 0
                End Try

                If CheckOpenLineQuantity > 0 Then
                    cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@SOStatus", SqlDbType.VarChar).Value = txtSOStatus.Text
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    Exit For  'Exit loop - if one line is open, then SO is still open
                Else
                    cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@SOStatus", SqlDbType.VarChar).Value = "CLOSED"
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                End If
            Next

            'Calculate tax for canadian customers
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If

            'UPDATE Header Table based on line amounts
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            '***************************************************************************************
            'Since line changes were made, set variable to YES
            LineChangesMade = "YES"
            '***************************************************************************************

            'Clear data fields
            cboDeleteLine.SelectedIndex = -1
            cboEditPartNumber.SelectedIndex = -1
            cboEditPartDescription.SelectedIndex = -1
            cboEditCertType.SelectedIndex = -1
            txtEditPrice.Clear()
            txtEditLineComments.Clear()
            txtEditQuantity.Clear()
            txtEditLeadTime.Clear()
            txtEditExtendedAmount.Clear()
        ElseIf button = DialogResult.No Then
            'Do nothing
        End If
    End Sub

    Private Sub cmdPrintConfirm_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPrintConfirm.Click
        If cboSalesOrderNumber.Text = "" Or cboCustomerID.Text = "" Then
            MsgBox("You must have a valid Sales Order # selected.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        '**************************************************************************************
        ValidateShippingMethod()

        If CheckShippingMethod = "EXIT SUB" Then
            MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
            CheckShippingMethod = ""
            Exit Sub
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - PRINT CONFIRMATION BUTTON - Invalid Division (L7603)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        If Not isSomeoneEditing() Then
            '***************************************************************************************
            If txtSOStatus.Text = "SHIPPED" Then
                SOStatus = "SHIPPED"
            ElseIf txtSOStatus.Text = "OPEN" Then
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    SOStatus = "OPEN"
                    txtSOStatus.Text = "OPEN"
                End If
            Else
                'SO Status is correct
            End If
            '***************************************************************************************************
            If txtSOStatus.Text = "OPEN" Or txtSOStatus.Text = "DROPSHIP" Then
                'Add or save Ship To Address if necessary
                If cboShipToID.Text = "" Then
                    'Do nothing - default ship to
                Else
                    Try
                        SaveInsertAdditionalShipTo()
                    Catch ex As System.Exception
                        SaveUpdateAdditionalShipTo()
                    End Try
                End If
                '***************************************************************************************************
                'Recalculate line totals
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '***************************************************************************************************
                'Set default delivery type for companies
                If cboShipVia.Text = "" And cboDivisionID.Text = "CBS" Then
                    cboShipVia.Text = "Will Call"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "SLC" Then
                    cboShipVia.Text = "SEE SALESMAN"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ATL" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWE" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWD" Then
                    cboShipVia.Text = ""
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CHT" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "HOU" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFT" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And (cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR") Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CGO" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ALB" Then
                    cboShipVia.Text = "Delivery"
                Else
                    'Do nothing
                End If
                '***************************************************************************************************
                'Load Sales Order Tax Rate based on user entry
                LoadSalesOrderTaxRates()
                '********************************************************************************************************
                'Calculate Totals and Update the Header Table
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    CalculateCanadianTotals()
                Else
                    RecalculateLineTaxTotals()
                    CalculateTotals()
                End If
                '****************************************************************************************************
                If cboSalesPersonID.Text = "" Then
                    cboSalesPersonID.Text = EmployeeSalespersonCode
                Else
                    'Do nothing
                End If
                '****************************************************************************************************
                'Save all updates to Sales Order Header Table
                SOStatus = txtSOStatus.Text

                SaveUpdateSalesOrderHeader()
            End If
        End If
        '***************************************************************************************************
        'Get Sales Confirmation Email

        Dim GetConfirmationEmail As String = ""

        Dim GetConfirmationEmailString As String = "SELECT ConfirmationEmail FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetConfirmationEmailCommand As New SqlCommand(GetConfirmationEmailString, con)
        GetConfirmationEmailCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetConfirmationEmailCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetConfirmationEmail = CStr(GetConfirmationEmailCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetConfirmationEmail = ""
        End Try
        con.Close()

        EmailCustomerConfirmations = GetConfirmationEmail
        '***************************************************************************************************
        'Choose correct print form
        If cboDivisionID.Text = "TFP" Then
            'Get FOX Number
            Dim GetFOXNumber As Integer = 0

            Dim GetFOXNumberString As String = "SELECT FOXNumber FROM FOXTable WHERE OrderReferenceNumber = @OrderReferenceNumber AND DivisionID = @DivisionID"
            Dim GetFOXNumberCommand As New SqlCommand(GetFOXNumberString, con)
            GetFOXNumberCommand.Parameters.Add("@OrderReferenceNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            GetFOXNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetFOXNumber = CInt(GetFOXNumberCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetFOXNumber = 0
            End Try
            con.Close()

            GlobalSONumber = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text
            GlobalTFPSOPrintForm = "TFP Acknowledgement"
            GlobalFOXNumber = GetFOXNumber

            Using NewPrintTFAcknowledgement As New PrintTFAcknowledgement
                Dim result = NewPrintTFAcknowledgement.ShowDialog()
            End Using
        Else
            GlobalSONumber = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text

            'Choose the correct Print Form (REMOTE or LOCAL)

            'Get Login Type
            Dim GetLoginType As String = ""

            Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
            Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
            GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetLoginType = ""
            End Try
            con.Close()

            If GetLoginType = "REMOTE" Then
                Using NewPrintSalesConfirmationRemote As New PrintSalesConfirmationRemote
                    Dim result = NewPrintSalesConfirmationRemote.ShowDialog()
                End Using
            Else
                Using NewPrintSalesConfirmation As New PrintSalesConfirmation
                    Dim result = NewPrintSalesConfirmation.ShowDialog()
                End Using
            End If
        End If
    End Sub

    Private Sub cmdExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdExit.Click
        'Form Logout Routine
        FormLogoutRoutine()

        '********************************************************************************************************
        'Determine Shipping Status
        If chkDropShip.Checked = True Then
            SOStatus = "DROPSHIP"
            txtSOStatus.Text = SOStatus
        Else
            SOStatus = txtSOStatus.Text
        End If
        '********************************************************************************************************
        If cboSalesOrderNumber.Text = "" Then
            cboSalesOrderNumber.Text = ""
            ClearVariables()
            ClearData()
            ClearDataOnChange()
            GlobalSONumber = 0
            GlobalSOShipmentNumber = 0
            GlobalSOPickNumber = 0
            ClearAllDatagrids()
            Me.Dispose()
            Me.Close()
        End If
        '**********************************************************
        If isSomeoneEditing() Then
            unlockBatch()
            cboSalesOrderNumber.Text = ""
            ClearVariables()
            ClearData()
            ClearDataOnChange()
            GlobalSONumber = 0
            GlobalSOShipmentNumber = 0
            GlobalSOPickNumber = 0
            ClearAllDatagrids()
            Me.Dispose()
            Me.Close()
        End If
        '************************************************************
        If SOStatus = "INVOICED" Or SOStatus = "CLOSED" Then
            unlockBatch()
            cboSalesOrderNumber.Text = ""
            ClearVariables()
            ClearData()
            ClearDataOnChange()
            GlobalSONumber = 0
            GlobalSOShipmentNumber = 0
            GlobalSOPickNumber = 0
            ClearAllDatagrids()
            Me.Dispose()
            Me.Close()
        End If
        '************************************************************
        If SOStatus = "SHIPPED" And needsSaved = False Then
            unlockBatch()
            cboSalesOrderNumber.Text = ""
            ClearVariables()
            ClearData()
            ClearDataOnChange()
            GlobalSONumber = 0
            GlobalSOShipmentNumber = 0
            GlobalSOPickNumber = 0
            ClearAllDatagrids()
            Me.Dispose()
            Me.Close()
        End If
        '************************************************************
        If SOStatus = "SHIPPED" And needsSaved = True Then
            'Prompt to save
            Dim button1 As DialogResult = MessageBox.Show("Do you wish to update the Pick Ticket and Packing List?", "UPDATE PICK/PACK LIST", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
            If button1 = DialogResult.Yes Then
                '********************************************************************************
                'Get division of the sales order number
                ValidateDivision()

                If CheckDivision <> cboDivisionID.Text Then
                    MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

                    'Error Log
                    Dim TempSONumber As Integer = 0
                    Dim strSONumber As String
                    TempSONumber = Val(cboSalesOrderNumber.Text)
                    strSONumber = CStr(TempSONumber)

                    ErrorDate = Today()
                    ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
                    ErrorDivision = cboDivisionID.Text
                    ErrorDescription = "SO Form - EXIT BUTTON - Invalid Division (L7840)"
                    ErrorReferenceNumber = "SO # " + strSONumber
                    ErrorUser = EmployeeLoginName

                    TFPErrorLogUpdate()

                    Exit Sub
                Else
                    'Skip
                End If
                '**************************************************************************************
                LockBatch()
                '********************************************************************************************************
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'Calculate Totals and Update the Header Table
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    CalculateCanadianTotals()
                Else
                    RecalculateLineTaxTotals()
                    CalculateTotals()
                End If
                '****************************************************************************************************
                'Add or save Ship To Address if necessary
                If cboShipToID.Text = "" Then
                    'Do nothing - default ship to
                Else
                    Try
                        SaveInsertAdditionalShipTo()
                    Catch ex As System.Exception
                        SaveUpdateAdditionalShipTo()
                    End Try
                End If
                '****************************************************************************************************
                'Set default delivery type for companies
                If cboShipVia.Text = "" And cboDivisionID.Text = "CBS" Then
                    cboShipVia.Text = "Will Call"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "SLC" Then
                    cboShipVia.Text = "SEE SALESMAN"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ATL" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWE" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWD" Then
                    cboShipVia.Text = ""
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CHT" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "HOU" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFT" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFF" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CGO" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ALB" Then
                    cboShipVia.Text = "Delivery"
                Else
                    'Do nothing
                End If
                '****************************************************************************************************
                If cboSalesPersonID.Text = "" Then
                    cboSalesPersonID.Text = EmployeeSalespersonCode
                Else
                    'Do nothing
                End If

                SalesOrderDate = dtpSalesOrderDate.Value
                ShippingDate = dtpShippingDate.Value
                '****************************************************************************************************
                'Save all updates to Sales Order Header Table
                ValidateShippingMethod()

                If CheckShippingMethod = "EXIT SUB" Then
                    MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
                    CheckShippingMethod = ""
                    Exit Sub
                End If

                SaveUpdateSalesOrderHeader()
                '****************************************************************************************************
                'If Shipment and Pick Ticket already exist and are pending, update existing data
                Dim GetShipmentNumber, GetPickListNumber, GetPickListBatchNumber As Integer

                'Get Pick Ticket number and Shipment Number
                Dim GetShipmentNumberStatement As String = "SELECT ShipmentNumber FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND ShipmentStatus = @ShipmentStatus AND DivisionID = @DivisionID"
                Dim GetShipmentNumberCommand As New SqlCommand(GetShipmentNumberStatement, con)
                GetShipmentNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                GetShipmentNumberCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                GetShipmentNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim GetPickListNumberStatement As String = "SELECT PickTicketNumber FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND ShipmentStatus = @ShipmentStatus AND DivisionID = @DivisionID"
                Dim GetPickListNumberCommand As New SqlCommand(GetPickListNumberStatement, con)
                GetPickListNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                GetPickListNumberCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                GetPickListNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetShipmentNumber = CInt(GetShipmentNumberCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetShipmentNumber = 0
                End Try
                Try
                    GetPickListNumber = CInt(GetPickListNumberCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetPickListNumber = 0
                End Try
                con.Close()
                '****************************************************************************************************
                'Get Pick Ticket Batch Number for the reprint
                Dim GetPickListBatchNumberStatement As String = "SELECT BatchNumber FROM PickListHeaderTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                Dim GetPickListBatchNumberCommand As New SqlCommand(GetPickListBatchNumberStatement, con)
                GetPickListBatchNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                GetPickListBatchNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()

                Try
                    GetPickListBatchNumber = CInt(GetPickListBatchNumberCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetPickListBatchNumber = 0
                End Try
                con.Close()
                '****************************************************************************************************
                'Write Data to Pick Ticket Header Database Table
                cmd = New SqlCommand("UPDATE PickListHeaderTable SET PickDate = @PickDate, Comment = @Comment, PLStatus = @PLStatus, CustomerID = @CustomerID, CustomerPO = @CustomerPO, ShipVia = @ShipVia, AdditionalShipTo = @AdditionalShipTo, PRONumber = @PRONumber, SalesmanID = @SalesmanID, SpecialInstructions = @SpecialInstructions, ShipDate = @ShipDate, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipToAddress1 = @ShipToAddress1, ShipToAddress2 = @ShipToAddress2, ShipToCity = @ShipToCity, ShipToState = @ShipToState, ShipToZip = @ShipToZip, ShipToCountry = @ShipToCountry, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1, SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3  WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    .Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@PickDate", SqlDbType.VarChar).Value = ShippingDate
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                    .Add("@PLStatus", SqlDbType.VarChar).Value = "PENDING"
                    .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                    .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                    .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                    .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                    .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                    .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                    .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                    .Add("@ShipDate", SqlDbType.VarChar).Value = dtpShippingDate.Text
                    .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                    .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                    .Add("@ShipToName", SqlDbType.VarChar).Value = txtSTName.Text
                    .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                    .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                    .Add("@ShipToCity", SqlDbType.VarChar).Value = cboCustomerClass.Text
                    .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                    .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                    .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                    .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                    .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                    .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                    .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                    .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                GlobalSOPickNumber = GetPickListNumber
                '****************************************************************************************************
                'Delete existing lines from the Pick List line table and re-write
                cmd = New SqlCommand("DELETE FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'After writing header to Pick List, extract line data and write to Pick List Line Table
                Dim SLSalesOrderLineKey As Integer
                Dim SLItemID, SLDescription, SLLineComment, LineCertType, GLDebitAccount, GLCreditAccount As String
                Dim SLPrice, SLOpenQuantity As Double

                For Each LineRow As DataGridViewRow In dgvSalesOrderLines.Rows
                    Dim LineCell As DataGridViewTextBoxCell = LineRow.Cells("SalesOrderKeyColumn")
                    Dim LineCell1 As DataGridViewTextBoxCell = LineRow.Cells("OpenSOQuantityColumn")

                    If LineCell.Value = cboSalesOrderNumber.Text And LineCell1.Value > 0 Then
                        Try
                            SLSalesOrderLineKey = LineRow.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As System.Exception
                            SLSalesOrderLineKey = 1
                        End Try
                        Try
                            SLItemID = LineRow.Cells("ItemIDColumn").Value
                        Catch ex As System.Exception
                            SLItemID = ""
                        End Try
                        Try
                            SLDescription = LineRow.Cells("DescriptionColumn").Value
                        Catch ex As System.Exception
                            SLDescription = ""
                        End Try
                        Try
                            SLOpenQuantity = LineRow.Cells("OpenSOQuantityColumn").Value
                        Catch ex As System.Exception
                            SLOpenQuantity = 0
                        End Try
                        Try
                            SLPrice = LineRow.Cells("PriceColumn").Value
                        Catch ex As System.Exception
                            SLPrice = 0
                        End Try
                        Try
                            SLLineComment = LineRow.Cells("LineCommentColumn").Value
                        Catch ex As System.Exception
                            SLLineComment = ""
                        End Try
                        Try
                            GLDebitAccount = LineRow.Cells("DebitGLAccountColumn").Value
                        Catch ex As System.Exception
                            GLDebitAccount = "49999"
                        End Try
                        Try
                            GLCreditAccount = LineRow.Cells("CreditGLAccountColumn").Value
                        Catch ex As System.Exception
                            GLCreditAccount = "12100"
                        End Try
                        Try
                            LineCertType = LineRow.Cells("CertificationTypeColumn").Value
                        Catch ex As System.Exception
                            LineCertType = "0"
                        End Try
                        '****************************************************************************************************
                        'Extract Line Weight, Line Boxes, Open Sales Tax From SalesOrderQuantityStatus
                        Dim SalesTaxOpenStatement As String = "SELECT SalesTaxOpen, OpenLineWeight FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                        Dim SalesTaxOpenCommand As New SqlCommand(SalesTaxOpenStatement, con)
                        SalesTaxOpenCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        SalesTaxOpenCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = SLSalesOrderLineKey

                        Dim BoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim BoxCountCommand As New SqlCommand(BoxCountStatement, con)
                        BoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                        BoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Dim reader As SqlDataReader = SalesTaxOpenCommand.ExecuteReader()
                        If reader.HasRows Then
                            reader.Read()
                            If IsDBNull(reader.Item("SalesTaxOpen")) Then
                                SalesTaxOpen = 0
                            Else
                                SalesTaxOpen = reader.Item("SalesTaxOpen")
                            End If
                            If IsDBNull(reader.Item("OpenLineWeight")) Then
                                LineWeightOpen = 0
                            Else
                                LineWeightOpen = reader.Item("OpenLineWeight")
                            End If
                        Else
                            SalesTaxOpen = 0
                            LineWeightOpen = 0
                        End If
                        reader.Close()
                        Try
                            BoxCount = CInt(BoxCountCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            BoxCount = 0
                        End Try
                        con.Close()
                        '****************************************************************************************************
                        'Determine Open Box Count
                        'Avoid Divide-By-Zero Error
                        If BoxCount = 0 Then
                            LineBoxesOpen = 0
                        Else
                            'LineBoxesOpen = SLQuantity / BoxCount

                            'Verify full boxes
                            If SLOpenQuantity Mod BoxCount = 0 Then
                                LineBoxesOpen = SLOpenQuantity / BoxCount
                            Else
                                LineBoxesOpen = Math.Ceiling(SLOpenQuantity / BoxCount)
                            End If
                        End If
                        '****************************************************************************************************
                        OpenExtendedAmount = SLOpenQuantity * SLPrice
                        '****************************************************************************************************
                        'Don not write sales tax to lines if Canadian
                        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                            SalesTaxOpen = 0
                        End If
                        '****************************************************************************************************
                        'Add new line to Pick List Line Table
                        'Get Next Line Number
                        Dim PickLineNumberStatement As String = "SELECT MAX(PickListLineKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                        Dim PickLineNumberCommand As New SqlCommand(PickLineNumberStatement, con)
                        PickLineNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        PickLineNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            LastPickLineNumber = CInt(PickLineNumberCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            LastPickLineNumber = 0
                        End Try
                        con.Close()

                        NextPickLineNumber = LastPickLineNumber + 1

                        'Write Sales Order Data to Pick List Line Table
                        cmd = New SqlCommand("Insert Into PickListLineTable(PickListHeaderKey, PickListLineKey, ItemID, Description, Quantity, Price, SalesTax, ExtendedAmount, LineComment, LineStatus, DivisionID, LineWeight, LineBoxes, GLDebitAccount, GLCreditAccount, CertificationType, SOLineNumber, SerialNumber) Values (@PickListHeaderKey, @PickListLineKey, @ItemID, @Description, @Quantity, @Price, @SalesTax, @ExtendedAmount, @LineComment, @LineStatus, @DivisionID, @LineWeight, @LineBoxes, @GLDebitAccount, @GLCreditAccount, @CertificationType, @SOLineNumber, @SerialNumber)", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@PickListLineKey", SqlDbType.VarChar).Value = NextPickLineNumber
                            .Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                            .Add("@Description", SqlDbType.VarChar).Value = SLDescription
                            .Add("@Quantity", SqlDbType.VarChar).Value = SLOpenQuantity
                            .Add("@Price", SqlDbType.VarChar).Value = SLPrice
                            .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTaxOpen
                            .Add("@ExtendedAmount", SqlDbType.VarChar).Value = OpenExtendedAmount
                            .Add("@LineComment", SqlDbType.VarChar).Value = SLLineComment
                            .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeightOpen
                            .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxesOpen
                            .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                            .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                            .Add("@CertificationType", SqlDbType.VarChar).Value = LineCertType
                            .Add("@SOLineNumber", SqlDbType.VarChar).Value = SLSalesOrderLineKey
                            .Add("@SerialNumber", SqlDbType.VarChar).Value = ""
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    End If
                Next
                '****************************************************************************************************
                'After Pick List is created, get existing shipment line data and write to Pick List Line Table to preserve

                'Count Shipment Lines and run routine for each line
                Dim CountShipLinesStatement As String = "SELECT Count(ShipmentNumber) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber and DivisionID = @DivisionID"
                Dim CountShipLinesCommand As New SqlCommand(CountShipLinesStatement, con)
                CountShipLinesCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                CountShipLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CountShipLines = CInt(CountShipLinesCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CountShipLines = 0
                End Try
                con.Close()

                Dim TempShipNumber As Integer = 1
                Dim SHSOLineNumber As Integer
                Dim SHLineComment As String

                For i As Integer = 1 To CountShipLines
                    'Get SO Line Number from Shipment Line Table
                    Dim SHSOLineNumberStatement As String = "SELECT SOLineNumber, SerialNumber FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND ShipmentLineNumber = @ShipmentLineNumber AND DivisionID = @DivisionID"
                    Dim SHSOLineNumberCommand As New SqlCommand(SHSOLineNumberStatement, con)
                    SHSOLineNumberCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                    SHSOLineNumberCommand.Parameters.Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = TempShipNumber
                    SHSOLineNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim reader As SqlDataReader = SHSOLineNumberCommand.ExecuteReader()
                    If reader.HasRows Then
                        reader.Read()
                        If IsDBNull(reader.Item("SOLineNumber")) Then
                            SHSOLineNumber = 0
                        Else
                            SHSOLineNumber = reader.Item("SOLineNumber")
                        End If
                        If IsDBNull(reader.Item("SerialNumber")) Then
                            SHLineComment = ""
                        Else
                            SHLineComment = reader.Item("SerialNumber")
                        End If
                    Else
                        SHSOLineNumber = 0
                        SHLineComment = ""
                    End If
                    reader.Close()
                    con.Close()

                    'Update new pick list lines with Line Comments
                    cmd = New SqlCommand("UPDATE PickListLineTable SET SerialNumber = @SerialNumber WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID AND SOLineNumber = @SOLineNumber", con)

                    With cmd.Parameters
                        .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        .Add("@SOLineNumber", SqlDbType.VarChar).Value = SHSOLineNumber
                        .Add("@SerialNumber", SqlDbType.VarChar).Value = SHLineComment
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    TempShipNumber = TempShipNumber + 1
                Next i
                '****************************************************************************************************
                'Write Data to Shipment Header Table
                cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipDate = @ShipDate, Comment = @Comment, PickTicketNumber = @PickTicketNumber, ShipVia = @ShipVia, PRONumber = @PRONumber, FreightQuoteNumber = @FreightQuoteNumber, FreightQuoteAmount = @FreightQuoteAmount, FreightActualAmount = @FreightActualAmount, ShippingWeight = @ShippingWeight, NumberOfPallets = @NumberOfPallets, CustomerID = @CustomerID, ShipToID = @ShipToID, ShipAddress1 = @ShipAddress1, ShipAddress2 = @ShipAddress2, ShipCity = @ShipCity, ShipState = @ShipState, ShipZip = @ShipZip, ShipCountry = ShipCountry, CustomerPO = @CustomerPO, ShipmentStatus = ShipmentStatus, ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, SalesmanID = @SalesmanID, SpecialInstructions = @SpecialInstructions, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total, CustomerClass = @CustomerClass, FOB = @FOB, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1, SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3 WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                    .Add("@PickTicketNumber", SqlDbType.VarChar).Value = GetPickListNumber
                    .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                    .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                    .Add("@FreightQuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                    .Add("@FreightQuoteAmount", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                    .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = 0
                    .Add("@NumberOfPallets", SqlDbType.VarChar).Value = 1
                    .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                    .Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
                    .Add("@ShipAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                    .Add("@ShipAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                    .Add("@ShipCity", SqlDbType.VarChar).Value = txtSTCity.Text
                    .Add("@ShipState", SqlDbType.VarChar).Value = txtSTState.Text
                    .Add("@ShipZip", SqlDbType.VarChar).Value = txtSTZip.Text
                    .Add("@ShipCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                    .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                    .Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = 0
                    .Add("@TaxTotal", SqlDbType.VarChar).Value = 0
                    .Add("@ShipmentTotal", SqlDbType.VarChar).Value = 0
                    .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                    .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                    .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                    .Add("@Tax2Total", SqlDbType.VarChar).Value = 0
                    .Add("@Tax3Total", SqlDbType.VarChar).Value = 0
                    .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                    .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                    .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                    .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                    .Add("@ShipToName", SqlDbType.VarChar).Value = txtSTName.Text
                    .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                    .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                    .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                    .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                    .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                GlobalSOShipmentNumber = GetShipmentNumber
                '***************************************************************************************************
                'Delete existing shipment lines before re-writing
                cmd = New SqlCommand("DELETE FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '***************************************************************************************************
                'Add Lines to Shipment Line Table

                'Count Lines in Pick List
                Dim CountLinesStatement As String = "SELECT Count(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                Dim CountLinesCommand As New SqlCommand(CountLinesStatement, con)
                CountLinesCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                CountLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CountLines = CInt(CountLinesCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CountLines = 0
                End Try
                con.Close()

                ShipmentLineNumber = 1
                '****************************************************************************************************
                For i As Integer = 1 To CountLines
                    'Extract Line Data from Pick List Line Table
                    Dim ItemIDStatement As String = "SELECT ItemID, Description, Quantity, Price, SalesTax, ExtendedAmount, LineComment, LineWeight, LineBoxes, GLDebitAccount, GLCreditAccount, CertificationType, SOLineNumber, SerialNumber FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND PickListLineKey = @PickListLineKey"
                    Dim ItemIDCommand As New SqlCommand(ItemIDStatement, con)
                    ItemIDCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    ItemIDCommand.Parameters.Add("@PickListLineKey", SqlDbType.VarChar).Value = ShipmentLineNumber

                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim reader As SqlDataReader = ItemIDCommand.ExecuteReader()
                    If reader.HasRows Then
                        reader.Read()
                        If IsDBNull(reader.Item("ItemID")) Then
                            ItemID = ""
                        Else
                            ItemID = reader.Item("ItemID")
                        End If
                        If IsDBNull(reader.Item("Description")) Then
                            Description = ""
                        Else
                            Description = reader.Item("Description")
                        End If
                        If IsDBNull(reader.Item("Quantity")) Then
                            Quantity = 0
                        Else
                            Quantity = reader.Item("Quantity")
                        End If
                        If IsDBNull(reader.Item("Price")) Then
                            Price = 0
                        Else
                            Price = reader.Item("Price")
                        End If
                        If IsDBNull(reader.Item("SalesTax")) Then
                            SalesTax = 0
                        Else
                            SalesTax = reader.Item("SalesTax")
                        End If
                        If IsDBNull(reader.Item("ExtendedAmount")) Then
                            ExtendedAmount = 0
                        Else
                            ExtendedAmount = reader.Item("ExtendedAmount")
                        End If
                        If IsDBNull(reader.Item("LineComment")) Then
                            LineComment = ""
                        Else
                            LineComment = reader.Item("LineComment")
                        End If
                        If IsDBNull(reader.Item("LineWeight")) Then
                            LineWeight = 0
                        Else
                            LineWeight = reader.Item("LineWeight")
                        End If
                        If IsDBNull(reader.Item("LineBoxes")) Then
                            LineBoxes = 0
                        Else
                            LineBoxes = reader.Item("LineBoxes")
                        End If
                        If IsDBNull(reader.Item("GLDebitAccount")) Then
                            GLDebitAccount = "49999"
                        Else
                            GLDebitAccount = reader.Item("GLDebitAccount")
                        End If
                        If IsDBNull(reader.Item("GLCreditAccount")) Then
                            GLCreditAccount = "12100"
                        Else
                            GLCreditAccount = reader.Item("GLCreditAccount")
                        End If
                        If IsDBNull(reader.Item("CertificationType")) Then
                            CertificationType = "0"
                        Else
                            CertificationType = reader.Item("CertificationType")
                        End If
                        If IsDBNull(reader.Item("SOLineNumber")) Then
                            PLSOLineNumber = 0
                        Else
                            PLSOLineNumber = reader.Item("SOLineNumber")
                        End If
                        If IsDBNull(reader.Item("SerialNumber")) Then
                            SerialNumber = ""
                        Else
                            SerialNumber = reader.Item("SerialNumber")
                        End If
                    Else
                        ItemID = ""
                        Description = ""
                        Quantity = 0
                        Price = 0
                        SalesTax = 0
                        ExtendedAmount = 0
                        LineComment = ""
                        LineWeight = 0
                        LineBoxes = 0
                        GLDebitAccount = "49999"
                        GLCreditAccount = "12100"
                        CertificationType = "0"
                        PLSOLineNumber = 0
                        SerialNumber = ""
                    End If
                    reader.Close()
                    con.Close()
                    '****************************************************************************************************
                    'If TFF do not write to sales tax lines
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        SalesTax = 0
                    End If

                    'SalesTax = Math.Round(SalesTax, 2)
                    ExtendedAmount = Math.Round(ExtendedAmount, 2)
                    '************************************************************************************************
                    Try
                        'Write Pick List Line data to Shipment Line Table
                        cmd = New SqlCommand("Insert Into ShipmentLineTable(ShipmentNumber, ShipmentLineNumber, PartNumber, PartDescription, QuantityShipped, Price, LineComment, LineWeight, LineBoxes, SalesTax, ExtendedAmount, LineStatus, DivisionID, GLDebitAccount, GLCreditAccount, CertificationType, ExtendedCOS, SOLineNumber, SerialNumber, Dropship) Values (@ShipmentNumber, @ShipmentLineNumber, @PartNumber, @PartDescription, @QuantityShipped, @Price, @LineComment, @LineWeight, @LineBoxes, @SalesTax, @ExtendedAmount, @LineStatus, @DivisionID, @GLDebitAccount, @GLCreditAccount, @CertificationType, @ExtendedCOS, @SOLineNumber, @SerialNumber, @Dropship)", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                            .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                            .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                            .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                            .Add("@Price", SqlDbType.VarChar).Value = Price
                            .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                            .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                            .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                            .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                            .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                            .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                            .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                            .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                            .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                            .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                            .Add("@SerialNumber", SqlDbType.VarChar).Value = SerialNumber
                            .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As System.Exception
                        'Write Pick List Line data to Shipment Line Table
                        cmd = New SqlCommand("UPDATE ShipmentLineTable SET PartNumber = @PartNumber, PartDescription = @PartDescription, QuantityShipped = @QuantityShipped, Price = @Price, LineComment = @LineComment, LineWeight = @LineWeight, LineBoxes = @LineBoxes, SalesTax = @SalesTax, ExtendedAmount = @ExtendedAmount, LineStatus = @LineStatus, GLDebitAccount = @GLDebitAccount, GLCreditAccount = @GLCreditAccount, CertificationType = @CertificationType, ExtendedCOS = @ExtendedCOS, SOLineNumber = @SOLineNumber, SerialNumber = @SerialNumber, Dropship = @Dropship WHERE ShipmentNumber = @ShipmentNumber AND ShipmentLineNumber = @ShipmentLineNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                            .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                            .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                            .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                            .Add("@Price", SqlDbType.VarChar).Value = Price
                            .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                            .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                            .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                            .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                            .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                            .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                            .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                            .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                            .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                            .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                            .Add("@SerialNumber", SqlDbType.VarChar).Value = SerialNumber
                            .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    End Try
                    '************************************************************************************************
                    ShipmentLineNumber = ShipmentLineNumber + 1
                Next i
                '****************************************************************************************************
                'Total Lines to get Shipment Header Totals
                'Extract Totals to write to Shipment Header Table
                Dim LineProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber"
                Dim LineProductTotalCommand As New SqlCommand(LineProductTotalStatement, con)
                LineProductTotalCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber

                Dim LineProductWeightStatement As String = "SELECT SUM(LineWeight) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber"
                Dim LineProductWeightCommand As New SqlCommand(LineProductWeightStatement, con)
                LineProductWeightCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber

                Dim LineSalesTaxStatement As String = "SELECT SUM(SalesTax) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber"
                Dim LineSalesTaxCommand As New SqlCommand(LineSalesTaxStatement, con)
                LineSalesTaxCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LineProductTotal = CDbl(LineProductTotalCommand.ExecuteScalar)
                Catch ex As System.Exception
                    LineProductTotal = 0
                End Try
                Try
                    LineProductWeight = CDbl(LineProductWeightCommand.ExecuteScalar)
                Catch ex As System.Exception
                    LineProductWeight = 0
                End Try
                Try
                    LineSalesTax = CDbl(LineSalesTaxCommand.ExecuteScalar)
                Catch ex As System.Exception
                    LineSalesTax = 0
                End Try
                con.Close()
                '****************************************************************************************************
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    If chkAddPST.Checked = True Then
                        PSTExtendedAmount = 0.07 * LineProductTotal
                        LineSalesTax = 0.05 * LineProductTotal
                        HSTExtendedAmount = 0
                    ElseIf chkAddHST.Checked = True Then
                        HSTExtendedAmount = Val(txtHSTRate.Text) * LineProductTotal
                        PSTExtendedAmount = 0
                        LineSalesTax = 0
                    Else
                        HSTExtendedAmount = 0
                        PSTExtendedAmount = 0
                        LineSalesTax = LineProductTotal * 0.05
                    End If

                    'Get Tax Totals if Canadian
                    ShipmentTotal = LineSalesTax + PSTExtendedAmount + HSTExtendedAmount + LineProductTotal + Val(txtFreightCharges.Text)

                    LineSalesTax = Math.Round(LineSalesTax, 2)
                    PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
                    HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)
                    LineProductTotal = Math.Round(LineProductTotal, 2)
                    ShipmentTotal = Math.Round(ShipmentTotal, 2)
                Else
                    'Get Tax Totals if American
                    ShipmentTotal = LineSalesTax + LineProductTotal + Val(txtFreightCharges.Text)

                    LineSalesTax = Math.Round(LineSalesTax, 2)
                    LineProductTotal = Math.Round(LineProductTotal, 2)
                    ShipmentTotal = Math.Round(ShipmentTotal, 2)
                End If
                '****************************************************************************************************
                'Update Totals in Shipment Header Table
                cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, ShippingWeight = @ShippingWeight, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = LineProductTotal
                    .Add("@TaxTotal", SqlDbType.VarChar).Value = LineSalesTax
                    .Add("@ShipmentTotal", SqlDbType.VarChar).Value = ShipmentTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = LineProductWeight
                    .Add("@Tax2Total", SqlDbType.VarChar).Value = PSTExtendedAmount
                    .Add("@Tax3Total", SqlDbType.VarChar).Value = HSTExtendedAmount
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'Update Totals in Shipment Header Table
                cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipmentTotal = ProductTotal + TaxTotal + Tax2Total + Tax3Total + FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'Update sales order header table to shipped status
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@SOStatus", SqlDbType.VarChar).Value = "SHIPPED"
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                cboSalesOrderNumber.Text = ""
                ClearVariables()
                ClearData()
                ClearDataOnChange()
                GlobalSONumber = 0
                GlobalSOShipmentNumber = 0
                GlobalSOPickNumber = 0
                ClearAllDatagrids()
                Me.Dispose()
                Me.Close()
            ElseIf button1 = DialogResult.No Then
                cboSalesOrderNumber.Text = ""
                ClearVariables()
                ClearData()
                ClearDataOnChange()
                GlobalSONumber = 0
                GlobalSOShipmentNumber = 0
                GlobalSOPickNumber = 0
                ClearAllDatagrids()
                Me.Dispose()
                Me.Close()
            End If
        End If
        '************************************************************************************************************
        'Prompt before saving
        If (SOStatus = "OPEN" Or SOStatus = "DROPSHIP") And needsSaved = True Then
            Dim button2 As DialogResult = MessageBox.Show("Do you wish to save this Sales Order?", "SAVE SALES ORDER", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2)
            If button2 = DialogResult.Yes Then
                'Check if customer exists
                If cboCustomerID.Text = "" Then
                    MsgBox("You must have a Customer selected to save.", MsgBoxStyle.OkOnly)
                    Exit Sub
                End If

                'Add or save Ship To Address if necessary
                If cboShipToID.Text = "" Then
                    'Do nothing - default ship to
                Else
                    Try
                        SaveInsertAdditionalShipTo()
                    Catch ex As System.Exception
                        SaveUpdateAdditionalShipTo()
                    End Try
                End If
                '********************************************************************************************************
                'Recalculate line totals
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '********************************************************************************************************
                'Determine Shipping Status
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    SOStatus = txtSOStatus.Text
                End If
                '********************************************************************************************************
                'Create default ship via if none selected
                If cboShipVia.Text = "" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "UPSPPDADD" And cboDivisionID.Text = "TWD" Then
                    Select Case ProductTotal
                        Case 1 To 100
                            FreightCharge = 10.0
                            txtFreightCharges.Text = FreightCharge
                        Case 101 To 200
                            FreightCharge = 15.0
                            txtFreightCharges.Text = FreightCharge
                        Case Is > 200
                            FreightCharge = 25.0
                            txtFreightCharges.Text = FreightCharge
                        Case Else
                            FreightCharge = 0
                    End Select

                    lblFreightTotal.Text = FreightCharge
                Else
                    'Continues
                End If
                '********************************************************************************************************
                'Calculate Totals and Update the Header Table
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    CalculateCanadianTotals()
                Else
                    RecalculateLineTaxTotals()
                    CalculateTotals()
                End If

                SalesOrderDate = dtpSalesOrderDate.Value
                ShippingDate = dtpShippingDate.Value
                '****************************************************************************************************
                If cboSalesPersonID.Text = "" Then
                    cboSalesPersonID.Text = EmployeeSalespersonCode
                Else
                    'Do nothing
                End If
                '****************************************************************************************************
                'Create command to save data from text boxes
                SaveUpdateSalesOrderHeader()
                '********************************************************************************************************
                'Run routine to check if there are open SO Lines
                For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                    Try
                        LineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                    Catch ex As System.Exception
                        LineNumber = 0
                    End Try

                    Dim VerifyOpenAmountStatement As String = "SELECT QuantityOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                    Dim VerifyOpenAmountCommand As New SqlCommand(VerifyOpenAmountStatement, con)
                    VerifyOpenAmountCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                    VerifyOpenAmountCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        QuantityOpen = CDbl(VerifyOpenAmountCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        QuantityOpen = 0
                    End Try
                    con.Close()

                    TotalQuantityOpen = TotalQuantityOpen + QuantityOpen
                Next
                '********************************************************************************************************
                If TotalQuantityOpen = 0 Then
                    Dim CheckSOLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
                    Dim CheckSOLinesCommand As New SqlCommand(CheckSOLinesStatement, con)
                    CheckSOLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                    CheckSOLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        CheckSOLines = CInt(CheckSOLinesCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        CheckSOLines = 0
                    End Try
                    con.Close()

                    If CheckSOLines > 0 Then
                        Dim button3 As DialogResult = MessageBox.Show("There are no Open Lines, would you like to close the Sales Order?", "CLOSE SALES ORDER", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button3)
                        If button3 = DialogResult.Yes Then
                            SOStatus = "CLOSED"

                            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                            With cmd.Parameters
                                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@SOStatus", SqlDbType.VarChar).Value = "CLOSED"
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)

                            With cmd.Parameters
                                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                            LoadSalesOrderStatus()
                        Else
                            SOStatus = txtSOStatus.Text
                        End If
                    Else
                        'Do nothing - no lines exist
                    End If
                End If
                '********************************************************************************************************
                unlockBatch()
                cboSalesOrderNumber.Text = ""
                ClearVariables()
                ClearData()
                ClearDataOnChange()
                GlobalSONumber = 0
                GlobalSOShipmentNumber = 0
                GlobalSOPickNumber = 0
                ClearAllDatagrids()
                Me.Dispose()
                Me.Close()
            ElseIf button2 = DialogResult.No Then
                unlockBatch()
                cboSalesOrderNumber.Text = ""
                ClearVariables()
                ClearData()
                ClearDataOnChange()
                GlobalSONumber = 0
                GlobalSOShipmentNumber = 0
                GlobalSOPickNumber = 0
                ClearAllDatagrids()
                Me.Dispose()
                Me.Close()
            End If
        ElseIf (SOStatus = "OPEN" Or SOStatus = "DROPSHIP") And needsSaved = False Then
            unlockBatch()
            cboSalesOrderNumber.Text = ""
            ClearVariables()
            ClearData()
            ClearDataOnChange()
            GlobalSONumber = 0
            GlobalSOShipmentNumber = 0
            GlobalSOPickNumber = 0
            ClearAllDatagrids()
            Me.Dispose()
            Me.Close()
        End If
    End Sub

    Private Sub cmdEditSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdEditSave.Click
        If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
            MsgBox("You must have a valid Sales Order Number.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        '***************************************************************************************
        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Exit Sub
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - SAVE BUTTON - Invalid Division (L8856)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '***************************************************************************************
        LockBatch()
        '***************************************************************************************
        'Validate Part Number
        Dim ValidatePartNumber As Integer = 0

        Dim ValidatePartNumberStatement As String = "SELECT COUNT(ItemID) FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
        Dim ValidatePartNumberCommand As New SqlCommand(ValidatePartNumberStatement, con)
        ValidatePartNumberCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text
        ValidatePartNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            ValidatePartNumber = CInt(ValidatePartNumberCommand.ExecuteScalar)
        Catch ex As System.Exception
            ValidatePartNumber = 0
        End Try
        con.Close()

        If ValidatePartNumber = 1 Then
            'Part Number exists - continue
        Else
            MsgBox("Part Number does not exist.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        '***************************************************************************************
        'Save all updates to Sales Order Header Table
        ValidateShippingMethod()

        If CheckShippingMethod = "EXIT SUB" Then
            MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
            CheckShippingMethod = ""
            Exit Sub
        End If
        '***************************************************************************************
        Dim CurrentQuantity As Double = 0
        Dim CheckPendingShipLineQuantity As Double = 0

        'Check to make sure quantity is greater than or equal to what has already shipped.
        Dim CheckShipLineQuantityStatement As String = "SELECT QuantityShipped FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionKey = @DivisionKey"
        Dim CheckShipLineQuantityCommand As New SqlCommand(CheckShipLineQuantityStatement, con)
        CheckShipLineQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CheckShipLineQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
        CheckShipLineQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        'Get Pending
        'Dim CheckPendingShipLineQuantityStatement As String = "SELECT PendingShippingQuantity FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionKey = @DivisionKey"
        'Dim CheckPendingShipLineQuantityCommand As New SqlCommand(CheckPendingShipLineQuantityStatement, con)
        'CheckPendingShipLineQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        'CheckPendingShipLineQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
        'CheckPendingShipLineQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckShipLineQuantity = CDbl(CheckShipLineQuantityCommand.ExecuteScalar)
        Catch ex As System.Exception
            CheckShipLineQuantity = 0
        End Try
        'Try
        'CheckPendingShipLineQuantity = CDbl(CheckPendingShipLineQuantityCommand.ExecuteScalar)
        'Catch ex As System.Exception
        'CheckPendingShipLineQuantity = 0
        'End Try
        con.Close()

        CurrentQuantity = Val(txtEditQuantity.Text)

        If CurrentQuantity < CheckShipLineQuantity Then
            MsgBox("You cannot change this quantity to less than have already been shipped.", MsgBoxStyle.OkOnly)
            Exit Sub
        Else
            'Add or save Ship To Address if necessary
            If cboShipToID.Text = "" Then
                'Do nothing - default ship to
            Else
                Try
                    SaveInsertAdditionalShipTo()
                Catch ex As System.Exception
                    SaveUpdateAdditionalShipTo()
                End Try
            End If
            '***************************************************************************************
            'Set default delivery type for companies
            If cboShipVia.Text = "" And cboDivisionID.Text = "CBS" Then
                cboShipVia.Text = "Will Call"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "SLC" Then
                cboShipVia.Text = "SEE SALESMAN"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ATL" Then
                cboShipVia.Text = "Delivery"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWE" Then
                cboShipVia.Text = "Delivery"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWD" Then
                cboShipVia.Text = ""
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CHT" Then
                cboShipVia.Text = "Delivery"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "HOU" Then
                cboShipVia.Text = "Delivery"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFT" Then
                cboShipVia.Text = "Delivery"
            ElseIf cboShipVia.Text = "" And (cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB") Then
                cboShipVia.Text = "Delivery"
            ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CGO" Then
                cboShipVia.Text = "Delivery"
            Else
                'Do nothing
            End If
            '***************************************************************************************
            SalesOrderDate = dtpSalesOrderDate.Value
            ShippingDate = dtpShippingDate.Value
            '***************************************************************************************
            If txtSOStatus.Text = "SHIPPED" Then
                'SO Status is correct
            ElseIf txtSOStatus.Text = "OPEN" Then
                'Determine Shipping Status (if changed)
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    txtSOStatus.Text = "OPEN"
                End If
            Else
                'SO Status is correct
            End If
            '***************************************************************************************
            'Load GL Inventory Account for specific Item
            LoadEditGLAccountNumber()
            '***************************************************************************************
            'Load Previous totals
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If
            '***************************************************************************************
            'Update Sales Order Header Table
            SOStatus = txtSOStatus.Text

            SaveUpdateSalesOrderHeader()
            '***************************************************************************************
            'Get FIFO Cost 
            '******************************************************************************************************************************************
            'Determine FIFO Cost on Part Number to remove from Inventory
            Dim TotalQuantityShipped As Double
            '******************************************************************************************************************************************
            'Determine Total Quantity Shipped
            Dim TotalQuantityShippedStatement As String = "SELECT SUM(QuantityShipped) FROM ShipmentLineTable WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID"
            Dim TotalQuantityShippedCommand As New SqlCommand(TotalQuantityShippedStatement, con)
            TotalQuantityShippedCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text
            TotalQuantityShippedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                TotalQuantityShipped = CDbl(TotalQuantityShippedCommand.ExecuteScalar)
            Catch ex As System.Exception
                TotalQuantityShipped = 1
            End Try
            con.Close()

            TotalQuantityShipped = TotalQuantityShipped - Val(txtEditQuantity.Text)
            '******************************************************************************************************************************************
            'Determine Item Cost where Quantity Shipped falls in the Inventory Costing Table
            Dim ItemCostStatement As String = "SELECT ItemCost FROM InventoryCosting WHERE PartNumber = @PartNumber AND DivisionID = @DivisionID AND @TotalQuantityShipped BETWEEN LowerLimit AND UpperLimit"
            Dim ItemCostCommand As New SqlCommand(ItemCostStatement, con)
            ItemCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text
            ItemCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            ItemCostCommand.Parameters.Add("@TotalQuantityShipped", SqlDbType.VarChar).Value = TotalQuantityShipped

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                FIFOCost = CDbl(ItemCostCommand.ExecuteScalar)
            Catch ex As System.Exception
                FIFOCost = 0
            End Try
            con.Close()

            FIFOExtendedAmount = FIFOCost * Val(txtEditQuantity.Text)
            '*****************************************************************************************************************************************
            'If FIFO Cost is Zero for Inventory Items (excluding Ferrules), use Last Purchase Cost
            If FIFOCost = 0 Then
                If EditItemClass <> "FERRULE" And EditItemClass <> "WC FERRULES" And EditItemClass <> "WC WELD TILES" Then
                    Dim MAXDateStatement As String = "SELECT MAX(PurchaseOrderHeaderKey) FROM PurchaseOrderLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                    Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                    MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    MAXDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        MAXDate = 0
                    End Try
                    con.Close()

                    Dim LastPriceStatement As String = "SELECT UnitCost FROM PurchaseOrderLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND PurchaseOrderHeaderKey = @PurchaseOrderHeaderKey"
                    Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                    LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text
                    LastPriceCommand.Parameters.Add("@PurchaseOrderHeaderKey", SqlDbType.VarChar).Value = MAXDate

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        FIFOLastPurchaseCost = CDbl(LastPriceCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        FIFOLastPurchaseCost = 0
                    End Try
                    con.Close()

                    FIFOCost = FIFOLastPurchaseCost
                    FIFOExtendedAmount = FIFOCost * Val(txtEditQuantity.Text)

                    If FIFOCost = 0 Then

                        Dim TransactionCostStatement As String = "SELECT MAX(ItemCost) FROM InventoryTransactionTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                        Dim TransactionCostCommand As New SqlCommand(TransactionCostStatement, con)
                        TransactionCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        TransactionCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            FIFOTransactionCost = CDbl(TransactionCostCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            FIFOTransactionCost = 0
                        End Try
                        con.Close()

                        FIFOCost = FIFOTransactionCost
                        FIFOExtendedAmount = FIFOCost * Val(txtEditQuantity.Text)
                    End If

                    'If FIFO Cost = 0, pull Standard Cost from Item List
                    If FIFOCost = 0 Then
                        Dim StandardCostStatement As String = "SELECT StandardCost FROM ItemList WHERE DivisionID = @DivisionID AND ItemID = @ItemID"
                        Dim StandardCostCommand As New SqlCommand(StandardCostStatement, con)
                        StandardCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        StandardCostCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            StandardCost = CDbl(StandardCostCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            StandardCost = 0
                        End Try
                        con.Close()

                        FIFOCost = StandardCost
                        FIFOExtendedAmount = FIFOCost * Val(txtEditQuantity.Text)
                    End If
                ElseIf EditItemClass = "WC FERRULES" Or EditItemClass = "WC WELD TILES" Then
                    Dim MAXDateStatement As String = "SELECT MAX(TransactionNumber) FROM InventoryTransactionTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                    Dim MAXDateCommand As New SqlCommand(MAXDateStatement, con)
                    MAXDateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    MAXDateCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        MAXDate = CInt(MAXDateCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        MAXDate = 0
                    End Try
                    con.Close()

                    Dim LastPriceStatement As String = "SELECT ItemCost FROM InventoryTransactionTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND TransactionNumber = @TransactionNumber"
                    Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
                    LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text
                    LastPriceCommand.Parameters.Add("@TransactionNumber", SqlDbType.VarChar).Value = MAXDate

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        FIFOLastPurchaseCost = CDbl(LastPriceCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        FIFOLastPurchaseCost = 0
                    End Try
                    con.Close()

                    FIFOCost = FIFOLastPurchaseCost
                    FIFOExtendedAmount = FIFOCost * Val(txtEditQuantity.Text)

                    If FIFOCost = 0 Then

                        Dim TransactionCostStatement As String = "SELECT MAX(ItemCost) FROM InventoryTransactionTable WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber"
                        Dim TransactionCostCommand As New SqlCommand(TransactionCostStatement, con)
                        TransactionCostCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        TransactionCostCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboEditPartNumber.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            FIFOTransactionCost = CDbl(TransactionCostCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            FIFOTransactionCost = 0
                        End Try
                        con.Close()

                        FIFOCost = FIFOTransactionCost
                        FIFOExtendedAmount = FIFOCost * Val(txtEditQuantity.Text)
                    End If
                Else
                    'Do nothing - Ferrules have 0 Cost
                End If
            Else
                'Do nothing - continue
            End If

            'Round FIFO Amount to two digits
            FIFOExtendedAmount = Math.Round(FIFOExtendedAmount, 2)
            '******************************************************************************************************************************************
            'Calculate Line Totals

            SaleAmount = Val(txtEditPrice.Text) * Val(txtEditQuantity.Text)
            SalesTax = TaxRate * SaleAmount
            '******************************************************************************************************************************************
            'Get New Line Weight and Line Boxes
            'Get box weight and box count for line
            Dim EditBoxWeight As Double = 0
            Dim EditNewBoxCount As Integer = 0
            Dim EditNewPieceWeight As Double = 0
            Dim EditNewLineQuantity As Double = 0
            Dim EditNewLineBoxes As Double = 0

            EditNewLineQuantity = Val(txtEditQuantity.Text)

            Dim NewBoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim NewBoxWeightCommand As New SqlCommand(NewBoxWeightStatement, con)
            NewBoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text
            NewBoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            Dim NewBoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim NewBoxCountCommand As New SqlCommand(NewBoxCountStatement, con)
            NewBoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text
            NewBoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            Dim NewPieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim NewPieceWeightCommand As New SqlCommand(NewPieceWeightStatement, con)
            NewPieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text
            NewPieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                EditBoxWeight = CDbl(NewBoxWeightCommand.ExecuteScalar)
            Catch ex As System.Exception
                EditBoxWeight = 0
            End Try
            Try
                EditNewBoxCount = CInt(NewBoxCountCommand.ExecuteScalar)
            Catch ex As System.Exception
                EditNewBoxCount = 0
            End Try
            Try
                EditNewPieceWeight = CDbl(NewPieceWeightCommand.ExecuteScalar)
            Catch ex As System.Exception
                EditNewPieceWeight = 0
            End Try
            con.Close()

            If EditBoxWeight = 0 Or EditNewBoxCount = 0 Then
                TotalWeight = EditNewLineQuantity * EditNewPieceWeight
                EditNewLineBoxes = EditNewLineQuantity / EditNewBoxCount
                EditNewLineBoxes = Math.Round(EditNewLineBoxes, 1)
            Else
                TotalWeight = (EditNewLineQuantity / EditNewBoxCount) * EditBoxWeight
                EditNewLineBoxes = EditNewLineQuantity / EditNewBoxCount
                EditNewLineBoxes = Math.Round(EditNewLineBoxes, 1)
            End If
            '******************************************************************************************************************************************
            Try
                Dim CurrentLineStatus As String

                If txtSOStatus.Text = "DROPSHIP" Then
                    CurrentLineStatus = "DROPSHIP"
                Else
                    CurrentLineStatus = "OPEN"
                End If

                'Write Data to Sales Order Line Database Table (Line Items)
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ItemID = @ItemID, Description = @Description, Quantity = @Quantity, Price = @Price, LineComment = @LineComment, SalesTax = @SalesTax, ExtendedAmount = @ExtendedAmount, LineWeight = @LineWeight, LineBoxes = @LineBoxes, LineStatus = @LineStatus, DebitGLAccount = @DebitGLAccount, CreditGLAccount = @CreditGLAccount, LeadTime = @LeadTime, CertificationType = @CertificationType, EstExtendedCOS = @EstExtendedCOS, ShippedPrevious = @ShippedPrevious WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
                    .Add("@ItemID", SqlDbType.VarChar).Value = cboEditPartNumber.Text
                    .Add("@Description", SqlDbType.VarChar).Value = cboEditPartDescription.Text
                    .Add("@Quantity", SqlDbType.VarChar).Value = Val(txtEditQuantity.Text)
                    .Add("@Price", SqlDbType.VarChar).Value = Val(txtEditPrice.Text)
                    .Add("@LineComment", SqlDbType.VarChar).Value = txtEditLineComments.Text
                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = SaleAmount
                    .Add("@LineWeight", SqlDbType.VarChar).Value = TotalWeight
                    .Add("@LineBoxes", SqlDbType.VarChar).Value = UpdatedLineBoxCount
                    .Add("@LineStatus", SqlDbType.VarChar).Value = CurrentLineStatus
                    .Add("@DebitGLAccount", SqlDbType.VarChar).Value = "49999"
                    .Add("@CreditGLAccount", SqlDbType.VarChar).Value = EditGLCreditAccount
                    .Add("@LeadTime", SqlDbType.VarChar).Value = txtEditLeadTime.Text
                    .Add("@CertificationType", SqlDbType.VarChar).Value = cboEditCertType.Text
                    .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = FIFOExtendedAmount
                    .Add("@ShippedPrevious", SqlDbType.VarChar).Value = 0
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As System.Exception

            End Try
            '***************************************************************************************
            'Update Line table in case of datagrid changes
            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '***************************************************************************************
            'Calculate tax for canadian customers
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If
            '***************************************************************************************
            'After calculated totals, update Header Table
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                'UPDATE Header Table based on line amounts
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                    .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                    .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                    .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Else
                'UPDATE Header Table based on line amounts
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                    .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = 0
                    .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = 0
                    .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            End If
            '***************************************************************************************
            'Calculate tax for canadian customers
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If
            '***********************************************************************
            'Check Line Status and open or close lines as needed
            Dim CheckOpenQuantity As Double = 0

            Dim CheckOpenQuantityStatement As String = "SELECT QuantityOpen FROM SalesOrderQuantityStatus WHERE DivisionKey = @DivisionKey AND SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
            Dim CheckOpenQuantityCommand As New SqlCommand(CheckOpenQuantityStatement, con)
            CheckOpenQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            CheckOpenQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CheckOpenQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckOpenQuantity = CDbl(CheckOpenQuantityCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckOpenQuantity = 0
            End Try
            con.Close()

            If CheckOpenQuantity = 0 Then
                'Update Line table in case of datagrid changes
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Else
                'Update Line table in case of datagrid changes
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = Val(cboDeleteLine.Text)
                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            End If
            '***************************************************************************************
            'Reload datagrid with any changes
            ShowData()
            '***************************************************************************************
            'Since line changes were made, set variable to YES
            LineChangesMade = "YES"
            '***************************************************************************************

            ''updates the notifications to reflect the change
            UpdateNotifications(cboEditPartNumber.Text)

            MsgBox("Data has been saved.", MsgBoxStyle.OkOnly)
        End If
    End Sub

    Private Sub cmdPrint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPrint.Click
        If cboSalesOrderNumber.Text = "" Or cboCustomerID.Text = "" Then
            MsgBox("You must have a valid Sales Order # selected.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        '**************************************************************************************
        ValidateShippingMethod()

        If CheckShippingMethod = "EXIT SUB" Then
            MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
            CheckShippingMethod = ""
            Exit Sub
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - PRINT BUTTON - Invalid Division (L9419)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        If Not isSomeoneEditing() Then
            '***************************************************************************************
            If txtSOStatus.Text = "SHIPPED" Then
                'SO Status is correct
            ElseIf txtSOStatus.Text = "OPEN" Then
                'Determine Shipping Status (if changed)
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    txtSOStatus.Text = "OPEN"
                End If
            Else
                'SO Status is correct
            End If
            '***************************************************************************************************
            If txtSOStatus.Text = "OPEN" Or txtSOStatus.Text = "DROPSHIP" Then
                'Add or save Ship To Address if necessary
                If cboShipToID.Text = "" Then
                    'Do nothing - default ship to
                Else
                    Try
                        SaveInsertAdditionalShipTo()
                    Catch ex As System.Exception
                        SaveUpdateAdditionalShipTo()
                    End Try
                End If
                '***************************************************************************************************
                'Recalculate line totals
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '***************************************************************************************************
                'Set default delivery type for companies
                If cboShipVia.Text = "" And cboDivisionID.Text = "CBS" Then
                    cboShipVia.Text = "Will Call"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "SLC" Then
                    cboShipVia.Text = "SEE SALESMAN"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ATL" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWE" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWD" Then
                    cboShipVia.Text = ""
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CHT" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "HOU" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFT" Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And (cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB") Then
                    cboShipVia.Text = "Delivery"
                ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CGO" Then
                    cboShipVia.Text = "Delivery"
                Else
                    'Do nothing
                End If
                '***************************************************************************************************
                'Load Sales Order Tax Rate based on user entry
                LoadSalesOrderTaxRates()
                '********************************************************************************************************
                'Calculate Totals and Update the Header Table
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    CalculateCanadianTotals()
                Else
                    RecalculateLineTaxTotals()
                    CalculateTotals()
                End If
                '****************************************************************************************************
                If cboSalesPersonID.Text = "" Then
                    cboSalesPersonID.Text = EmployeeSalespersonCode
                Else
                    'Do nothing
                End If

                SalesOrderDate = dtpSalesOrderDate.Value
                ShippingDate = dtpShippingDate.Value
                '****************************************************************************************************
                'Save all updates to Sales Order Header Table
                SOStatus = txtSOStatus.Text

                SaveUpdateSalesOrderHeader()
            End If
        End If
        '***************************************************************************************************
        'Get Sales Confirmation Email

        Dim GetConfirmationEmail As String = ""

        Dim GetConfirmationEmailString As String = "SELECT ConfirmationEmail FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
        Dim GetConfirmationEmailCommand As New SqlCommand(GetConfirmationEmailString, con)
        GetConfirmationEmailCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        GetConfirmationEmailCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetConfirmationEmail = CStr(GetConfirmationEmailCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetConfirmationEmail = ""
        End Try
        con.Close()

        EmailCustomerConfirmations = GetConfirmationEmail
        '***************************************************************************************************
        'Choose correct print form
        If cboDivisionID.Text = "TFP" Then
            'Get FOX Number
            Dim GetFOXNumber As Integer = 0

            Dim GetFOXNumberString As String = "SELECT FOXNumber FROM FOXTable WHERE OrderReferenceNumber = @OrderReferenceNumber AND DivisionID = @DivisionID"
            Dim GetFOXNumberCommand As New SqlCommand(GetFOXNumberString, con)
            GetFOXNumberCommand.Parameters.Add("@OrderReferenceNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            GetFOXNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetFOXNumber = CInt(GetFOXNumberCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetFOXNumber = 0
            End Try
            con.Close()

            GlobalSONumber = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text
            GlobalTFPSOPrintForm = "TFP Acknowledgement"
            GlobalFOXNumber = GetFOXNumber

            Using NewPrintTFAcknowledgement As New PrintTFAcknowledgement
                Dim result = NewPrintTFAcknowledgement.ShowDialog()
            End Using
        Else
            GlobalSONumber = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text

            'Choose the correct Print Form (REMOTE or LOCAL)

            'Get Login Type
            Dim GetLoginType As String = ""

            Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
            Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
            GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetLoginType = ""
            End Try
            con.Close()

            If GetLoginType = "REMOTE" Then
                Using NewPrintSalesOrderRemote As New PrintSalesOrderRemote
                    Dim result = NewPrintSalesOrderRemote.ShowDialog()
                End Using
            Else
                Using NewPrintSalesOrder As New PrintSalesOrder
                    Dim result = NewPrintSalesOrder.ShowDialog()
                End Using
            End If
        End If
    End Sub

    Private Sub cmdExpediteOrder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdExpediteOrder.Click
        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Exit Sub
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - EXPEDITE - Invalid Division (L9595)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        If cboShipVia.Text = "" Then
            MsgBox("You must select a Ship Via", MsgBoxStyle.OkOnly)
            Exit Sub
        End If

        LineChangesMade = "YES"
        '******************************************************************************************************
        'Check if PREPAID/ADD Amount is in and prompt
        If cboShipMethod.Text = "PREPAID/ADD" And Val(txtFreightCharges.Text) = 0 Then
            'Get PREPAID/ADD TYPE
            Dim GetPPDType As String = ""

            Dim GetPPDTypeStatement As String = "SELECT ShipMethodType FROM ShipMethod WHERE ShipMethID = @ShipMethID"
            Dim GetPPDTypeCommand As New SqlCommand(GetPPDTypeStatement, con)
            GetPPDTypeCommand.Parameters.Add("@ShipMethID", SqlDbType.VarChar).Value = cboShipVia.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetPPDType = CStr(GetPPDTypeCommand.ExecuteScalar)
            Catch ex As Exception
                GetPPDType = ""
            End Try
            con.Close()

            If GetPPDType = "SP" Then
                'Skip
            Else
                Dim button2 As DialogResult = MessageBox.Show("Do you need to add the freight?", "ADD FREIGHT", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                If button2 = DialogResult.Yes Then
                    tabExpandedMenu.SelectedIndex = 1
                    txtFreightCharges.BackColor = Color.Yellow
                    txtFreightCharges.Focus()
                    Exit Sub
                ElseIf button2 = DialogResult.No Then
                    'Countinue to shipment
                End If
            End If
        End If
        '******************************************************************************************************
        'Validate Lines
        Dim CountSOLines As Integer = 0

        Dim CountSOLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim CountSOLinesCommand As New SqlCommand(CountSOLinesStatement, con)
        CountSOLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CountSOLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountSOLines = CInt(CountSOLinesCommand.ExecuteScalar)
        Catch ex As Exception
            CountSOLines = 0
        End Try
        con.Close()

        If CountSOLines = 0 Then
            MsgBox("This SO has no line data and cannot be expedited to shipping.", MsgBoxStyle.OkOnly)
            Exit Sub
        Else
            'Do nothing
        End If
        '******************************************************************************************************
        'Validate Shipping Method
        ValidateShippingMethod()

        If CheckShippingMethod = "EXIT SUB" Then
            MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
            CheckShippingMethod = ""
            Exit Sub
        End If
        '******************************************************************************************************
        'Verify that customer is not on hold
        If OnHoldStatus = "YES" Or AccountingHold = "YES" Then
            MsgBox("Customer is on Credit Hold - to remove hold, go to Customer Form.", MsgBoxStyle.OkOnly)
            Exit Sub
        Else
            'Proceed
        End If
        '******************************************************************************************************
        'Verify Country Code exists for the ship to address
        If txtSTCountry.Text = "" And txtSTState.Text <> "" Then
            StateCode = txtSTState.Text
            LoadCountryCodeFromState()

            txtSTCountry.Text = CountryCodeFromState
            cboSTCountryName.Text = CountryNameFromState
        End If
        '******************************************************************************************************
        If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TST" Then
            'Check for zero pricing
            Dim CountPartNumber As Integer = 0

            Dim CountPartNumberStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderLineQueryNoQOH WHERE SalesOrderKey = @SalesOrderKey And DivisionKey = @DivisionKey AND Price = @Price AND LineStatus <> @LineStatus AND CustomerClass = 'STANDARD' AND ItemID NOT LIKE 'FER%' AND ItemID NOT LIKE 'BOX%' AND ItemID <> 'PALLETS' AND ItemID <> 'MISC TW SALES'"
            Dim CountPartNumberCommand As New SqlCommand(CountPartNumberStatement, con)
            CountPartNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CountPartNumberCommand.Parameters.Add("@Price", SqlDbType.VarChar).Value = 0
            CountPartNumberCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            CountPartNumberCommand.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CountPartNumber = CInt(CountPartNumberCommand.ExecuteScalar)
            Catch ex As System.Exception
                CountPartNumber = 0
            End Try
            con.Close()

            If CountPartNumber = 0 Then
                'Skip - no zero price lines
            Else
                Dim button7 As DialogResult = MessageBox.Show("There are one or more ZERO Price Items on this order. Do you wish to exit and re-check?", "ZERO PRICE ITEMS", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                If button7 = DialogResult.Yes Then
                    Exit Sub
                ElseIf button7 = DialogResult.No Then
                    'Continue
                End If
            End If

            Try
                If cboShipVia.Text.StartsWith("UPS-") Then
                    txtSTAddress1.Text = txtSTAddress1.Text.Replace(vbCr, " ")
                    txtSTAddress1.Text = txtSTAddress1.Text.Replace(vbCrLf, " ")
                    txtSTAddress1.Text = txtSTAddress1.Text.Replace(vbLf, " ")
                    txtSTAddress2.Text = txtSTAddress2.Text.Replace(vbCr, " ")
                    txtSTAddress2.Text = txtSTAddress2.Text.Replace(vbCrLf, " ")
                    txtSTAddress2.Text = txtSTAddress2.Text.Replace(vbLf, " ")

                    If txtSTAddress1.TextLength > 30 Or txtSTAddress2.TextLength > 30 Then
                        Dim button55 As DialogResult = MessageBox.Show("UPS Labels limits address 1 and address 2 to 30 characters. Do you wish to continue? (Field will be truncated if yes.", "TEXT FIELD LENGTH EXCEEDED", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                        If button55 = DialogResult.Yes Then
                            'Skip
                        ElseIf button55 = DialogResult.No Then
                            Exit Sub
                        End If
                    End If
                Else
                    'Skip
                End If
            Catch ex As Exception
                'Skip
            End Try
        End If
        '******************************************************************************************************
        'Prompt before expediting
        Dim button As DialogResult = MessageBox.Show("Do you wish to Expedite this Sales Order to Shipping?", "EXPEDITE TO SHIPPING", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
        If button = DialogResult.Yes Then

            LockBatch()

            If canExpediteOrder() Then
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'Load Tax rates based on User Entry
                LoadSalesOrderTaxRates()
                '****************************************************************************************************
                'Calculate Totals and Update the Header Table
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    CalculateCanadianTotals()
                Else
                    RecalculateLineTaxTotals()
                    CalculateTotals()
                End If
                '****************************************************************************************************
                'Add or save Ship To Address if necessary
                If cboShipToID.Text = "" Then
                    'Do nothing - default ship to
                Else
                    Try
                        SaveInsertAdditionalShipTo()
                    Catch ex As System.Exception
                        SaveUpdateAdditionalShipTo()
                    End Try
                End If
                '***************************************************************************************************
                'Save Header Data
                SaveUpdateSalesOrderHeader()
                '****************************************************************************************************
                SalesOrderDate = dtpSalesOrderDate.Value
                ShippingDate = dtpShippingDate.Value
                '****************************************************************************************************
                If cboSalesPersonID.Text = "" Then
                    cboSalesPersonID.Text = EmployeeSalespersonCode
                Else
                    'Do nothing
                End If
                '****************************************************************************************************
                'Check to see if there is a pending shipment - update existing shipment with changes from the Sales Order
                Dim CheckIfShipmentExistsStatement As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND ShipmentStatus = @ShipmentStatus And DivisionID = @DivisionID"
                Dim CheckIfShipmentExistsCommand As New SqlCommand(CheckIfShipmentExistsStatement, con)
                CheckIfShipmentExistsCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                CheckIfShipmentExistsCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                CheckIfShipmentExistsCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CheckIfShipmentExists = CInt(CheckIfShipmentExistsCommand.ExecuteScalar)
                Catch ex As System.Exception
                    CheckIfShipmentExists = 0
                End Try
                con.Close()

                If CheckIfShipmentExists = 0 And txtSOStatus.Text <> "SHIPPED" Then
                    LineChangesMade = "YES"
                    '****************************************************************************************************
                    If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                        ShipToName = cboCustomerName.Text
                    Else
                        ShipToName = txtSTName.Text
                    End If
                    '****************************************************************************************************
                    If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TFP" Then
                        'Truweld/Trufit Count Number
                        Dim GetTWDCountNumberStatement As String = "SELECT MAX(RunningCount) FROM PickListHeaderTable"
                        Dim GetTWDCountNumberCommand As New SqlCommand(GetTWDCountNumberStatement, con)

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            LastTWDCountNumber = CInt(GetTWDCountNumberCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            LastTWDCountNumber = 10000
                        End Try
                        con.Close()

                        TWDCountNumber = LastTWDCountNumber + 1
                    Else
                        TWDCountNumber = 0
                    End If
                    '****************************************************************************************************
                    If cboShipVia.Text.StartsWith("UPS-") Or cboShipVia.Text.StartsWith("FDX-") Then
                        If Val(txtDeclaredValue.Text) > 0 Then
                            DeclaredValue = Val(txtDeclaredValue.Text)
                        Else
                            If OrderTotal > 101 Then
                                DeclaredValue = OrderTotal
                            Else
                                DeclaredValue = 0
                            End If
                        End If
                    Else
                        DeclaredValue = 0
                    End If
                    '****************************************************************************************************
                    If DeclaredValue > 0 Then
                        DeclaredValueAdded = "Y"
                    Else
                        DeclaredValueAdded = "N"
                    End If
                    '****************************************************************************************************
                    'Use new Batch Number for current selection
                    Dim PLBatchNumberStatement As String = "SELECT MAX(BatchNumber) FROM PickListHeaderTable"
                    Dim PLBatchNumberCommand As New SqlCommand(PLBatchNumberStatement, con)

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        LastPickBatchNumber = CInt(PLBatchNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LastPickBatchNumber = 874000000
                    End Try
                    con.Close()

                    NextPickBatchNumber = LastPickBatchNumber + 1
                    '****************************************************************************************************
                    'Create new Pick Ticket Number
                    Dim PickTicketNumberStatement As String = "SELECT MAX(PickListHeaderKey) FROM PickListHeaderTable"
                    Dim PickTicketNumberCommand As New SqlCommand(PickTicketNumberStatement, con)

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        LastTransactionNumber = CInt(PickTicketNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LastTransactionNumber = 660000
                    End Try
                    con.Close()

                    NextTransactionNumber = LastTransactionNumber + 1
                    GlobalPickListNumber = NextTransactionNumber
                    '****************************************************************************************************
                    Try
                        'Write Data to Pick Ticket Header Database Table
                        cmd = New SqlCommand("Insert Into PickListHeaderTable(PickListHeaderKey, SalesOrderHeaderKey, PickDate, DivisionID, Comment, PLStatus, CustomerID, CustomerPO, ShipVia, AdditionalShipTo, BatchNumber, PRONumber, SalesmanID, SpecialInstructions, ShipDate, PickCount, RunningCount, ShippingMethod, ThirdPartyShipper, ShipToName, ShipToAddress1, ShipToAddress2, ShipToCity, ShipToState, ShipToZip, ShipToCountry, ShipEmail, ShippingAccount, SpecialLabelLine1, SpecialLabelLine2, SpecialLabelLine3, DeclaredValue, DeclaredValueAdded) Values (@PickListHeaderKey, @SalesOrderHeaderKey, @PickDate, @DivisionID, @Comment, @PLStatus, @CustomerID, @CustomerPO, @ShipVia, @AdditionalShipTo, @BatchNumber, @PRONumber, @SalesmanID, @SpecialInstructions, @ShipDate, @PickCount, @RunningCount, @ShippingMethod, @ThirdPartyShipper, @ShipToName, @ShipToAddress1, @ShipToAddress2, @ShipToCity, @ShipToState, @ShipToZip, @ShipToCountry, @ShipEmail, @ShippingAccount, @SpecialLabelLine1, @SpecialLabelLine2, @SpecialLabelLine3, @DeclaredValue, @DeclaredValueAdded)", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = NextTransactionNumber
                            .Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@PickDate", SqlDbType.VarChar).Value = Today()
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                            .Add("@PLStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                            .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                            .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                            .Add("@BatchNumber", SqlDbType.VarChar).Value = NextPickBatchNumber
                            .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                            .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                            .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                            .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@PickCount", SqlDbType.VarChar).Value = 1
                            .Add("@RunningCount", SqlDbType.VarChar).Value = TWDCountNumber
                            .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                            .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                            .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                            .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                            .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                            .Add("@ShipToCity", SqlDbType.VarChar).Value = txtSTCity.Text
                            .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                            .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                            .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                            .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                            .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                            .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                            .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                            .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                            .Add("@DeclaredValue", SqlDbType.VarChar).Value = DeclaredValue
                            .Add("@DeclaredValueAdded", SqlDbType.VarChar).Value = DeclaredValueAdded
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempPickNumber As Integer = 0
                        Dim strPickNumber As String
                        TempPickNumber = NextTransactionNumber
                        strPickNumber = CStr(TempPickNumber)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Expedite SO --- Insert Pick Header Failure (L9827)"
                        ErrorReferenceNumber = "PT # " + strPickNumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()

                        MsgBox("Error creating Pick Ticket - check data and try again.", MsgBoxStyle.OkOnly)

                        'Reset SO to Open status
                        cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                        With cmd.Parameters
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()

                        txtSOStatus.Text = "OPEN"

                        Exit Sub
                    End Try

                    GlobalSOPickNumber = NextTransactionNumber
                    '********************************************************************************************************************
                    'Check to see if any lines changed
                    If LineChangesMade <> "YES" Then
                        'Skip line routine
                    Else
                        'After writing header to Pick List, extract line data and write to Pick List Line Table
                        Dim SLSalesOrderLineKey As Integer
                        Dim SLItemID, SLDescription, SLLineComment, LineCertType, GLDebitAccount, GLCreditAccount As String
                        Dim SLPrice As Double = 0
                        Dim SLOpenQuantity As Double = 0
                        Dim LineBoxWeight As Double = 0
                        Dim LineBoxCount As Double = 0
                        Dim LinePieceWeight As Double = 0
                        LineWeightOpen = 0

                        For Each LineRow As DataGridViewRow In dgvSalesOrderLines.Rows
                            Dim LineCell As DataGridViewTextBoxCell = LineRow.Cells("SalesOrderKeyColumn")
                            Dim LineCell1 As DataGridViewTextBoxCell = LineRow.Cells("OpenSOQuantityColumn")

                            If LineCell.Value = cboSalesOrderNumber.Text And LineCell1.Value > 0 Then
                                Try
                                    SLSalesOrderLineKey = LineRow.Cells("SalesOrderLineKeyColumn").Value
                                Catch ex As System.Exception
                                    SLSalesOrderLineKey = 1
                                End Try
                                Try
                                    SLItemID = LineRow.Cells("ItemIDColumn").Value
                                Catch ex As System.Exception
                                    SLItemID = ""
                                End Try
                                Try
                                    SLDescription = LineRow.Cells("DescriptionColumn").Value
                                Catch ex As System.Exception
                                    SLDescription = ""
                                End Try
                                Try
                                    SLOpenQuantity = LineRow.Cells("OpenSOQuantityColumn").Value
                                Catch ex As System.Exception
                                    SLOpenQuantity = 0
                                End Try
                                Try
                                    SLPrice = LineRow.Cells("PriceColumn").Value
                                Catch ex As System.Exception
                                    SLPrice = 0
                                End Try
                                Try
                                    SLLineComment = LineRow.Cells("LineCommentColumn").Value
                                Catch ex As System.Exception
                                    SLLineComment = ""
                                End Try
                                Try
                                    GLDebitAccount = LineRow.Cells("DebitGLAccountColumn").Value
                                Catch ex As System.Exception
                                    GLDebitAccount = "49999"
                                End Try
                                Try
                                    GLCreditAccount = LineRow.Cells("CreditGLAccountColumn").Value
                                Catch ex As System.Exception
                                    GLCreditAccount = "12100"
                                End Try
                                Try
                                    LineCertType = LineRow.Cells("CertificationTypeColumn").Value
                                Catch ex As System.Exception
                                    LineCertType = "0"
                                End Try
                                '****************************************************************************************************
                                'Extract Open Sales Tax, weights, and box counts for lines
                                Dim SalesTaxOpenStatement As String = "SELECT SalesTaxOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                                Dim SalesTaxOpenCommand As New SqlCommand(SalesTaxOpenStatement, con)
                                SalesTaxOpenCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                SalesTaxOpenCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = SLSalesOrderLineKey

                                Dim BoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim BoxCountCommand As New SqlCommand(BoxCountStatement, con)
                                BoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                BoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                Dim BoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim BoxWeightCommand As New SqlCommand(BoxWeightStatement, con)
                                BoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                BoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                Dim PieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim PieceWeightCommand As New SqlCommand(PieceWeightStatement, con)
                                PieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                PieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    SalesTaxOpen = CDbl(SalesTaxOpenCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    SalesTaxOpen = 0
                                End Try
                                Try
                                    LineBoxCount = CInt(BoxCountCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LineBoxCount = 0
                                End Try
                                Try
                                    LineBoxWeight = CDbl(BoxWeightCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LineBoxWeight = 0
                                End Try
                                Try
                                    LinePieceWeight = CDbl(PieceWeightCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LinePieceWeight = 0
                                End Try
                                con.Close()
                                '****************************************************************************************************
                                'Determine Open Box Count
                                'Avoid Divide-By-Zero Error
                                If LineBoxCount = 0 Then
                                    LineBoxesOpen = 0
                                    LineWeightOpen = LinePieceWeight * SLOpenQuantity
                                    LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                Else
                                    LineBoxesOpen = SLOpenQuantity / LineBoxCount
                                    LineBoxesOpen = Math.Round(LineBoxesOpen, 1)

                                    If LineBoxWeight = 0 Then
                                        LineWeightOpen = LinePieceWeight * SLOpenQuantity
                                        LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                    Else
                                        LineWeightOpen = LineBoxWeight * LineBoxesOpen
                                        LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                    End If
                                End If
                                '****************************************************************************************************
                                'Routine to calculate the weight of stacked pallets minus the bottom one
                                If SLItemID = "PALLET-36 X 36" Or SLItemID = "PALLET- 36 X 36 HT" Or SLItemID = "PALLETS" Or SLItemID = "PALLET- 40 X 40" Or SLItemID = "PALLET- 40 X 40 HT" Then
                                    Select Case SLItemID
                                        Case "PALLET-36 X 36"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 34
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLET- 36 X 36 HT"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 34
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLETS"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 34
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLET- 40 X 40"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 39
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLET- 40 X 40 HT"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 39
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                    End Select
                                End If
                                '****************************************************************************************************
                                'Get Quantity On Hand for Pick Ticket
                                Dim PickQOHStatement As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim PickQOHCommand As New SqlCommand(PickQOHStatement, con)
                                PickQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                PickQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    PickQOH = CDbl(PickQOHCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    PickQOH = 0
                                End Try
                                con.Close()
                                '****************************************************************************************************
                                'Get Next Line Number
                                Dim PickLineNumberStatement As String = "SELECT MAX(PickListLineKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey"
                                Dim PickLineNumberCommand As New SqlCommand(PickLineNumberStatement, con)
                                PickLineNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = NextTransactionNumber

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    LastPickLineNumber = CInt(PickLineNumberCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LastPickLineNumber = 0
                                End Try
                                con.Close()

                                NextPickLineNumber = LastPickLineNumber + 1

                                OpenExtendedAmount = SLOpenQuantity * SLPrice
                                '****************************************************************************************************
                                'Don not write sales tax to lines if Canadian
                                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                                    SalesTaxOpen = 0
                                End If
                                '****************************************************************************************************
                                Try
                                    'Write Sales Order Data to Pick List Line Table
                                    cmd = New SqlCommand("Insert Into PickListLineTable(PickListHeaderKey, PickListLineKey, ItemID, Description, Quantity, Price, SalesTax, ExtendedAmount, LineComment, LineStatus, DivisionID, LineWeight, LineBoxes, GLDebitAccount, GLCreditAccount, CertificationType, SOLineNumber, SerialNumber, QOH) Values (@PickListHeaderKey, @PickListLineKey, @ItemID, @Description, @Quantity, @Price, @SalesTax, @ExtendedAmount, @LineComment, @LineStatus, @DivisionID, @LineWeight, @LineBoxes, @GLDebitAccount, @GLCreditAccount, @CertificationType, @SOLineNumber, @SerialNumber, @QOH)", con)

                                    With cmd.Parameters
                                        .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = NextTransactionNumber
                                        .Add("@PickListLineKey", SqlDbType.VarChar).Value = NextPickLineNumber
                                        .Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                        .Add("@Description", SqlDbType.VarChar).Value = SLDescription
                                        .Add("@Quantity", SqlDbType.VarChar).Value = SLOpenQuantity
                                        .Add("@Price", SqlDbType.VarChar).Value = SLPrice
                                        .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTaxOpen
                                        .Add("@ExtendedAmount", SqlDbType.VarChar).Value = OpenExtendedAmount
                                        .Add("@LineComment", SqlDbType.VarChar).Value = SLLineComment
                                        .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                        .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeightOpen
                                        .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxesOpen
                                        .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                        .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                        .Add("@CertificationType", SqlDbType.VarChar).Value = LineCertType
                                        .Add("@SOLineNumber", SqlDbType.VarChar).Value = SLSalesOrderLineKey
                                        .Add("@SerialNumber", SqlDbType.VarChar).Value = ""
                                        .Add("@QOH", SqlDbType.VarChar).Value = PickQOH
                                    End With

                                    If con.State = ConnectionState.Closed Then con.Open()
                                    cmd.ExecuteNonQuery()
                                    con.Close()
                                Catch ex As Exception
                                    'Log error on update failure
                                    Dim TempPickNumber As Integer = 0
                                    Dim strPickNumber As String
                                    TempPickNumber = NextTransactionNumber
                                    strPickNumber = CStr(TempPickNumber)

                                    ErrorDate = Today()
                                    ErrorComment = ex.ToString()
                                    ErrorDivision = cboDivisionID.Text
                                    ErrorDescription = "Expedite SO --- Insert Pick Line Failure (L10083)"
                                    ErrorReferenceNumber = "Pick # " + strPickNumber
                                    ErrorUser = EmployeeLoginName

                                    TFPErrorLogUpdate()
                                End Try

                                'Clear Variables
                                SLItemID = ""
                                SLDescription = ""
                                SLOpenQuantity = 0
                                SLPrice = 0
                                SalesTaxOpen = 0
                                OpenExtendedAmount = 0
                                SLLineComment = ""
                                LineWeightOpen = 0
                                LineBoxesOpen = 0
                                GLDebitAccount = "49999"
                                GLCreditAccount = "12100"
                                LineCertType = "0"
                                SLSalesOrderLineKey = 0
                                SerialNumber = ""
                                PickQOH = 0
                                LinePieceWeight = 0
                                LineBoxWeight = 0
                                LineBoxCount = 0
                            End If
                        Next
                    End If
                    '****************************************************************************************************
                    If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                        ShipToName = cboCustomerName.Text
                    Else
                        ShipToName = txtSTName.Text
                    End If
                    '****************************************************************************************************
                    Dim GLBatchNumberStatement As String = "SELECT MAX(BatchNumber) FROM ShipmentHeaderTable"
                    Dim GLBatchNumberCommand As New SqlCommand(GLBatchNumberStatement, con)

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        GLBatchNumber = CInt(GLBatchNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GLBatchNumber = 880000000
                    End Try
                    con.Close()

                    NextBatchNumber = GLBatchNumber + 1
                    '****************************************************************************************************
                    'Create new Shipment Number
                    Dim ShipmentNumberStatement As String = "SELECT MAX(ShipmentNumber) FROM ShipmentHeaderTable"
                    Dim ShipmentNumberCommand As New SqlCommand(ShipmentNumberStatement, con)

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        LastShipmentNumber = CInt(ShipmentNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LastShipmentNumber = 4560000
                    End Try
                    con.Close()

                    NextShipmentNumber = LastShipmentNumber + 1
                    '****************************************************************************************************
                    Try
                        'Write Data to Shipment Header Table
                        cmd = New SqlCommand("Insert Into ShipmentHeaderTable(ShipmentNumber, SalesOrderKey, ShipDate, DivisionID, Comment, PickTicketNumber, ShipVia, PRONumber, FreightQuoteNumber, FreightQuoteAmount, FreightActualAmount, ShippingWeight, NumberOfPallets, CustomerID, ShipToID, ShipAddress1, ShipAddress2, ShipCity, ShipState, ShipZip, ShipCountry, CustomerPO, ShipmentStatus, ProductTotal, TaxTotal, ShipmentTotal, BatchNumber, SalesmanID, SpecialInstructions, Tax2Total, Tax3Total, CertsAutoGenerated, SOLog, PulledBy, CertsPulled, PackingSlip, Locked, CustomerClass, FOB, ShippingMethod, ThirdPartyShipper, ShipToName, ShipEmail, ShippingAccount, SpecialLabelLine1, SpecialLabelLine2, SpecialLabelLine3) Values (@ShipmentNumber, @SalesOrderKey, @ShipDate, @DivisionID, @Comment, @PickTicketNumber, @ShipVia, @PRONumber, @FreightQuoteNumber, @FreightQuoteAmount, @FreightActualAmount, @ShippingWeight, @NumberOfPallets, @CustomerID, @ShipToID, @ShipAddress1, @ShipAddress2, @ShipCity, @ShipState, @ShipZip, @ShipCountry, @CustomerPO, @ShipmentStatus, @ProductTotal, @TaxTotal, @ShipmentTotal, @BatchNumber, @SalesmanID, @SpecialInstructions, @Tax2Total, @Tax3Total, @CertsAutoGenerated, @SOLog, @PulledBy, @CertsPulled, @PackingSlip, @Locked, @CustomerClass, @FOB, @ShippingMethod, @ThirdPartyShipper, @ShipToName, @ShipEmail, @ShippingAccount, @SpecialLabelLine1, @SpecialLabelLine2, @SpecialLabelLine3)", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                            .Add("@PickTicketNumber", SqlDbType.VarChar).Value = NextTransactionNumber
                            .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                            .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                            .Add("@FreightQuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                            .Add("@FreightQuoteAmount", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                            .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                            .Add("@ShippingWeight", SqlDbType.VarChar).Value = 0
                            .Add("@NumberOfPallets", SqlDbType.VarChar).Value = 0
                            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            .Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
                            .Add("@ShipAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                            .Add("@ShipAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                            .Add("@ShipCity", SqlDbType.VarChar).Value = txtSTCity.Text
                            .Add("@ShipState", SqlDbType.VarChar).Value = txtSTState.Text
                            .Add("@ShipZip", SqlDbType.VarChar).Value = txtSTZip.Text
                            .Add("@ShipCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                            .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                            .Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@ProductTotal", SqlDbType.VarChar).Value = 0
                            .Add("@TaxTotal", SqlDbType.VarChar).Value = 0
                            .Add("@ShipmentTotal", SqlDbType.VarChar).Value = 0
                            .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                            .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                            .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                            .Add("@Tax2Total", SqlDbType.VarChar).Value = 0
                            .Add("@Tax3Total", SqlDbType.VarChar).Value = 0
                            .Add("@CertsAutoGenerated", SqlDbType.VarChar).Value = "NO"
                            .Add("@SOLog", SqlDbType.VarChar).Value = ""
                            .Add("@PulledBy", SqlDbType.VarChar).Value = ""
                            .Add("@CertsPulled", SqlDbType.VarChar).Value = ""
                            .Add("@PackingSlip", SqlDbType.VarChar).Value = ""
                            .Add("@Locked", SqlDbType.VarChar).Value = ""
                            .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                            .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                            .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                            .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                            .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                            .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                            .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                            .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                            .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                            .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempShipNumber As Integer = 0
                        Dim strShipNumber As String
                        TempShipNumber = NextShipmentNumber
                        strShipNumber = CStr(TempShipNumber)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Expedite SO --- Insert Shipment Header Failure (L10213)"
                        ErrorReferenceNumber = "Shipment # " + strShipNumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()

                        MsgBox("Error creating shipment - check data and try again.", MsgBoxStyle.OkOnly)

                        'Delete Pick Ticket
                        cmd = New SqlCommand("DELETE FROM PickListHeaderTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = NextTransactionNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()

                        'Reset SO to Open status
                        cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                        With cmd.Parameters
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@SOStatus", SqlDbType.VarChar).Value = "OPEN"
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()

                        txtSOStatus.Text = "OPEN"

                        Exit Sub
                    End Try

                    GlobalSOShipmentNumber = NextShipmentNumber
                    '***************************************************************************************************
                    If LineChangesMade <> "YES" Then
                        'Skip line changes
                    Else
                        'Add Lines to Shipment Line Table

                        'Count Lines in Pick List
                        Dim CountLinesStatement As String = "SELECT Count(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey"
                        Dim CountLinesCommand As New SqlCommand(CountLinesStatement, con)
                        CountLinesCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = NextTransactionNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CountLines = CInt(CountLinesCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CountLines = 0
                        End Try
                        con.Close()

                        ShipmentLineNumber = 1
                        '****************************************************************************************************
                        For i As Integer = 1 To CountLines
                            'Extract Line Data from Pick List Line Table
                            Dim GetPickListDataStatement As String = "SELECT * FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND PickListLineKey = @PickListLineKey"
                            Dim GetPickListDataCommand As New SqlCommand(GetPickListDataStatement, con)
                            GetPickListDataCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = NextTransactionNumber
                            GetPickListDataCommand.Parameters.Add("@PickListLineKey", SqlDbType.VarChar).Value = ShipmentLineNumber

                            If con.State = ConnectionState.Closed Then con.Open()
                            Dim reader As SqlDataReader = GetPickListDataCommand.ExecuteReader()
                            If reader.HasRows Then
                                reader.Read()
                                If IsDBNull(reader.Item("ItemID")) Then
                                    ItemID = ""
                                Else
                                    ItemID = reader.Item("ItemID")
                                End If
                                If IsDBNull(reader.Item("Description")) Then
                                    Description = ""
                                Else
                                    Description = reader.Item("Description")
                                End If
                                If IsDBNull(reader.Item("Quantity")) Then
                                    Quantity = 0
                                Else
                                    Quantity = reader.Item("Quantity")
                                End If
                                If IsDBNull(reader.Item("Price")) Then
                                    Price = 0
                                Else
                                    Price = reader.Item("Price")
                                End If
                                If IsDBNull(reader.Item("SalesTax")) Then
                                    SalesTax = 0
                                Else
                                    SalesTax = reader.Item("SalesTax")
                                End If
                                If IsDBNull(reader.Item("ExtendedAmount")) Then
                                    ExtendedAmount = 0
                                Else
                                    ExtendedAmount = reader.Item("ExtendedAmount")
                                End If
                                If IsDBNull(reader.Item("LineComment")) Then
                                    LineComment = ""
                                Else
                                    LineComment = reader.Item("LineComment")
                                End If
                                If IsDBNull(reader.Item("LineWeight")) Then
                                    LineWeight = 0
                                Else
                                    LineWeight = reader.Item("LineWeight")
                                End If
                                If IsDBNull(reader.Item("LineBoxes")) Then
                                    LineBoxes = 0
                                Else
                                    LineBoxes = reader.Item("LineBoxes")
                                End If
                                If IsDBNull(reader.Item("GLDebitAccount")) Then
                                    GLDebitAccount = "49999"
                                Else
                                    GLDebitAccount = reader.Item("GLDebitAccount")
                                End If
                                If IsDBNull(reader.Item("GLCreditAccount")) Then
                                    GLCreditAccount = "12100"
                                Else
                                    GLCreditAccount = reader.Item("GLCreditAccount")
                                End If
                                If IsDBNull(reader.Item("CertificationType")) Then
                                    CertificationType = "0"
                                Else
                                    CertificationType = reader.Item("CertificationType")
                                End If
                                If IsDBNull(reader.Item("SOLineNumber")) Then
                                    PLSOLineNumber = 0
                                Else
                                    PLSOLineNumber = reader.Item("SOLineNumber")
                                End If
                                If IsDBNull(reader.Item("SerialNumber")) Then
                                    SerialNumber = ""
                                Else
                                    SerialNumber = reader.Item("SerialNumber")
                                End If
                            Else
                                ItemID = ""
                                Description = ""
                                Quantity = 0
                                Price = 0
                                SalesTax = 0
                                ExtendedAmount = 0
                                LineComment = ""
                                LineWeight = 0
                                LineBoxes = 0
                                GLDebitAccount = "49999"
                                GLCreditAccount = "12100"
                                CertificationType = "0"
                                PLSOLineNumber = 0
                                SerialNumber = ""
                            End If
                            reader.Close()
                            con.Close()
                            '****************************************************************************************************
                            'If TFF do not write to sales tax lines
                            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                                SalesTax = 0
                            End If

                            'Get box weight from Item List
                            Dim GetBoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                            Dim GetBoxWeightCommand As New SqlCommand(GetBoxWeightStatement, con)
                            GetBoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = ItemID
                            GetBoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                            If con.State = ConnectionState.Closed Then con.Open()
                            Try
                                GetBoxWeight = CDbl(GetBoxWeightCommand.ExecuteScalar)
                            Catch ex As System.Exception
                                GetBoxWeight = 0
                            End Try
                            con.Close()

                            'SalesTax = Math.Round(SalesTax, 2)
                            ExtendedAmount = Math.Round(ExtendedAmount, 2)
                            LineBoxes = Math.Ceiling(LineBoxes)
                            '************************************************************************************************
                            Try
                                'Write Pick List Line data to Shipment Line Table
                                cmd = New SqlCommand("Insert Into ShipmentLineTable(ShipmentNumber, ShipmentLineNumber, PartNumber, PartDescription, QuantityShipped, Price, LineComment, LineWeight, LineBoxes, SalesTax, ExtendedAmount, LineStatus, DivisionID, GLDebitAccount, GLCreditAccount, CertificationType, ExtendedCOS, SOLineNumber, SerialNumber, Dropship, BoxWeight, LineComplete) Values (@ShipmentNumber, @ShipmentLineNumber, @PartNumber, @PartDescription, @QuantityShipped, @Price, @LineComment, @LineWeight, @LineBoxes, @SalesTax, @ExtendedAmount, @LineStatus, @DivisionID, @GLDebitAccount, @GLCreditAccount, @CertificationType, @ExtendedCOS, @SOLineNumber, @SerialNumber, @Dropship, @BoxWeight, @LineComplete)", con)

                                With cmd.Parameters
                                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                                    .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                                    .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                                    .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                                    .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                                    .Add("@Price", SqlDbType.VarChar).Value = Price
                                    .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                                    .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                                    .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                    .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                    .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                                    .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                                    .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                                    .Add("@SerialNumber", SqlDbType.VarChar).Value = ""
                                    .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                                    .Add("@BoxWeight", SqlDbType.VarChar).Value = GetBoxWeight
                                    .Add("@LineComplete", SqlDbType.VarChar).Value = "NO"
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            Catch ex As Exception
                                'Log error on update failure
                                Dim TempShipNumber As Integer = 0
                                Dim strShipNumber As String
                                TempShipNumber = NextShipmentNumber
                                strShipNumber = CStr(TempShipNumber)

                                ErrorDate = Today()
                                ErrorComment = ex.ToString()
                                ErrorDivision = cboDivisionID.Text
                                ErrorDescription = "Expedite SO --- Insert Shipment Line Failure (L10437)"
                                ErrorReferenceNumber = "Shipment # " + strShipNumber
                                ErrorUser = EmployeeLoginName

                                TFPErrorLogUpdate()
                            End Try

                            'Clear Variables
                            ItemID = ""
                            Description = ""
                            Quantity = 0
                            Price = 0
                            SalesTax = 0
                            ExtendedAmount = 0
                            LineComment = ""
                            LineWeight = 0
                            LineBoxes = 0
                            GLDebitAccount = "49999"
                            GLCreditAccount = "12100"
                            CertificationType = "0"
                            PLSOLineNumber = 0
                            SerialNumber = ""
                            GetBoxWeight = 0
                            '************************************************************************************************
                            ShipmentLineNumber = ShipmentLineNumber + 1
                        Next i
                        '****************************************************************************************************
                        'Total Lines to get Shipment Header Totals
                        Dim LineProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                        Dim LineProductTotalCommand As New SqlCommand(LineProductTotalStatement, con)
                        LineProductTotalCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                        LineProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        Dim LineProductWeightStatement As String = "SELECT SUM(LineWeight) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                        Dim LineProductWeightCommand As New SqlCommand(LineProductWeightStatement, con)
                        LineProductWeightCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                        LineProductWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        Dim LineSalesTaxStatement As String = "SELECT SUM(SalesTax) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                        Dim LineSalesTaxCommand As New SqlCommand(LineSalesTaxStatement, con)
                        LineSalesTaxCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                        LineSalesTaxCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            LineProductTotal = CDbl(LineProductTotalCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            LineProductTotal = 0
                        End Try
                        Try
                            LineProductWeight = CDbl(LineProductWeightCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            LineProductWeight = 0
                        End Try
                        Try
                            LineSalesTax = CDbl(LineSalesTaxCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            LineSalesTax = 0
                        End Try
                        con.Close()
                        '****************************************************************************************************
                        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                            LoadCanadianTaxRates()
                            FreightCharge = Val(txtFreightCharges.Text)

                            If chkAddPST.Checked = True Then
                                PSTExtendedAmount = PSTTaxRate * (LineProductTotal + FreightCharge)
                                LineSalesTax = GSTTaxRate * (LineProductTotal + FreightCharge)
                                HSTExtendedAmount = 0
                            ElseIf chkAddHST.Checked = True Then
                                HSTExtendedAmount = Val(txtHSTRate.Text) * (LineProductTotal + FreightCharge)
                                PSTExtendedAmount = 0
                                LineSalesTax = 0
                            Else
                                HSTExtendedAmount = 0
                                PSTExtendedAmount = 0
                                LineSalesTax = (LineProductTotal + FreightCharge) * GSTTaxRate
                            End If

                            'Get Tax Totals if Canadian
                            ShipmentTotal = LineSalesTax + PSTExtendedAmount + HSTExtendedAmount + LineProductTotal + Val(txtFreightCharges.Text)

                            LineSalesTax = Math.Round(LineSalesTax, 2)
                            PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
                            HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)
                            LineProductTotal = Math.Round(LineProductTotal, 2)
                            ShipmentTotal = Math.Round(ShipmentTotal, 2)
                        Else
                            'Get Tax Totals if American
                            ShipmentTotal = LineSalesTax + LineProductTotal + Val(txtFreightCharges.Text)

                            LineSalesTax = Math.Round(LineSalesTax, 2)
                            LineProductTotal = Math.Round(LineProductTotal, 2)
                            ShipmentTotal = Math.Round(ShipmentTotal, 2)
                        End If
                        '****************************************************************************************************
                        'Update Totals in Shipment Header Table
                        cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, ShippingWeight = @ShippingWeight, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total, FreightActualAmount = @FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@ProductTotal", SqlDbType.VarChar).Value = LineProductTotal
                            .Add("@TaxTotal", SqlDbType.VarChar).Value = LineSalesTax
                            .Add("@ShipmentTotal", SqlDbType.VarChar).Value = ShipmentTotal
                            .Add("@ShippingWeight", SqlDbType.VarChar).Value = LineProductWeight
                            .Add("@Tax2Total", SqlDbType.VarChar).Value = PSTExtendedAmount
                            .Add("@Tax3Total", SqlDbType.VarChar).Value = HSTExtendedAmount
                            .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                        '****************************************************************************************************
                        'Update Totals in Shipment Header Table
                        cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipmentTotal = ProductTotal + TaxTotal + Tax2Total + Tax3Total + FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                        '****************************************************************************************************
                        If cboShipVia.Text.StartsWith("UPS-") Or cboShipVia.Text.StartsWith("FDX-") Then
                            txtDeclaredValue.Text = ShipmentTotal

                            If Val(txtDeclaredValue.Text) > 0 Then
                                DeclaredValue = Val(txtDeclaredValue.Text)
                            Else
                                If ShipmentTotal > 101 Then
                                    If LineProductWeight > 200 Then
                                        DeclaredValue = ShipmentTotal
                                        MsgBox("This shipment is > 200 lbs. Declare value for lesser quantity if needed.", MsgBoxStyle.OkOnly)
                                    Else
                                        DeclaredValue = ShipmentTotal
                                    End If
                                Else
                                    DeclaredValue = 0
                                End If
                            End If

                            'Update Totals in Shipment Header Table
                            cmd = New SqlCommand("UPDATE PickListHeaderTable SET DeclaredValue = @DeclaredValue WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GlobalSOPickNumber
                                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@DeclaredValue", SqlDbType.VarChar).Value = DeclaredValue
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        Else
                            'Do nothing
                        End If
                    End If
                    '****************************************************************************************************
                    'Save all updates to Sales Order Header Table
                    SOStatus = "SHIPPED"
                    txtSOStatus.Text = "SHIPPED"
                    LineChangesMade = "NO"
                    '****************************************************************************************************
                    '****************************************************************************************************
                    '****************************************************************************************************
                    'Save into Sales Order Header Table
                    SaveUpdateSalesOrderHeader()
                    '****************************************************************************************************
                    '****************************************************************************************************
                    '****************************************************************************************************
                    Dim button1 As DialogResult = MessageBox.Show("Do you wish to print all of the Pick Tickets?", "PRINT PICK TICKETS", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)

                    If button1 = DialogResult.Yes Then
                        GlobalDivisionCode = cboDivisionID.Text
                        GlobalPickBatchNumber = NextPickBatchNumber

                        Using NewPrintPickTicketsAuto As New PrintPickTicketsAuto
                            Dim result = NewPrintPickTicketsAuto.ShowDialog()
                        End Using

                    ElseIf button1 = DialogResult.No Then
                        'continue
                    End If
                    '****************************************************************************************************
                Else
                    '****************************************************************************************************
                    'PENDING SHIPMENT AND PICK TICKET EXIST
                    '*****************************************

                    'If Shipment and Pick Ticket already exist and are pending, update existing data
                    Dim GetShipmentNumber, GetPickListNumber, GetPickListBatchNumber As Integer

                    'Get Pick Ticket number and Shipment Number
                    Dim GetShipmentNumberStatement As String = "SELECT * FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND ShipmentStatus = @ShipmentStatus AND DivisionID = @DivisionID"
                    Dim GetShipmentNumberCommand As New SqlCommand(GetShipmentNumberStatement, con)
                    GetShipmentNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    GetShipmentNumberCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                    GetShipmentNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim reader As SqlDataReader = GetShipmentNumberCommand.ExecuteReader()
                    If reader.HasRows Then
                        reader.Read()
                        If IsDBNull(reader.Item("ShipmentNumber")) Then
                            GetShipmentNumber = 0
                        Else
                            GetShipmentNumber = reader.Item("ShipmentNumber")
                        End If
                        If IsDBNull(reader.Item("PickTicketNumber")) Then
                            GetPickListNumber = 0
                        Else
                            GetPickListNumber = reader.Item("PickTicketNumber")
                        End If
                    Else
                        GetShipmentNumber = 0
                        GetPickListNumber = 0
                    End If
                    reader.Close()
                    '****************************************************************************************************
                    'Get Pick Ticket Batch Number for the reprint
                    Dim GetPickListBatchNumberStatement As String = "SELECT BatchNumber FROM PickListHeaderTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                    Dim GetPickListBatchNumberCommand As New SqlCommand(GetPickListBatchNumberStatement, con)
                    GetPickListBatchNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    GetPickListBatchNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim GetPickCountStatement As String = "SELECT PickCount FROM PickListHeaderTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                    Dim GetPickCountCommand As New SqlCommand(GetPickCountStatement, con)
                    GetPickCountCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    GetPickCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        GetPickListBatchNumber = CInt(GetPickListBatchNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetPickListBatchNumber = 0
                    End Try
                    Try
                        GetPickCount = CInt(GetPickCountCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetPickCount = 0
                    End Try
                    con.Close()
                    '****************************************************************************************************
                    'Define Pick Count
                    If GetPickCount = 1 Then
                        GetPickCount = 2
                    ElseIf GetPickCount = 2 Then
                        GetPickCount = 2
                    ElseIf GetPickCount = 3 Then
                        GetPickCount = 3
                    Else
                        GetPickCount = 2
                    End If
                    '****************************************************************************************************
                    'Update Pick List Header Table
                    '****************************************************************************************************
                    If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                        ShipToName = cboCustomerName.Text
                    Else
                        ShipToName = txtSTName.Text
                    End If
                    '****************************************************************************************************
                    If cboShipVia.Text.StartsWith("UPS-") Or cboShipVia.Text.StartsWith("FDX-") Then
                        If Val(txtDeclaredValue.Text) > 0 Then
                            DeclaredValue = Val(txtDeclaredValue.Text)
                        Else
                            If OrderTotal > 101 Then
                                DeclaredValue = OrderTotal
                            Else
                                DeclaredValue = 0
                            End If
                        End If
                    Else
                        DeclaredValue = 0
                    End If
                    '****************************************************************************************************
                    If DeclaredValue > 0 Then
                        DeclaredValueAdded = "Y"
                    Else
                        DeclaredValueAdded = "N"
                    End If
                    '****************************************************************************************************
                    'Load Tax rates based on User Entry
                    LoadSalesOrderTaxRates()
                    '****************************************************************************************************
                    'Calculate Totals and Update the Header Table
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        CalculateCanadianTotals()
                    Else
                        RecalculateLineTaxTotals()
                        CalculateTotals()
                    End If
                    '****************************************************************************************************
                    '****************************************************************************************************
                    '****************************************************************************************************
                    'Save into Sales Order Header Table
                    SaveUpdateSalesOrderHeader()
                    '****************************************************************************************************
                    '****************************************************************************************************
                    '****************************************************************************************************
                    Try
                        'Write Data to Pick Ticket Header Database Table
                        cmd = New SqlCommand("UPDATE PickListHeaderTable SET PickDate = @PickDate, Comment = @Comment, PLStatus = @PLStatus, CustomerID = @CustomerID, CustomerPO = @CustomerPO, ShipVia = @ShipVia, AdditionalShipTo = @AdditionalShipTo, PRONumber = @PRONumber, SalesmanID = @SalesmanID, SpecialInstructions = @SpecialInstructions, ShipDate = @ShipDate, PickCount = @PickCount, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipToAddress1 = @ShipToAddress1, ShipToAddress2 = @ShipToAddress2, ShipToCity = @ShipToCity, ShipToState = @ShipToState, ShipToZip = @ShipToZip, ShipToCountry = @ShipToCountry, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1, SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3, DeclaredValue = @DeclaredValue, DeclaredValueAdded = @DeclaredValueAdded WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@PickDate", SqlDbType.VarChar).Value = Today()
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                            .Add("@PLStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                            .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                            .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                            .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                            .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                            .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                            .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@PickCount", SqlDbType.VarChar).Value = GetPickCount
                            .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                            .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                            .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                            .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                            .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                            .Add("@ShipToCity", SqlDbType.VarChar).Value = txtSTCity.Text
                            .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                            .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                            .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                            .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                            .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                            .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                            .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                            .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                            .Add("@DeclaredValue", SqlDbType.VarChar).Value = DeclaredValue
                            .Add("@DeclaredValueAdded", SqlDbType.VarChar).Value = DeclaredValueAdded
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempPickNumber As Integer = 0
                        Dim strPickNumber As String
                        TempPickNumber = NextTransactionNumber
                        strPickNumber = CStr(TempPickNumber)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Expedite SO --- Update Pick Header Failure (L10767)"
                        ErrorReferenceNumber = "PT # " + strPickNumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()
                    End Try

                    GlobalSOPickNumber = GetPickListNumber

                    '****************************************************************************************************
                    'Check for line changes - if no changes, do not delete pick list lines to preserve data
                    '****************************************************************************************************

                    Dim CheckSOLineKey As Integer = 0
                    Dim CheckSOLineQuantity As Double = 0
                    Dim CheckPLLineQuantity As Double = 0
                    Dim CheckSOLinePartNumber As String = ""
                    Dim CheckListCounter As Integer = 0
                    Dim CheckSOLineComment As String = ""
                    Dim CheckSOLinePrice As Double = 0
                    Dim CheckPLLineComment As String = ""
                    Dim CheckPLLinePrice As Double = 0
                    Dim CheckSOTaxOpen As Double = 0
                    Dim CheckSOLineBoxes As Double = 0
                    Dim CheckSOLineWeight As Double = 0
                    Dim CheckSOPieceWeight As Double = 0
                    Dim CheckSOBoxWeight As Double = 0
                    Dim CheckSOLineBoxesOpen As Double = 0
                    Dim CheckSOLineWeightOpen As Double = 0

                    For Each CheckRow As DataGridViewRow In dgvSalesOrderLines.Rows
                        Try
                            CheckSOLineKey = CheckRow.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As System.Exception
                            CheckSOLineKey = 1
                        End Try
                        Try
                            CheckSOLineQuantity = CheckRow.Cells("OpenSOQuantityColumn").Value
                        Catch ex As System.Exception
                            CheckSOLineQuantity = 0
                        End Try
                        Try
                            CheckSOLinePartNumber = CheckRow.Cells("ItemIDColumn").Value
                        Catch ex As System.Exception
                            CheckSOLinePartNumber = ""
                        End Try
                        Try
                            CheckSOLineComment = CheckRow.Cells("LineCommentColumn").Value
                        Catch ex As System.Exception
                            CheckSOLineComment = ""
                        End Try
                        Try
                            CheckSOLinePrice = CheckRow.Cells("PriceColumn").Value
                        Catch ex As System.Exception
                            CheckSOLinePrice = 0
                        End Try

                        Dim CheckPLLineQuantityStatement As String = "SELECT Quantity FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                        Dim CheckPLLineQuantityCommand As New SqlCommand(CheckPLLineQuantityStatement, con)
                        CheckPLLineQuantityCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CheckPLLineQuantityCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                        CheckPLLineQuantityCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber

                        Dim CheckPLLineCommentStatement As String = "SELECT LineComment FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                        Dim CheckPLLineCommentCommand As New SqlCommand(CheckPLLineCommentStatement, con)
                        CheckPLLineCommentCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CheckPLLineCommentCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                        CheckPLLineCommentCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber

                        Dim CheckPLLinePriceStatement As String = "SELECT Price FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                        Dim CheckPLLinePriceCommand As New SqlCommand(CheckPLLinePriceStatement, con)
                        CheckPLLinePriceCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CheckPLLinePriceCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                        CheckPLLinePriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckPLLineQuantity = CDbl(CheckPLLineQuantityCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckPLLineQuantity = 0
                        End Try
                        Try
                            CheckPLLineComment = CStr(CheckPLLineCommentCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckPLLineComment = ""
                        End Try
                        Try
                            CheckPLLinePrice = CDbl(CheckPLLinePriceCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckPLLinePrice = 0
                        End Try
                        con.Close()
                        '**************************************************************************************************
                        'Get Sales Order Data
                        Dim SalesTaxOpenStatement As String = "SELECT SalesTaxOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                        Dim SalesTaxOpenCommand As New SqlCommand(SalesTaxOpenStatement, con)
                        SalesTaxOpenCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        SalesTaxOpenCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = CheckSOLineKey

                        Dim BoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim BoxCountCommand As New SqlCommand(BoxCountStatement, con)
                        BoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber
                        BoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        Dim BoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim BoxWeightCommand As New SqlCommand(BoxWeightStatement, con)
                        BoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber
                        BoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        Dim PieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim PieceWeightCommand As New SqlCommand(PieceWeightStatement, con)
                        PieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber
                        PieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckSOTaxOpen = CDbl(SalesTaxOpenCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOTaxOpen = 0
                        End Try
                        Try
                            CheckSOLineBoxes = CInt(BoxCountCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOLineBoxes = 0
                        End Try
                        Try
                            CheckSOBoxWeight = CDbl(BoxWeightCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOBoxWeight = 0
                        End Try
                        Try
                            CheckSOPieceWeight = CDbl(PieceWeightCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOPieceWeight = 0
                        End Try
                        con.Close()
                            '****************************************************************************************************
                        'Determine Open Box Count
                        'Avoid Divide-By-Zero Error
                        If CheckSOLineBoxes = 0 Then
                            CheckSOLineBoxesOpen = 0
                            CheckSOLineWeightOpen = 0
                        Else
                            CheckSOLineBoxesOpen = CheckSOLineQuantity / CheckSOLineBoxes
                            CheckSOLineBoxesOpen = Math.Round(CheckSOLineBoxesOpen, 1)

                            If CheckSOBoxWeight = 0 Then
                                CheckSOLineWeightOpen = CheckSOPieceWeight * CheckSOLineQuantity
                                CheckSOLineWeightOpen = Math.Round(CheckSOLineWeightOpen, 2)
                            Else
                                CheckSOLineWeightOpen = CheckSOBoxWeight * CheckSOLineBoxesOpen
                                CheckSOLineWeightOpen = Math.Round(CheckSOLineWeightOpen, 2)
                            End If
                        End If

                        'Scan for changes
                        If CheckSOLineQuantity = CheckPLLineQuantity Then
                            CheckListCounter = CheckListCounter + 0
                        Else
                            'Update Quantity on Pick List and shipment
                            cmd = New SqlCommand("UPDATE PickListLineTable SET Quantity = @Quantity, ExtendedAmount = Price * @Quantity, SalesTax = @SalesTax, LineWeight = @LineWeight, LineBoxes = @LineBoxes WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@Quantity", SqlDbType.VarChar).Value = CheckSOLineQuantity
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                                .Add("@LineWeight", SqlDbType.VarChar).Value = CheckSOLineWeightOpen
                                .Add("@LineBoxes", SqlDbType.VarChar).Value = CheckSOLineBoxesOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE ShipmentLineTable SET QuantityShipped = @QuantityShipped, ExtendedAmount = Price * @QuantityShipped, SalesTax = @SalesTax, LineWeight = @LineWeight, LineBoxes = @LineBoxes WHERE ShipmentNumber = @ShipmentNumber AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@QuantityShipped", SqlDbType.VarChar).Value = CheckSOLineQuantity
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                                .Add("@LineWeight", SqlDbType.VarChar).Value = CheckSOLineWeightOpen
                                .Add("@LineBoxes", SqlDbType.VarChar).Value = CheckSOLineBoxesOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If
                        If CheckSOLineComment = CheckPLLineComment Then
                            CheckListCounter = CheckListCounter + 0
                        Else
                            'Update Line Comment on Pick List and shipment
                            cmd = New SqlCommand("UPDATE PickListLineTable SET LineComment = @LineComment WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@LineComment", SqlDbType.VarChar).Value = CheckSOLineComment
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE ShipmentLineTable SET LineComment = @LineComment WHERE ShipmentNumber = @ShipmentNumber AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@LineComment", SqlDbType.VarChar).Value = CheckSOLineComment
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If
                        If CheckSOLinePrice = CheckPLLinePrice Then
                            CheckListCounter = CheckListCounter + 0
                        Else
                            'Update Price on Pick List and shipment
                            cmd = New SqlCommand("UPDATE PickListLineTable SET Price = @Price, ExtendedAmount = Quantity * @Price, SalesTax = @SalesTax WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@Price", SqlDbType.VarChar).Value = CheckSOLinePrice
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE ShipmentLineTable SET Price = @Price, ExtendedAmount = QuantityShipped * @Price, SalesTax = @SalesTax WHERE ShipmentNumber = @ShipmentNumber AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@Price", SqlDbType.VarChar).Value = CheckSOLinePrice
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If

                        'Clear Variables used in the For/Each Loop before next reiteration
                        CheckSOLineKey = 0
                        CheckSOLineQuantity = 0
                        CheckPLLineQuantity = 0
                        CheckSOLinePartNumber = ""
                        CheckSOLineComment = ""
                        CheckSOLinePrice = 0
                        CheckPLLineComment = ""
                        CheckPLLinePrice = 0
                        CheckSOTaxOpen = 0
                        CheckSOLineBoxes = 0
                        CheckSOLineWeight = 0
                        CheckSOPieceWeight = 0
                        CheckSOBoxWeight = 0
                        CheckSOLineBoxesOpen = 0
                        CheckSOLineWeightOpen = 0
                    Next
                    '******************************************************
                    If CheckListCounter = 0 Then
                        LineChangesMade = "NO"
                    Else
                        LineChangesMade = "YES"
                    End If
                    '******************************************************
                    'Count open lines on SO and compare to pick lines
                    Dim CountOpenLines As Integer = 0
                    Dim CountPickLines As Integer = 0

                    Dim CountOpenLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey AND QuantityOpen > 0 AND LineStatus <> 'CLOSED'"
                    Dim CountOpenLinesCommand As New SqlCommand(CountOpenLinesStatement, con)
                    CountOpenLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    CountOpenLinesCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim CountPickLinesStatement As String = "SELECT COUNT(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                    Dim CountPickLinesCommand As New SqlCommand(CountPickLinesStatement, con)
                    CountPickLinesCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    CountPickLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        CountOpenLines = CInt(CountOpenLinesCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        CountOpenLines = 0
                    End Try
                    Try
                        CountPickLines = CInt(CountPickLinesCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        CountPickLines = 0
                    End Try
                    con.Close()

                    If CountOpenLines = CountPickLines Then
                        'Check to see if the open lines match the pick ticket lines
                        Dim RecheckSOLine As Integer = 0
                        Dim RecheckOpenQuantity As Double = 0
                        Dim RecheckPickLine As Integer = 0
                        Dim RecheckPartNumber As String = ""

                        For Each CountRow As DataGridViewRow In dgvSalesOrderLines.Rows
                            Try
                                RecheckSOLine = CountRow.Cells("SalesOrderLineKeyColumn").Value
                            Catch ex As System.Exception
                                RecheckSOLine = 1
                            End Try
                            Try
                                RecheckOpenQuantity = CountRow.Cells("OpenSOQuantityColumn").Value
                            Catch ex As System.Exception
                                RecheckOpenQuantity = 0
                            End Try
                            Try
                                RecheckPartNumber = CountRow.Cells("ItemIDColumn").Value
                            Catch ex As System.Exception
                                RecheckPartNumber = ""
                            End Try

                            If RecheckOpenQuantity > 0 Then
                                Dim RecheckPickLineStatement As String = "SELECT COUNT(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                                Dim RecheckPickLineCommand As New SqlCommand(RecheckPickLineStatement, con)
                                RecheckPickLineCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                RecheckPickLineCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                RecheckPickLineCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = RecheckSOLine
                                RecheckPickLineCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RecheckPartNumber

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    RecheckPickLine = CInt(RecheckPickLineCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    RecheckPickLine = 0
                                End Try
                                con.Close()

                                If RecheckPickLine = 0 Then
                                    'Sales Order Line does not exit on the pick ticket - you must re-write the lines
                                    LineChangesMade = "YES"
                                    Exit For
                                Else
                                    'contine
                                End If
                            End If
                            LineChangesMade = "NO"
                        Next
                    Else
                        LineChangesMade = "YES"
                    End If
                    '******************************************************
                    If LineChangesMade <> "YES" Then
                        'Skip line routine
                    Else
                        'Delete existing lines from the Pick List line table and re-write
                        cmd = New SqlCommand("DELETE FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                        '****************************************************************************************************
                        'After writing header to Pick List, extract line data and write to Pick List Line Table
                        Dim SLSalesOrderLineKey As Integer
                        Dim SLItemID, SLDescription, SLLineComment, LineCertType, GLDebitAccount, GLCreditAccount As String
                        Dim SLPrice As Double = 0
                        Dim SLOpenQuantity As Double = 0
                        Dim LineBoxWeight As Double = 0
                        Dim LinePieceWeight As Double = 0
                        LineWeightOpen = 0

                        For Each LineRow As DataGridViewRow In dgvSalesOrderLines.Rows
                            Dim LineCell As DataGridViewTextBoxCell = LineRow.Cells("SalesOrderKeyColumn")
                            Dim LineCell1 As DataGridViewTextBoxCell = LineRow.Cells("OpenSOQuantityColumn")

                            If LineCell.Value = cboSalesOrderNumber.Text And LineCell1.Value > 0 Then
                                Try
                                    SLSalesOrderLineKey = LineRow.Cells("SalesOrderLineKeyColumn").Value
                                Catch ex As System.Exception
                                    SLSalesOrderLineKey = 1
                                End Try
                                Try
                                    SLItemID = LineRow.Cells("ItemIDColumn").Value
                                Catch ex As System.Exception
                                    SLItemID = ""
                                End Try
                                Try
                                    SLDescription = LineRow.Cells("DescriptionColumn").Value
                                Catch ex As System.Exception
                                    SLDescription = ""
                                End Try
                                Try
                                    SLOpenQuantity = LineRow.Cells("OpenSOQuantityColumn").Value
                                Catch ex As System.Exception
                                    SLOpenQuantity = 0
                                End Try
                                Try
                                    SLPrice = LineRow.Cells("PriceColumn").Value
                                Catch ex As System.Exception
                                    SLPrice = 0
                                End Try
                                Try
                                    SLLineComment = LineRow.Cells("LineCommentColumn").Value
                                Catch ex As System.Exception
                                    SLLineComment = ""
                                End Try
                                Try
                                    GLDebitAccount = LineRow.Cells("DebitGLAccountColumn").Value
                                Catch ex As System.Exception
                                    GLDebitAccount = "49999"
                                End Try
                                Try
                                    GLCreditAccount = LineRow.Cells("CreditGLAccountColumn").Value
                                Catch ex As System.Exception
                                    GLCreditAccount = "12100"
                                End Try
                                Try
                                    LineCertType = LineRow.Cells("CertificationTypeColumn").Value
                                Catch ex As System.Exception
                                    LineCertType = "0"
                                End Try
                                '****************************************************************************************************
                                'Extract Open Sales Tax, weights, and box counts for lines
                                Dim SalesTaxOpenStatement As String = "SELECT SalesTaxOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                                Dim SalesTaxOpenCommand As New SqlCommand(SalesTaxOpenStatement, con)
                                SalesTaxOpenCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                SalesTaxOpenCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = SLSalesOrderLineKey

                                Dim BoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim BoxCountCommand As New SqlCommand(BoxCountStatement, con)
                                BoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                BoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                Dim BoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim BoxWeightCommand As New SqlCommand(BoxWeightStatement, con)
                                BoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                BoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                Dim PieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim PieceWeightCommand As New SqlCommand(PieceWeightStatement, con)
                                PieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                PieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    SalesTaxOpen = CDbl(SalesTaxOpenCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    SalesTaxOpen = 0
                                End Try
                                Try
                                    LineBoxCount = CInt(BoxCountCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LineBoxCount = 0
                                End Try
                                Try
                                    LineBoxWeight = CDbl(BoxWeightCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LineBoxWeight = 0
                                End Try
                                Try
                                    LinePieceWeight = CDbl(PieceWeightCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LinePieceWeight = 0
                                End Try
                                con.Close()
                                '****************************************************************************************************
                                'Determine Open Box Count
                                'Avoid Divide-By-Zero Error
                                If LineBoxCount = 0 Then
                                    LineBoxesOpen = 0
                                    LineWeightOpen = 0
                                Else
                                    LineBoxesOpen = SLOpenQuantity / LineBoxCount
                                    LineBoxesOpen = Math.Round(LineBoxesOpen, 1)

                                    If LineBoxWeight = 0 Then
                                        LineWeightOpen = LinePieceWeight * SLOpenQuantity
                                        LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                    Else
                                        LineWeightOpen = LineBoxWeight * LineBoxesOpen
                                        LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                    End If
                                End If

                                OpenExtendedAmount = SLOpenQuantity * SLPrice
                                '****************************************************************************************************
                                'Routine to calculate the weight of stacked pallets minus the bottom one
                                If SLItemID = "PALLET-36 X 36" Or SLItemID = "PALLET- 36 X 36 HT" Or SLItemID = "PALLETS" Or SLItemID = "PALLET- 40 X 40" Or SLItemID = "PALLET- 40 X 40 HT" Then
                                    Select Case SLItemID
                                        Case "PALLET-36 X 36"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 34
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLET- 36 X 36 HT"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 34
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLETS"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 34
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLET- 40 X 40"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 39
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                        Case "PALLET- 40 X 40 HT"
                                            LineWeightOpen = (SLOpenQuantity - 1) * 39
                                            LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                            LineBoxesOpen = SLOpenQuantity
                                    End Select
                                End If
                                '****************************************************************************************************
                                'Don not write sales tax to lines if Canadian
                                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                                    SalesTaxOpen = 0
                                End If
                                '****************************************************************************************************
                                'Get Quantity On Hand for Pick Ticket
                                Dim PickQOHStatement As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim PickQOHCommand As New SqlCommand(PickQOHStatement, con)
                                PickQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                PickQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    PickQOH = CDbl(PickQOHCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    PickQOH = 0
                                End Try
                                con.Close()
                                '****************************************************************************************************
                                'Add new line to Pick List Line Table
                                'Get Next Line Number
                                Dim PickLineNumberStatement As String = "SELECT MAX(PickListLineKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                                Dim PickLineNumberCommand As New SqlCommand(PickLineNumberStatement, con)
                                PickLineNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                PickLineNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    LastPickLineNumber = CInt(PickLineNumberCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LastPickLineNumber = 0
                                End Try
                                con.Close()

                                NextPickLineNumber = LastPickLineNumber + 1

                                Try
                                    'Write Sales Order Data to Pick List Line Table
                                    cmd = New SqlCommand("Insert Into PickListLineTable(PickListHeaderKey, PickListLineKey, ItemID, Description, Quantity, Price, SalesTax, ExtendedAmount, LineComment, LineStatus, DivisionID, LineWeight, LineBoxes, GLDebitAccount, GLCreditAccount, CertificationType, SOLineNumber, SerialNumber, QOH) Values (@PickListHeaderKey, @PickListLineKey, @ItemID, @Description, @Quantity, @Price, @SalesTax, @ExtendedAmount, @LineComment, @LineStatus, @DivisionID, @LineWeight, @LineBoxes, @GLDebitAccount, @GLCreditAccount, @CertificationType, @SOLineNumber, @SerialNumber, @QOH)", con)

                                    With cmd.Parameters
                                        .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                        .Add("@PickListLineKey", SqlDbType.VarChar).Value = NextPickLineNumber
                                        .Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                        .Add("@Description", SqlDbType.VarChar).Value = SLDescription
                                        .Add("@Quantity", SqlDbType.VarChar).Value = SLOpenQuantity
                                        .Add("@Price", SqlDbType.VarChar).Value = SLPrice
                                        .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTaxOpen
                                        .Add("@ExtendedAmount", SqlDbType.VarChar).Value = OpenExtendedAmount
                                        .Add("@LineComment", SqlDbType.VarChar).Value = SLLineComment
                                        .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                        .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeightOpen
                                        .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxesOpen
                                        .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                        .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                        .Add("@CertificationType", SqlDbType.VarChar).Value = LineCertType
                                        .Add("@SOLineNumber", SqlDbType.VarChar).Value = SLSalesOrderLineKey
                                        .Add("@SerialNumber", SqlDbType.VarChar).Value = ""
                                        .Add("@QOH", SqlDbType.VarChar).Value = PickQOH
                                    End With

                                    If con.State = ConnectionState.Closed Then con.Open()
                                    cmd.ExecuteNonQuery()
                                    con.Close()
                                Catch ex As Exception
                                    'Log error on update failure
                                    Dim TempPickNumber As Integer = 0
                                    Dim strPickNumber As String
                                    TempPickNumber = NextTransactionNumber
                                    strPickNumber = CStr(TempPickNumber)

                                    ErrorDate = Today()
                                    ErrorComment = ex.ToString()
                                    ErrorDivision = cboDivisionID.Text
                                    ErrorDescription = "Expedite SO --- Update Pick Line Failure (L11361)"
                                    ErrorReferenceNumber = "PT # " + strPickNumber
                                    ErrorUser = EmployeeLoginName

                                    TFPErrorLogUpdate()
                                End Try

                                'Clear Variables
                                SLItemID = ""
                                SLDescription = ""
                                SLOpenQuantity = 0
                                SLPrice = 0
                                SalesTaxOpen = 0
                                OpenExtendedAmount = 0
                                SLLineComment = ""
                                LineWeightOpen = 0
                                LineBoxesOpen = 0
                                GLDebitAccount = "49999"
                                GLCreditAccount = "12100"
                                LineCertType = "0"
                                SLSalesOrderLineKey = 0
                                SerialNumber = ""
                                PickQOH = 0
                                LinePieceWeight = 0
                                LineBoxWeight = 0
                                LineBoxCount = 0
                            End If
                        Next
                    End If
                    '****************************************************************************************************
                    'Update Shipment Header Table
                    '****************************************************************************************************
                    If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                        ShipToName = cboCustomerName.Text
                    Else
                        ShipToName = txtSTName.Text
                    End If
                    '****************************************************************************************************
                    Try
                        'Write Data to Shipment Header Table
                        cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipDate = @ShipDate, Comment = @Comment, PickTicketNumber = @PickTicketNumber, ShipVia = @ShipVia, PRONumber = @PRONumber, FreightQuoteNumber = @FreightQuoteNumber, FreightQuoteAmount = @FreightQuoteAmount, FreightActualAmount = @FreightActualAmount, ShippingWeight = @ShippingWeight, NumberOfPallets = @NumberOfPallets, CustomerID = @CustomerID, ShipToID = @ShipToID, ShipAddress1 = @ShipAddress1, ShipAddress2 = @ShipAddress2, ShipCity = @ShipCity, ShipState = @ShipState, ShipZip = @ShipZip, ShipCountry = @ShipCountry, CustomerPO = @CustomerPO, ShipmentStatus = @ShipmentStatus, ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, SalesmanID = @SalesmanID, SpecialInstructions = @SpecialInstructions, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total, Locked = @Locked, CustomerClass = @CustomerClass, FOB = @FOB, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1, SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3 WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                            .Add("@PickTicketNumber", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                            .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                            .Add("@FreightQuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                            .Add("@FreightQuoteAmount", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                            .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                            .Add("@ShippingWeight", SqlDbType.VarChar).Value = 0
                            .Add("@NumberOfPallets", SqlDbType.VarChar).Value = 1
                            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            .Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
                            .Add("@ShipAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                            .Add("@ShipAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                            .Add("@ShipCity", SqlDbType.VarChar).Value = txtSTCity.Text
                            .Add("@ShipState", SqlDbType.VarChar).Value = txtSTState.Text
                            .Add("@ShipZip", SqlDbType.VarChar).Value = txtSTZip.Text
                            .Add("@ShipCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                            .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                            .Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@ProductTotal", SqlDbType.VarChar).Value = 0
                            .Add("@TaxTotal", SqlDbType.VarChar).Value = 0
                            .Add("@ShipmentTotal", SqlDbType.VarChar).Value = 0
                            .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                            .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                            .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                            .Add("@Tax2Total", SqlDbType.VarChar).Value = 0
                            .Add("@Tax3Total", SqlDbType.VarChar).Value = 0
                            '.Add("@CertsAutoGenerated", SqlDbType.VarChar).Value = "NO"
                            '.Add("@SOLog", SqlDbType.VarChar).Value = ""
                            '.Add("@PulledBy", SqlDbType.VarChar).Value = ""
                            '.Add("@CertsPulled", SqlDbType.VarChar).Value = ""
                            .Add("@PackingSlip", SqlDbType.VarChar).Value = ""
                            .Add("@Locked", SqlDbType.VarChar).Value = ""
                            .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                            .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                            .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                            .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                            .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                            .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                            .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                            .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                            .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                            .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempShipNumber2 As Integer = 0
                        Dim strShipNumber As String
                        TempShipNumber2 = GetShipmentNumber
                        strShipNumber = CStr(TempShipNumber2)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Expedite SO --- Update Shipment Header Failure (L11466)"
                        ErrorReferenceNumber = "Shipment # " + strShipNumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()
                    End Try

                    GlobalSOShipmentNumber = GetShipmentNumber
                    '***************************************************************************************************
                    If LineChangesMade <> "YES" Then
                        'Skip line changes
                    Else
                        'After Pick List is created, get existing shipment line data and write to Pick List Line Table to preserve

                        'Count Shipment Lines and run routine for each line
                        Dim CountShipLinesStatement As String = "SELECT Count(ShipmentNumber) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber and DivisionID = @DivisionID"
                        Dim CountShipLinesCommand As New SqlCommand(CountShipLinesStatement, con)
                        CountShipLinesCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                        CountShipLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CountShipLines = CInt(CountShipLinesCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CountShipLines = 0
                        End Try
                        con.Close()

                        Dim TempShipNumber As Integer = 1
                        Dim SHSOLineNumber As Integer
                        Dim SHLineComment As String

                        For i As Integer = 1 To CountShipLines
                            'Get SO Line Number from Shipment Line Table
                            Dim SHSOLineNumberStatement As String = "SELECT * FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND ShipmentLineNumber = @ShipmentLineNumber AND DivisionID = @DivisionID"
                            Dim SHSOLineNumberCommand As New SqlCommand(SHSOLineNumberStatement, con)
                            SHSOLineNumberCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            SHSOLineNumberCommand.Parameters.Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = TempShipNumber
                            SHSOLineNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                            If con.State = ConnectionState.Closed Then con.Open()
                            reader = SHSOLineNumberCommand.ExecuteReader()
                            If reader.HasRows Then
                                reader.Read()
                                If IsDBNull(reader.Item("SOLineNumber")) Then
                                    SHSOLineNumber = 0
                                Else
                                    SHSOLineNumber = reader.Item("SOLineNumber")
                                End If
                                If IsDBNull(reader.Item("SerialNumber")) Then
                                    SHLineComment = ""
                                Else
                                    SHLineComment = reader.Item("SerialNumber")
                                End If
                            Else
                                SHSOLineNumber = 0
                                SHLineComment = ""
                            End If
                            reader.Close()
                            con.Close()

                            'Update new pick list lines with Line Comments
                            cmd = New SqlCommand("UPDATE PickListLineTable SET SerialNumber = @SerialNumber WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = SHSOLineNumber
                                .Add("@SerialNumber", SqlDbType.VarChar).Value = SHLineComment
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            TempShipNumber = TempShipNumber + 1
                        Next i

                        'Delete existing shipment lines before re-writing
                        cmd = New SqlCommand("DELETE FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                        '***************************************************************************************************
                        'Add Lines to Shipment Line Table

                        'Count Lines in Pick List
                        Dim CountLinesStatement As String = "SELECT Count(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                        Dim CountLinesCommand As New SqlCommand(CountLinesStatement, con)
                        CountLinesCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CountLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CountLines = CInt(CountLinesCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CountLines = 0
                        End Try
                        con.Close()

                        ShipmentLineNumber = 1
                        '****************************************************************************************************
                        For i As Integer = 1 To CountLines
                            'Extract Line Data from Pick List Line Table
                            Dim GetPickListDataStatement As String = "SELECT * FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND PickListLineKey = @PickListLineKey"
                            Dim GetPickListDataCommand As New SqlCommand(GetPickListDataStatement, con)
                            GetPickListDataCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            GetPickListDataCommand.Parameters.Add("@PickListLineKey", SqlDbType.VarChar).Value = ShipmentLineNumber

                            If con.State = ConnectionState.Closed Then con.Open()
                            reader = GetPickListDataCommand.ExecuteReader()
                            If reader.HasRows Then
                                reader.Read()
                                If IsDBNull(reader.Item("ItemID")) Then
                                    ItemID = ""
                                Else
                                    ItemID = reader.Item("ItemID")
                                End If
                                If IsDBNull(reader.Item("Description")) Then
                                    Description = ""
                                Else
                                    Description = reader.Item("Description")
                                End If
                                If IsDBNull(reader.Item("Quantity")) Then
                                    Quantity = 0
                                Else
                                    Quantity = reader.Item("Quantity")
                                End If
                                If IsDBNull(reader.Item("Price")) Then
                                    Price = 0
                                Else
                                    Price = reader.Item("Price")
                                End If
                                If IsDBNull(reader.Item("SalesTax")) Then
                                    SalesTax = 0
                                Else
                                    SalesTax = reader.Item("SalesTax")
                                End If
                                If IsDBNull(reader.Item("ExtendedAmount")) Then
                                    ExtendedAmount = 0
                                Else
                                    ExtendedAmount = reader.Item("ExtendedAmount")
                                End If
                                If IsDBNull(reader.Item("LineComment")) Then
                                    LineComment = ""
                                Else
                                    LineComment = reader.Item("LineComment")
                                End If
                                If IsDBNull(reader.Item("LineWeight")) Then
                                    LineWeight = 0
                                Else
                                    LineWeight = reader.Item("LineWeight")
                                End If
                                If IsDBNull(reader.Item("LineBoxes")) Then
                                    LineBoxes = 0
                                Else
                                    LineBoxes = reader.Item("LineBoxes")
                                End If
                                If IsDBNull(reader.Item("GLDebitAccount")) Then
                                    GLDebitAccount = "49999"
                                Else
                                    GLDebitAccount = reader.Item("GLDebitAccount")
                                End If
                                If IsDBNull(reader.Item("GLCreditAccount")) Then
                                    GLCreditAccount = "12100"
                                Else
                                    GLCreditAccount = reader.Item("GLCreditAccount")
                                End If
                                If IsDBNull(reader.Item("CertificationType")) Then
                                    CertificationType = "0"
                                Else
                                    CertificationType = reader.Item("CertificationType")
                                End If
                                If IsDBNull(reader.Item("SOLineNumber")) Then
                                    PLSOLineNumber = 0
                                Else
                                    PLSOLineNumber = reader.Item("SOLineNumber")
                                End If
                                If IsDBNull(reader.Item("SerialNumber")) Then
                                    SerialNumber = ""
                                Else
                                    SerialNumber = reader.Item("SerialNumber")
                                End If
                            Else
                                ItemID = ""
                                Description = ""
                                Quantity = 0
                                Price = 0
                                SalesTax = 0
                                ExtendedAmount = 0
                                LineComment = ""
                                LineWeight = 0
                                LineBoxes = 0
                                GLDebitAccount = "49999"
                                GLCreditAccount = "12100"
                                CertificationType = "0"
                                PLSOLineNumber = 0
                                SerialNumber = ""
                            End If
                            reader.Close()
                            con.Close()
                            '****************************************************************************************************
                            'If TFF, do not write to sales tax lines
                            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                                SalesTax = 0
                            End If

                            'If TWD, get box weight from Item List
                            Dim GetBoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                            Dim GetBoxWeightCommand As New SqlCommand(GetBoxWeightStatement, con)
                            GetBoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = ItemID
                            GetBoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                            If con.State = ConnectionState.Closed Then con.Open()
                            Try
                                GetBoxWeight = CDbl(GetBoxWeightCommand.ExecuteScalar)
                            Catch ex As System.Exception
                                GetBoxWeight = 0
                            End Try
                            con.Close()

                            'SalesTax = Math.Round(SalesTax, 2)
                            ExtendedAmount = Math.Round(ExtendedAmount, 2)
                            LineBoxes = Math.Ceiling(LineBoxes)
                            '****************************************************************************************************
                            Try
                                'Write Pick List Line data to Shipment Line Table
                                cmd = New SqlCommand("Insert Into ShipmentLineTable(ShipmentNumber, ShipmentLineNumber, PartNumber, PartDescription, QuantityShipped, Price, LineComment, LineWeight, LineBoxes, SalesTax, ExtendedAmount, LineStatus, DivisionID, GLDebitAccount, GLCreditAccount, CertificationType, ExtendedCOS, SOLineNumber, SerialNumber, Dropship, BoxWeight, LineComplete) Values (@ShipmentNumber, @ShipmentLineNumber, @PartNumber, @PartDescription, @QuantityShipped, @Price, @LineComment, @LineWeight, @LineBoxes, @SalesTax, @ExtendedAmount, @LineStatus, @DivisionID, @GLDebitAccount, @GLCreditAccount, @CertificationType, @ExtendedCOS, @SOLineNumber, @SerialNumber, @Dropship, @BoxWeight, @LineComplete)", con)

                                With cmd.Parameters
                                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                    .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                                    .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                                    .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                                    .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                                    .Add("@Price", SqlDbType.VarChar).Value = Price
                                    .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                                    .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                                    .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                    .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                    .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                                    .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                                    .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                                    .Add("@SerialNumber", SqlDbType.VarChar).Value = SerialNumber
                                    .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                                    .Add("@BoxWeight", SqlDbType.VarChar).Value = GetBoxWeight
                                    .Add("@LineComplete", SqlDbType.VarChar).Value = "NO"
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            Catch ex As System.Exception
                                'Write Pick List Line data to Shipment Line Table
                                cmd = New SqlCommand("UPDATE ShipmentLineTable SET PartNumber = @PartNumber, PartDescription = @PartDescription, QuantityShipped = @QuantityShipped, Price = @Price, LineComment = @LineComment, LineWeight = @LineWeight, LineBoxes = @LineBoxes, SalesTax = @SalesTax, ExtendedAmount = @ExtendedAmount, LineStatus = @LineStatus, GLDebitAccount = @GLDebitAccount, GLCreditAccount = @GLCreditAccount, CertificationType = @CertificationType, ExtendedCOS = @ExtendedCOS, SOLineNumber = @SOLineNumber, SerialNumber = @SerialNumber, Dropship = @Dropship, BoxWeight = @BoxWeight, LineComplete = @LineComplete WHERE ShipmentNumber = @ShipmentNumber AND ShipmentLineNumber = @ShipmentLineNumber AND DivisionID = @DivisionID", con)

                                With cmd.Parameters
                                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                    .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                                    .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                                    .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                                    .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                                    .Add("@Price", SqlDbType.VarChar).Value = Price
                                    .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                                    .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                                    .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                    .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                    .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                                    .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                                    .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                                    .Add("@SerialNumber", SqlDbType.VarChar).Value = SerialNumber
                                    .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                                    .Add("@BoxWeight", SqlDbType.VarChar).Value = GetBoxWeight
                                    .Add("@LineComplete", SqlDbType.VarChar).Value = "NO"
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            End Try
                            '************************************************************************************************
                            ShipmentLineNumber = ShipmentLineNumber + 1
                        Next i
                    End If
                    '***************************************************************************************************
                    Dim GetQOH As Double = 0
                    Dim GetQOHPartNumber As String = ""
                    Dim GetQOHLineNumber As Integer = 0

                    'Update QOH in Pick Ticket
                    For Each CheckRow As DataGridViewRow In dgvSalesOrderLines.Rows
                        Try
                            GetQOHLineNumber = CheckRow.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As System.Exception
                            GetQOHLineNumber = 1
                        End Try
                        Try
                            GetQOHPartNumber = CheckRow.Cells("ItemIDColumn").Value
                        Catch ex As System.Exception
                            GetQOHPartNumber = ""
                        End Try

                        'Get Quantity On Hand for Pick Ticket
                        Dim GetQOHStatement As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim GetQOHCommand As New SqlCommand(GetQOHStatement, con)
                        GetQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = GetQOHPartNumber
                        GetQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            GetQOH = CDbl(GetQOHCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            GetQOH = 0
                        End Try
                        con.Close()

                        'Update Totals in Shipment Header Table
                        cmd = New SqlCommand("UPDATE PickListLineTable SET QOH = @QOH WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@SOLineNumber", SqlDbType.VarChar).Value = GetQOHLineNumber
                            .Add("@QOH", SqlDbType.VarChar).Value = GetQOH
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Next
                    '****************************************************************************************************
                    'Save all updates to Sales Order Header Table
                    SOStatus = "SHIPPED"
                    LineChangesMade = "NO"
                    '****************************************************************************************************
                    'Load Tax rates based on User Entry
                    LoadSalesOrderTaxRates()
                    '****************************************************************************************************
                    'Calculate Totals and Update the Header Table
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        CalculateCanadianTotals()
                    Else
                        RecalculateLineTaxTotals()
                        CalculateTotals()
                    End If
                    '****************************************************************************************************
                    '****************************************************************************************************
                    '****************************************************************************************************
                    'Save into Sales Order Header Table
                    SaveUpdateSalesOrderHeader()
                    '****************************************************************************************************
                    '****************************************************************************************************
                    '****************************************************************************************************
                    Dim button1 As DialogResult = MessageBox.Show("Do you wish to reprint the updated Pick Ticket?", "PRINT PICK TICKETS", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)

                    If button1 = DialogResult.Yes Then
                        GlobalDivisionCode = cboDivisionID.Text
                        GlobalPickBatchNumber = GetPickListBatchNumber
                        GlobalPickListNumber = GetPickListNumber
                        GlobalSOPickNumber = GetPickListNumber

                        Using NewPrintPickTicketsAuto As New PrintPickTicketsAuto
                            Dim result = NewPrintPickTicketsAuto.ShowDialog()
                        End Using

                    ElseIf button1 = DialogResult.No Then
                        'continue
                    End If
                    '****************************************************************************************************
                    NextShipmentNumber = GetShipmentNumber
                    '*****************************************************************************************************
                    'Total Lines to get Shipment Header Totals
                    Dim LineProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                    Dim LineProductTotalCommand As New SqlCommand(LineProductTotalStatement, con)
                    LineProductTotalCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    LineProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim LineProductWeightStatement As String = "SELECT SUM(LineWeight) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                    Dim LineProductWeightCommand As New SqlCommand(LineProductWeightStatement, con)
                    LineProductWeightCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    LineProductWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim LineSalesTaxStatement As String = "SELECT SUM(SalesTax) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                    Dim LineSalesTaxCommand As New SqlCommand(LineSalesTaxStatement, con)
                    LineSalesTaxCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    LineSalesTaxCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        LineProductTotal = CDbl(LineProductTotalCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LineProductTotal = 0
                    End Try
                    Try
                        LineProductWeight = CDbl(LineProductWeightCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LineProductWeight = 0
                    End Try
                    Try
                        LineSalesTax = CDbl(LineSalesTaxCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LineSalesTax = 0
                    End Try
                    con.Close()
                    '***********************************************************************************************************
                    If cboShipVia.Text.StartsWith("UPS-") Or cboShipVia.Text.StartsWith("FDX-") Then
                        If Val(txtDeclaredValue.Text) > 0 Then
                            DeclaredValue = Val(txtDeclaredValue.Text)
                        Else
                            If LineProductTotal > 101 Then
                                If LineProductWeight > 200 Then
                                    MsgBox("Shipment weight > 200 lbs. Check declared value for lesser quantity.", MsgBoxStyle.OkOnly)
                                    DeclaredValue = LineProductTotal
                                Else
                                    DeclaredValue = LineProductTotal
                                End If
                            Else
                                DeclaredValue = 0
                            End If
                        End If

                        If DeclaredValue > 0 Then
                            'Update Totals in Shipment Header Table
                            cmd = New SqlCommand("UPDATE PickListHeaderTable SET DeclaredValue = @DeclaredValue WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GlobalSOPickNumber
                                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@DeclaredValue", SqlDbType.VarChar).Value = DeclaredValue
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If
                    Else
                        'Do nothing
                    End If
                        End If
                '****************************************************************************************************
                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                    'LoadCanadianTaxRates()
                    FreightCharge = Val(txtFreightCharges.Text)

                    If chkAddPST.Checked = True Then
                        PSTExtendedAmount = PSTTaxRate * (LineProductTotal + FreightCharge)
                        LineSalesTax = 0.05 * (LineProductTotal + FreightCharge)
                        HSTExtendedAmount = 0
                    ElseIf chkAddHST.Checked = True Then
                        HSTExtendedAmount = Val(txtHSTRate.Text) * (LineProductTotal + FreightCharge)
                        PSTExtendedAmount = 0
                        LineSalesTax = 0
                    Else
                        HSTExtendedAmount = 0
                        PSTExtendedAmount = 0
                        LineSalesTax = (LineProductTotal + FreightCharge) * GSTTaxRate
                    End If

                    'Get Tax Totals if Canadian
                    ShipmentTotal = LineSalesTax + PSTExtendedAmount + HSTExtendedAmount + LineProductTotal + FreightCharge

                    LineSalesTax = Math.Round(LineSalesTax, 2)
                    PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
                    HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)
                    LineProductTotal = Math.Round(LineProductTotal, 2)
                    ShipmentTotal = Math.Round(ShipmentTotal, 2)
                Else
                    'Get Tax Totals if American
                    ShipmentTotal = LineSalesTax + LineProductTotal + Val(txtFreightCharges.Text)

                    LineSalesTax = Math.Round(LineSalesTax, 2)
                    LineProductTotal = Math.Round(LineProductTotal, 2)
                    ShipmentTotal = Math.Round(ShipmentTotal, 2)
                End If
                '****************************************************************************************************
                'Update Totals in Shipment Header Table
                cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, ShippingWeight = @ShippingWeight, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total, FreightActualAmount = @FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = LineProductTotal
                    .Add("@TaxTotal", SqlDbType.VarChar).Value = LineSalesTax
                    .Add("@ShipmentTotal", SqlDbType.VarChar).Value = ShipmentTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = LineProductWeight
                    .Add("@Tax2Total", SqlDbType.VarChar).Value = PSTExtendedAmount
                    .Add("@Tax3Total", SqlDbType.VarChar).Value = HSTExtendedAmount
                    .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'Update Totals in Shipment Header Table
                cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipmentTotal = ProductTotal + TaxTotal + Tax2Total + Tax3Total + FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = NextShipmentNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                '****************************************************************************************************
                'Update sales order header table to shipped status
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@SOStatus", SqlDbType.VarChar).Value = "SHIPPED"
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                txtSOStatus.Text = "SHIPPED"
                '****************************************************************************************************
                Using NewSOPopup As New SOFormPopup
                    Dim Result = NewSOPopup.ShowDialog()
                End Using

                ''changes state so it doesn't prompt to save again
                needsSaved = False

                If GlobalGoToSalesOrder = "YES" And GlobalGoToShipment = "NO" Then
                    unlockBatch()
                    GlobalSONumber = 0
                    cboSalesOrderNumber.Text = ""
                    LoadSalesOrderNumber()

                    ClearVariables()
                    ClearData()
                    ClearDataInDatagrid()
                    cboSalesOrderNumber.SelectedIndex = -1
                Else
                    'Open Shipment Form and close Sales Order
                    'Global variables already loaded
                    unlockBatch()

                    Dim NewShipmentCompletion As New ShipmentCompletion
                    NewShipmentCompletion.Show()

                    Me.Dispose()
                    Me.Close()
                End If
            End If
        ElseIf button = DialogResult.No Then
            cboSalesOrderNumber.Focus()
        End If
    End Sub

    Private Sub cmdSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSave.Click
        If canSave() Then
            LockBatch()
            '********************************************************************************
            'Get division of the sales order number
            ValidateDivision()

            If CheckDivision <> cboDivisionID.Text Then
                MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

                'Error Log
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "SO Form - SAVE BUTTON - Invalid Division (L12190)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()

                Exit Sub
            Else
                'Skip
            End If
            '**************************************************************************************
            LineChangesMade = "YES"
            '**************************************************************************************
            If txtSOStatus.Text = "SHIPPED" Then
                'SO Status is correct
            ElseIf txtSOStatus.Text = "OPEN" Then
                'Determine Shipping Status (if changed)
                If chkDropShip.Checked = True Then
                    SOStatus = "DROPSHIP"
                    txtSOStatus.Text = SOStatus
                Else
                    txtSOStatus.Text = "OPEN"
                End If
            Else
                'SO Status is correct
            End If
            '***************************************************************************************
            'Verify Status to see if order has been Picked
            If txtSOStatus.Text = "SHIPPED" Then
                Dim button1 As DialogResult = MessageBox.Show("Do you wish to update the Pick Ticket and Packing List?", "UPDATE PICK/PACK LIST", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                If button1 = DialogResult.Yes Then
                    '********************************************************************************************************
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price WHERE SalesOrderKey = @SalesOrderKey", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                    '****************************************************************************************************
                    'Load Tax rates based on User Entry
                    LoadSalesOrderTaxRates()
                    '****************************************************************************************************
                    'Calculate Totals and Update the Header Table
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        CalculateCanadianTotals()
                    Else
                        RecalculateLineTaxTotals()
                        CalculateTotals()
                    End If
                    '****************************************************************************************************
                    'Add or save Ship To Address if necessary
                    If cboShipToID.Text = "" Then
                        'Do nothing - default ship to
                    Else
                        Try
                            SaveInsertAdditionalShipTo()
                        Catch ex As System.Exception
                            SaveUpdateAdditionalShipTo()
                        End Try
                    End If
                    '****************************************************************************************************
                    'Set default delivery type for companies
                    If cboShipVia.Text = "" And cboDivisionID.Text = "CBS" Then
                        cboShipVia.Text = "Will Call"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "SLC" Then
                        cboShipVia.Text = "SEE SALESMAN"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ATL" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWE" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWD" Then
                        cboShipVia.Text = ""
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CHT" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "HOU" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFT" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFF" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CGO" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TOR" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "DEN" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ALB" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFJ" Then
                        cboShipVia.Text = "Delivery"
                    Else
                        'Do nothing
                    End If
                    '****************************************************************************************************
                    If cboSalesPersonID.Text = "" Then
                        cboSalesPersonID.Text = EmployeeSalespersonCode
                    Else
                        'Do nothing
                    End If
                    '****************************************************************************************************
                    SalesOrderDate = dtpSalesOrderDate.Value
                    ShippingDate = dtpShippingDate.Value
                    '******************************************************************************************************
                    'Verify Country Code exists for the ship to address
                    If txtSTCountry.Text = "" And txtSTState.Text <> "" Then
                        StateCode = txtSTState.Text
                        LoadCountryCodeFromState()

                        txtSTCountry.Text = CountryCodeFromState
                        cboSTCountryName.Text = CountryNameFromState
                    End If
                    '****************************************************************************************************
                    'Save all updates to Sales Order Header Table
                    ValidateShippingMethod()

                    If CheckShippingMethod = "EXIT SUB" Then
                        MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
                        CheckShippingMethod = ""
                        Exit Sub
                    End If

                    SOStatus = "SHIPPED"
                    txtSOStatus.Text = SOStatus
                    '***************************************************************************************************
                    'Save data to Sales Order Header
                    SaveUpdateSalesOrderHeader()
                    '****************************************************************************************************
                    'If Shipment and Pick Ticket already exist and are pending, update existing data
                    Dim GetShipmentNumber, GetPickListNumber, GetPickListBatchNumber As Integer

                    'Get Pick Ticket number and Shipment Number
                    Dim GetShipmentNumberStatement As String = "SELECT ShipmentNumber, PickTicketNumber FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND ShipmentStatus = @ShipmentStatus AND DivisionID = @DivisionID"
                    Dim GetShipmentNumberCommand As New SqlCommand(GetShipmentNumberStatement, con)
                    GetShipmentNumberCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    GetShipmentNumberCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                    GetShipmentNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Dim reader As SqlDataReader = GetShipmentNumberCommand.ExecuteReader()
                    If reader.HasRows Then
                        reader.Read()
                        If IsDBNull(reader.Item("ShipmentNumber")) Then
                            GetShipmentNumber = 0
                        Else
                            GetShipmentNumber = reader.Item("ShipmentNumber")
                        End If
                        If IsDBNull(reader.Item("PickTicketNumber")) Then
                            GetPickListNumber = 0
                        Else
                            GetPickListNumber = reader.Item("PickTicketNumber")
                        End If

                    Else
                        GetShipmentNumber = 0
                        GetPickListNumber = 0
                    End If
                    reader.Close()
                    con.Close()
                    '****************************************************************************************************
                    'Get Pick Ticket Batch Number for the reprint
                    Dim GetPickListBatchNumberStatement As String = "SELECT BatchNumber FROM PickListHeaderTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                    Dim GetPickListBatchNumberCommand As New SqlCommand(GetPickListBatchNumberStatement, con)
                    GetPickListBatchNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    GetPickListBatchNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim GetPickCountStatement As String = "SELECT PickCount FROM PickListHeaderTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                    Dim GetPickCountCommand As New SqlCommand(GetPickCountStatement, con)
                    GetPickCountCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    GetPickCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        GetPickListBatchNumber = CInt(GetPickListBatchNumberCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetPickListBatchNumber = 0
                    End Try
                    Try
                        GetPickCount = CInt(GetPickCountCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        GetPickCount = 0
                    End Try
                    con.Close()
                    '****************************************************************************************************
                    'Define Pick Count
                    If GetPickCount = 1 Then
                        GetPickCount = 2
                    ElseIf GetPickCount = 2 Then
                        GetPickCount = 2
                    ElseIf GetPickCount = 3 Then
                        GetPickCount = 3
                    Else
                        GetPickCount = 2
                    End If
                    '****************************************************************************************************
                    'Update Pick List Header Table
                    '****************************************************************************************************
                    If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                        ShipToName = cboCustomerName.Text
                    Else
                        ShipToName = txtSTName.Text
                    End If
                    '****************************************************************************************************
                    If cboShipVia.Text.StartsWith("UPS-") Or cboShipVia.Text.StartsWith("FDX-") Then
                        If Val(txtDeclaredValue.Text) > 0 Then
                            DeclaredValue = Val(txtDeclaredValue.Text)
                        Else
                            If OrderTotal > 101 Then
                                DeclaredValue = OrderTotal
                            Else
                                DeclaredValue = 0
                            End If
                        End If
                    Else
                        DeclaredValue = 0
                    End If
                    '****************************************************************************************************
                    If DeclaredValue > 0 Then
                        DeclaredValueAdded = "Y"
                    Else
                        DeclaredValueAdded = "N"
                    End If
                    '****************************************************************************************************
                    Try
                        'Write Data to Pick Ticket Header Database Table
                        cmd = New SqlCommand("UPDATE PickListHeaderTable SET PickDate = @PickDate, Comment = @Comment, PLStatus = @PLStatus, CustomerID = @CustomerID, CustomerPO = @CustomerPO, ShipVia = @ShipVia, AdditionalShipTo = @AdditionalShipTo, PRONumber = @PRONumber, SalesmanID = @SalesmanID, SpecialInstructions = @SpecialInstructions, ShipDate = @ShipDate, PickCount = @PickCount, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipToAddress1 = @ShipToAddress1, ShipToAddress2 = @ShipToAddress2, ShipToCity = @ShipToCity, ShipToState = @ShipToState, ShipToZip = @ShipToZip, ShipToCountry = @ShipToCountry, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1,SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3, DeclaredValue = @DeclaredValue, DeclaredValueAdded = @DeclaredValueAdded WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@PickDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                            .Add("@PLStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                            .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                            .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                            .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                            .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                            .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                            .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@PickCount", SqlDbType.VarChar).Value = GetPickCount
                            .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                            .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                            .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                            .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                            .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                            .Add("@ShipToCity", SqlDbType.VarChar).Value = txtSTCity.Text
                            .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                            .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                            .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                            .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                            .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                            .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                            .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                            .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                            .Add("@DeclaredValue", SqlDbType.VarChar).Value = DeclaredValue
                            .Add("@DeclaredValueAdded", SqlDbType.VarChar).Value = DeclaredValueAdded
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempPickNumber As Integer = 0
                        Dim strPickNumber As String
                        TempPickNumber = GetPickListNumber
                        strPickNumber = CStr(TempPickNumber)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Save SO --- Update Pick Header Failure (L12308)"
                        ErrorReferenceNumber = "PT # " + strPickNumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()
                    End Try

                    GlobalSOPickNumber = GetPickListNumber

                    '****************************************************************************************************
                    'If no changes are made to the sales order lines, do not delete and redo pick lines or shipment lines
                    '****************************************************************************************************

                    Dim CheckSOLineKey As Integer = 0
                    Dim CheckSOLineQuantity As Double = 0
                    Dim CheckPLLineQuantity As Double = 0
                    Dim CheckSOLinePartNumber As String = ""
                    Dim CheckListCounter As Integer = 0
                    Dim CheckSOLineComment As String = ""
                    Dim CheckSOLinePrice As Double = 0
                    Dim CheckPLLineComment As String = ""
                    Dim CheckPLLinePrice As Double = 0
                    Dim CheckSOTaxOpen As Double = 0
                    Dim CheckSOLineBoxes As Double = 0
                    Dim CheckSOLineWeight As Double = 0
                    Dim CheckSOPieceWeight As Double = 0
                    Dim CheckSOBoxWeight As Double = 0
                    Dim CheckSOLineBoxesOpen As Double = 0
                    Dim CheckSOLineWeightOpen As Double = 0

                    For Each CheckRow As DataGridViewRow In dgvSalesOrderLines.Rows
                        Try
                            CheckSOLineKey = CheckRow.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As System.Exception
                            CheckSOLineKey = 1
                        End Try
                        Try
                            CheckSOLineQuantity = CheckRow.Cells("OpenSOQuantityColumn").Value
                        Catch ex As System.Exception
                            CheckSOLineQuantity = 0
                        End Try
                        Try
                            CheckSOLinePartNumber = CheckRow.Cells("ItemIDColumn").Value
                        Catch ex As System.Exception
                            CheckSOLinePartNumber = ""
                        End Try
                        Try
                            CheckSOLineComment = CheckRow.Cells("LineCommentColumn").Value
                        Catch ex As System.Exception
                            CheckSOLineComment = ""
                        End Try
                        Try
                            CheckSOLinePrice = CheckRow.Cells("PriceColumn").Value
                        Catch ex As System.Exception
                            CheckSOLinePrice = 0
                        End Try

                        Dim CheckPLLineQuantityStatement As String = "SELECT Quantity FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                        Dim CheckPLLineQuantityCommand As New SqlCommand(CheckPLLineQuantityStatement, con)
                        CheckPLLineQuantityCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CheckPLLineQuantityCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                        CheckPLLineQuantityCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber

                        Dim CheckPLLineCommentStatement As String = "SELECT LineComment FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                        Dim CheckPLLineCommentCommand As New SqlCommand(CheckPLLineCommentStatement, con)
                        CheckPLLineCommentCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CheckPLLineCommentCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                        CheckPLLineCommentCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber

                        Dim CheckPLLinePriceStatement As String = "SELECT Price FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                        Dim CheckPLLinePriceCommand As New SqlCommand(CheckPLLinePriceStatement, con)
                        CheckPLLinePriceCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CheckPLLinePriceCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                        CheckPLLinePriceCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckPLLineQuantity = CDbl(CheckPLLineQuantityCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckPLLineQuantity = 0
                        End Try
                        Try
                            CheckPLLineComment = CStr(CheckPLLineCommentCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckPLLineComment = ""
                        End Try
                        Try
                            CheckPLLinePrice = CDbl(CheckPLLinePriceCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckPLLinePrice = 0
                        End Try
                        con.Close()
                        '**************************************************************************************************
                        'Get Sales Order Data
                        Dim SalesTaxOpenStatement As String = "SELECT SalesTaxOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                        Dim SalesTaxOpenCommand As New SqlCommand(SalesTaxOpenStatement, con)
                        SalesTaxOpenCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        SalesTaxOpenCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = CheckSOLineKey

                        Dim BoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim BoxCountCommand As New SqlCommand(BoxCountStatement, con)
                        BoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber
                        BoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        Dim BoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim BoxWeightCommand As New SqlCommand(BoxWeightStatement, con)
                        BoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber
                        BoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        Dim PieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                        Dim PieceWeightCommand As New SqlCommand(PieceWeightStatement, con)
                        PieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = CheckSOLinePartNumber
                        PieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckSOTaxOpen = CDbl(SalesTaxOpenCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOTaxOpen = 0
                        End Try
                        Try
                            CheckSOLineBoxes = CInt(BoxCountCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOLineBoxes = 0
                        End Try
                        Try
                            CheckSOBoxWeight = CDbl(BoxWeightCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOBoxWeight = 0
                        End Try
                        Try
                            CheckSOPieceWeight = CDbl(PieceWeightCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOPieceWeight = 0
                        End Try
                        con.Close()
                        '****************************************************************************************************
                        'Determine Open Box Count
                        'Avoid Divide-By-Zero Error
                        If CheckSOLineBoxes = 0 Then
                            CheckSOLineBoxesOpen = 0
                            CheckSOLineWeightOpen = 0
                        Else
                            CheckSOLineBoxesOpen = CheckSOLineQuantity / CheckSOLineBoxes
                            CheckSOLineBoxesOpen = Math.Round(CheckSOLineBoxesOpen, 1)

                            If CheckSOBoxWeight = 0 Then
                                CheckSOLineWeightOpen = CheckSOPieceWeight * CheckSOLineQuantity
                                CheckSOLineWeightOpen = Math.Round(CheckSOLineWeightOpen, 2)
                            Else
                                CheckSOLineWeightOpen = CheckSOBoxWeight * CheckSOLineBoxesOpen
                                CheckSOLineWeightOpen = Math.Round(CheckSOLineWeightOpen, 2)
                            End If
                        End If

                        'Scan for changes
                        If CheckSOLineQuantity = CheckPLLineQuantity Then
                            CheckListCounter = CheckListCounter + 0
                        Else
                            'Update Quantity on Pick List and shipment
                            cmd = New SqlCommand("UPDATE PickListLineTable SET Quantity = @Quantity, ExtendedAmount = Price * @Quantity, SalesTax = @SalesTax, LineWeight = @LineWeight, LineBoxes = @LineBoxes WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@Quantity", SqlDbType.VarChar).Value = CheckSOLineQuantity
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                                .Add("@LineWeight", SqlDbType.VarChar).Value = CheckSOLineWeightOpen
                                .Add("@LineBoxes", SqlDbType.VarChar).Value = CheckSOLineBoxesOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE ShipmentLineTable SET QuantityShipped = @QuantityShipped, ExtendedAmount = Price * @QuantityShipped, SalesTax = @SalesTax, LineWeight = @LineWeight, LineBoxes = @LineBoxes WHERE ShipmentNumber = @ShipmentNumber AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@QuantityShipped", SqlDbType.VarChar).Value = CheckSOLineQuantity
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                                .Add("@LineWeight", SqlDbType.VarChar).Value = CheckSOLineWeightOpen
                                .Add("@LineBoxes", SqlDbType.VarChar).Value = CheckSOLineBoxesOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If

                        If CheckSOLineComment = CheckPLLineComment Then
                            CheckListCounter = CheckListCounter + 0
                        Else
                            'Update Line Comment on Pick List and shipment
                            cmd = New SqlCommand("UPDATE PickListLineTable SET LineComment = @LineComment WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@LineComment", SqlDbType.VarChar).Value = CheckSOLineComment
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE ShipmentLineTable SET LineComment = @LineComment WHERE ShipmentNumber = @ShipmentNumber AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@LineComment", SqlDbType.VarChar).Value = CheckSOLineComment
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If

                        If CheckSOLinePrice = CheckPLLinePrice Then
                            CheckListCounter = CheckListCounter + 0
                        Else
                            'Update Price on Pick List and shipment
                            cmd = New SqlCommand("UPDATE PickListLineTable SET Price = @Price, ExtendedAmount = Quantity * @Price, SalesTax = @SalesTax WHERE PickListHeaderKey = @PickListHeaderKey AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@Price", SqlDbType.VarChar).Value = CheckSOLinePrice
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            cmd = New SqlCommand("UPDATE ShipmentLineTable SET Price = @Price, ExtendedAmount = QuantityShipped * @Price, SalesTax = @SalesTax WHERE ShipmentNumber = @ShipmentNumber AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = CheckSOLineKey
                                .Add("@Price", SqlDbType.VarChar).Value = CheckSOLinePrice
                                .Add("@SalesTax", SqlDbType.VarChar).Value = CheckSOTaxOpen
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        End If

                        'Clear Variables used in the For/Each Loop before next reiteration
                        CheckSOLineKey = 0
                        CheckSOLineQuantity = 0
                        CheckPLLineQuantity = 0
                        CheckSOLinePartNumber = ""
                        CheckSOLineComment = ""
                        CheckSOLinePrice = 0
                        CheckPLLineComment = ""
                        CheckPLLinePrice = 0
                        CheckSOTaxOpen = 0
                        CheckSOLineBoxes = 0
                        CheckSOLineWeight = 0
                        CheckSOPieceWeight = 0
                        CheckSOBoxWeight = 0
                        CheckSOLineBoxesOpen = 0
                        CheckSOLineWeightOpen = 0
                    Next
                    '*****************************************************
                    If CheckListCounter = 0 Then
                        LineChangesMade = "NO"
                    Else
                        LineChangesMade = "YES"
                    End If
                    '******************************************************
                    'Count open lines on SO and compare to pick lines
                    Dim CountOpenLines As Integer = 0
                    Dim CountPickLines As Integer = 0

                    Dim CountOpenLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey AND QuantityOpen > 0 AND LineStatus <> 'CLOSED'"
                    Dim CountOpenLinesCommand As New SqlCommand(CountOpenLinesStatement, con)
                    CountOpenLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    CountOpenLinesCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim CountPickLinesStatement As String = "SELECT COUNT(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                    Dim CountPickLinesCommand As New SqlCommand(CountPickLinesStatement, con)
                    CountPickLinesCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                    CountPickLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        CountOpenLines = CInt(CountOpenLinesCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        CountOpenLines = 0
                    End Try
                    Try
                        CountPickLines = CInt(CountPickLinesCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        CountPickLines = 0
                    End Try
                    con.Close()

                    If CountOpenLines = CountPickLines Then
                        'Check to see if the open lines match the pick ticket lines
                        Dim RecheckSOLine As Integer = 0
                        Dim RecheckOpenQuantity As Double = 0
                        Dim RecheckPickLine As Integer = 0
                        Dim RecheckPartNumber As String = ""

                        For Each CountRow As DataGridViewRow In dgvSalesOrderLines.Rows
                            Try
                                RecheckSOLine = CountRow.Cells("SalesOrderLineKeyColumn").Value
                            Catch ex As System.Exception
                                RecheckSOLine = 1
                            End Try
                            Try
                                RecheckOpenQuantity = CountRow.Cells("OpenSOQuantityColumn").Value
                            Catch ex As System.Exception
                                RecheckOpenQuantity = 0
                            End Try
                            Try
                                RecheckPartNumber = CountRow.Cells("ItemIDColumn").Value
                            Catch ex As System.Exception
                                RecheckPartNumber = ""
                            End Try

                            If RecheckOpenQuantity > 0 Then
                                Dim RecheckPickLineStatement As String = "SELECT COUNT(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID AND SOLineNumber = @SOLineNumber AND ItemID = @ItemID"
                                Dim RecheckPickLineCommand As New SqlCommand(RecheckPickLineStatement, con)
                                RecheckPickLineCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                RecheckPickLineCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                RecheckPickLineCommand.Parameters.Add("@SOLineNumber", SqlDbType.VarChar).Value = RecheckSOLine
                                RecheckPickLineCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = RecheckPartNumber

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    RecheckPickLine = CInt(RecheckPickLineCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    RecheckPickLine = 0
                                End Try
                                con.Close()

                                If RecheckPickLine = 0 Then
                                    'Sales Order Line does not exit on the pick ticket - you must re-write the lines
                                    LineChangesMade = "YES"
                                    Exit For
                                Else
                                    'continue
                                End If
                            End If

                            'Sales order lines match pick lines
                            LineChangesMade = "NO"
                        Next
                    Else
                        LineChangesMade = "YES"
                    End If
                    '**********************************************************************************
                    If LineChangesMade = "YES" Then
                        'Delete existing lines from the Pick List line table and re-write
                        cmd = New SqlCommand("DELETE FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                        '****************************************************************************************************
                        'After writing header to Pick List, extract line data and write to Pick List Line Table
                        Dim SLSalesOrderLineKey As Integer
                        Dim SLItemID, SLDescription, SLLineComment, LineCertType, GLDebitAccount, GLCreditAccount As String
                        Dim SLPrice, SLOpenQuantity, LineBoxWeight, LinePieceWeight As Double

                        For Each LineRow As DataGridViewRow In dgvSalesOrderLines.Rows
                            Dim LineCell As DataGridViewTextBoxCell = LineRow.Cells("SalesOrderKeyColumn")
                            Dim LineCell1 As DataGridViewTextBoxCell = LineRow.Cells("OpenSOQuantityColumn")

                            If LineCell.Value = cboSalesOrderNumber.Text And LineCell1.Value > 0 Then
                                Try
                                    SLSalesOrderLineKey = LineRow.Cells("SalesOrderLineKeyColumn").Value
                                Catch ex As System.Exception
                                    SLSalesOrderLineKey = 1
                                End Try
                                Try
                                    SLItemID = LineRow.Cells("ItemIDColumn").Value
                                Catch ex As System.Exception
                                    SLItemID = ""
                                End Try
                                Try
                                    SLDescription = LineRow.Cells("DescriptionColumn").Value
                                Catch ex As System.Exception
                                    SLDescription = ""
                                End Try
                                Try
                                    SLOpenQuantity = LineRow.Cells("OpenSOQuantityColumn").Value
                                Catch ex As System.Exception
                                    SLOpenQuantity = 0
                                End Try
                                Try
                                    SLPrice = LineRow.Cells("PriceColumn").Value
                                Catch ex As System.Exception
                                    SLPrice = 0
                                End Try
                                Try
                                    SLLineComment = LineRow.Cells("LineCommentColumn").Value
                                Catch ex As System.Exception
                                    SLLineComment = ""
                                End Try
                                Try
                                    GLDebitAccount = LineRow.Cells("DebitGLAccountColumn").Value
                                Catch ex As System.Exception
                                    GLDebitAccount = "49999"
                                End Try
                                Try
                                    GLCreditAccount = LineRow.Cells("CreditGLAccountColumn").Value
                                Catch ex As System.Exception
                                    GLCreditAccount = "12100"
                                End Try
                                Try
                                    LineCertType = LineRow.Cells("CertificationTypeColumn").Value
                                Catch ex As System.Exception
                                    LineCertType = "0"
                                End Try
                                '****************************************************************************************************
                                'Extract Open Sales Tax, weights, and box counts for lines
                                Dim SalesTaxOpenStatement As String = "SELECT SalesTaxOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                                Dim SalesTaxOpenCommand As New SqlCommand(SalesTaxOpenStatement, con)
                                SalesTaxOpenCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                SalesTaxOpenCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = SLSalesOrderLineKey

                                Dim BoxCountStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim BoxCountCommand As New SqlCommand(BoxCountStatement, con)
                                BoxCountCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                BoxCountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                Dim BoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim BoxWeightCommand As New SqlCommand(BoxWeightStatement, con)
                                BoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                BoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                Dim PieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim PieceWeightCommand As New SqlCommand(PieceWeightStatement, con)
                                PieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                PieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    SalesTaxOpen = CDbl(SalesTaxOpenCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    SalesTaxOpen = 0
                                End Try
                                Try
                                    LineBoxCount = CInt(BoxCountCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LineBoxCount = 0
                                End Try
                                Try
                                    LineBoxWeight = CDbl(BoxWeightCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LineBoxWeight = 0
                                End Try
                                Try
                                    LinePieceWeight = CDbl(PieceWeightCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LinePieceWeight = 0
                                End Try
                                con.Close()
                                '****************************************************************************************************
                                'Determine Open Box Count
                                'Avoid Divide-By-Zero Error
                                If LineBoxCount = 0 Then
                                    LineBoxesOpen = 0
                                    LineWeightOpen = LinePieceWeight * SLOpenQuantity
                                    LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                Else
                                    LineBoxesOpen = SLOpenQuantity / LineBoxCount
                                    LineBoxesOpen = Math.Round(LineBoxesOpen, 1)

                                    If LineBoxWeight = 0 Then
                                        LineWeightOpen = LinePieceWeight * SLOpenQuantity
                                        LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                    Else
                                        LineWeightOpen = LineBoxWeight * LineBoxesOpen
                                        LineWeightOpen = Math.Round(LineWeightOpen, 2)
                                    End If
                                End If
                                '****************************************************************************************************
                                'Get Quantity On Hand for Pick Ticket
                                Dim PickQOHStatement As String = "SELECT QuantityOnHand FROM ADMInventoryTotal WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                                Dim PickQOHCommand As New SqlCommand(PickQOHStatement, con)
                                PickQOHCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                PickQOHCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    PickQOH = CDbl(PickQOHCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    PickQOH = 0
                                End Try
                                con.Close()
                                '****************************************************************************************************
                                OpenExtendedAmount = SLOpenQuantity * SLPrice
                                '****************************************************************************************************
                                'Don not write sales tax to lines if Canadian
                                If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                                    SalesTaxOpen = 0
                                End If
                                '****************************************************************************************************
                                'Add new line to Pick List Line Table
                                'Get Next Line Number
                                Dim PickLineNumberStatement As String = "SELECT MAX(PickListLineKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                                Dim PickLineNumberCommand As New SqlCommand(PickLineNumberStatement, con)
                                PickLineNumberCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                PickLineNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                                If con.State = ConnectionState.Closed Then con.Open()
                                Try
                                    LastPickLineNumber = CInt(PickLineNumberCommand.ExecuteScalar)
                                Catch ex As System.Exception
                                    LastPickLineNumber = 0
                                End Try
                                con.Close()

                                NextPickLineNumber = LastPickLineNumber + 1

                                'Write Sales Order Data to Pick List Line Table
                                cmd = New SqlCommand("Insert Into PickListLineTable(PickListHeaderKey, PickListLineKey, ItemID, Description, Quantity, Price, SalesTax, ExtendedAmount, LineComment, LineStatus, DivisionID, LineWeight, LineBoxes, GLDebitAccount, GLCreditAccount, CertificationType, SOLineNumber, SerialNumber, QOH) Values (@PickListHeaderKey, @PickListLineKey, @ItemID, @Description, @Quantity, @Price, @SalesTax, @ExtendedAmount, @LineComment, @LineStatus, @DivisionID, @LineWeight, @LineBoxes, @GLDebitAccount, @GLCreditAccount, @CertificationType, @SOLineNumber, @SerialNumber, @QOH)", con)

                                With cmd.Parameters
                                    .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                    .Add("@PickListLineKey", SqlDbType.VarChar).Value = NextPickLineNumber
                                    .Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                                    .Add("@Description", SqlDbType.VarChar).Value = SLDescription
                                    .Add("@Quantity", SqlDbType.VarChar).Value = SLOpenQuantity
                                    .Add("@Price", SqlDbType.VarChar).Value = SLPrice
                                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTaxOpen
                                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = OpenExtendedAmount
                                    .Add("@LineComment", SqlDbType.VarChar).Value = SLLineComment
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeightOpen
                                    .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxesOpen
                                    .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                    .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                    .Add("@CertificationType", SqlDbType.VarChar).Value = LineCertType
                                    .Add("@SOLineNumber", SqlDbType.VarChar).Value = SLSalesOrderLineKey
                                    .Add("@SerialNumber", SqlDbType.VarChar).Value = ""
                                    .Add("@QOH", SqlDbType.VarChar).Value = PickQOH
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            End If
                        Next
                    Else
                        'Skip lines
                    End If
                    '****************************************************************************************************
                    Try
                        'Write Data to Shipment Header Table
                        cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipDate = @ShipDate, Comment = @Comment, PickTicketNumber = @PickTicketNumber, ShipVia = @ShipVia, PRONumber = @PRONumber, FreightQuoteNumber = @FreightQuoteNumber, FreightQuoteAmount = @FreightQuoteAmount, FreightActualAmount = @FreightActualAmount, ShippingWeight = @ShippingWeight, NumberOfPallets = @NumberOfPallets, CustomerID = @CustomerID, ShipToID = @ShipToID, ShipAddress1 = @ShipAddress1, ShipAddress2 = @ShipAddress2, ShipCity = @ShipCity, ShipState = @ShipState, ShipZip = @ShipZip, ShipCountry = @ShipCountry, CustomerPO = @CustomerPO, ShipmentStatus = @ShipmentStatus, ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, SalesmanID = @SalesmanID, SpecialInstructions = @SpecialInstructions, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total, CustomerClass = @CustomerClass, FOB = @FOB, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1, SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3 WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            .Add("@ShipDate", SqlDbType.VarChar).Value = ShippingDate
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                            .Add("@PickTicketNumber", SqlDbType.VarChar).Value = GetPickListNumber
                            .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                            .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                            .Add("@FreightQuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                            .Add("@FreightQuoteAmount", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                            .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                            .Add("@ShippingWeight", SqlDbType.VarChar).Value = 0
                            .Add("@NumberOfPallets", SqlDbType.VarChar).Value = 1
                            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                            .Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
                            .Add("@ShipAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                            .Add("@ShipAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                            .Add("@ShipCity", SqlDbType.VarChar).Value = txtSTCity.Text
                            .Add("@ShipState", SqlDbType.VarChar).Value = txtSTState.Text
                            .Add("@ShipZip", SqlDbType.VarChar).Value = txtSTZip.Text
                            .Add("@ShipCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                            .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                            .Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"
                            .Add("@ProductTotal", SqlDbType.VarChar).Value = 0
                            .Add("@TaxTotal", SqlDbType.VarChar).Value = 0
                            .Add("@ShipmentTotal", SqlDbType.VarChar).Value = 0
                            .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                            .Add("@SalesmanID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                            .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                            .Add("@Tax2Total", SqlDbType.VarChar).Value = 0
                            .Add("@Tax3Total", SqlDbType.VarChar).Value = 0
                            .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                            .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                            .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                            .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                            .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                            .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                            .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                            .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                            .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                            .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempShipNumber2 As Integer = 0
                        Dim strShipNumber As String
                        TempShipNumber2 = NextShipmentNumber
                        strShipNumber = CStr(TempShipNumber2)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Save SO --- Update Shipment Header Failure (L12931)"
                        ErrorReferenceNumber = "Shipment # " + strShipNumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()
                    End Try
                    '**********************************************************************************************************************
                    'If no changes made to sales order lines, skip line routine
                    '**********************************************************************************************************************
                    If LineChangesMade = "YES" Then
                        'After Pick List is updated or re-created, get existing shipment line data and write to Pick List Line Table to preserve

                        'Count Shipment Lines and run routine for each line
                        Dim CountShipLinesStatement As String = "SELECT Count(ShipmentNumber) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber and DivisionID = @DivisionID"
                        Dim CountShipLinesCommand As New SqlCommand(CountShipLinesStatement, con)
                        CountShipLinesCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                        CountShipLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CountShipLines = CInt(CountShipLinesCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CountShipLines = 0
                        End Try
                        con.Close()

                        Dim TempShipNumber As Integer = 1
                        Dim SHSOLineNumber As Integer
                        Dim SHLineComment As String

                        For i As Integer = 1 To CountShipLines
                            'Get SO Line Number from Shipment Line Table
                            Dim SHSOLineNumberStatement As String = "SELECT SOLineNumber, SerialNumber FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND ShipmentLineNumber = @ShipmentLineNumber AND DivisionID = @DivisionID"
                            Dim SHSOLineNumberCommand As New SqlCommand(SHSOLineNumberStatement, con)
                            SHSOLineNumberCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            SHSOLineNumberCommand.Parameters.Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = TempShipNumber
                            SHSOLineNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                            If con.State = ConnectionState.Closed Then con.Open()
                            reader = SHSOLineNumberCommand.ExecuteReader()
                            If reader.HasRows Then
                                reader.Read()
                                If IsDBNull(reader.Item("SOLineNumber")) Then
                                    SHSOLineNumber = 0
                                Else
                                    SHSOLineNumber = reader.Item("SOLineNumber")
                                End If
                                If IsDBNull(reader.Item("SerialNumber")) Then
                                    SHLineComment = ""
                                Else
                                    SHLineComment = reader.Item("SerialNumber")
                                End If
                            Else
                                SHSOLineNumber = 0
                                SHLineComment = ""
                            End If
                            reader.Close()
                            con.Close()

                            'Update new pick list lines with Line Comments
                            cmd = New SqlCommand("UPDATE PickListLineTable SET SerialNumber = @SerialNumber WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID AND SOLineNumber = @SOLineNumber", con)

                            With cmd.Parameters
                                .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                .Add("@SOLineNumber", SqlDbType.VarChar).Value = SHSOLineNumber
                                .Add("@SerialNumber", SqlDbType.VarChar).Value = SHLineComment
                            End With

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()

                            TempShipNumber = TempShipNumber + 1
                        Next i

                        GlobalSOShipmentNumber = GetShipmentNumber
                        '***************************************************************************************************
                        'Delete existing shipment lines before re-writing
                        cmd = New SqlCommand("DELETE FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                        '***************************************************************************************************
                        'Add Lines to Shipment Line Table

                        'Count Lines in Pick List
                        Dim CountLinesStatement As String = "SELECT Count(PickListHeaderKey) FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID"
                        Dim CountLinesCommand As New SqlCommand(CountLinesStatement, con)
                        CountLinesCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                        CountLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CountLines = CInt(CountLinesCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CountLines = 0
                        End Try
                        con.Close()

                        ShipmentLineNumber = 1
                        '****************************************************************************************************
                        For i As Integer = 1 To CountLines
                            'Extract Line Data from Pick List Line Table
                            Dim ItemIDStatement As String = "SELECT ItemID, Description, Quantity, Price, SalesTax, ExtendedAmount, LineComment, LineWeight, LineBoxes, GLDebitAccount, GLCreditAccount, CertificationType, SOLineNumber, SerialNumber FROM PickListLineTable WHERE PickListHeaderKey = @PickListHeaderKey AND PickListLineKey = @PickListLineKey"
                            Dim ItemIDCommand As New SqlCommand(ItemIDStatement, con)
                            ItemIDCommand.Parameters.Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GetPickListNumber
                            ItemIDCommand.Parameters.Add("@PickListLineKey", SqlDbType.VarChar).Value = ShipmentLineNumber

                            If con.State = ConnectionState.Closed Then con.Open()
                            reader = ItemIDCommand.ExecuteReader()
                            If reader.HasRows Then
                                reader.Read()
                                If IsDBNull(reader.Item("ItemID")) Then
                                    ItemID = ""
                                Else
                                    ItemID = reader.Item("ItemID")
                                End If
                                If IsDBNull(reader.Item("Description")) Then
                                    Description = ""
                                Else
                                    Description = reader.Item("Description")
                                End If
                                If IsDBNull(reader.Item("Quantity")) Then
                                    Quantity = 0
                                Else
                                    Quantity = reader.Item("Quantity")
                                End If
                                If IsDBNull(reader.Item("Price")) Then
                                    Price = 0
                                Else
                                    Price = reader.Item("Price")
                                End If
                                If IsDBNull(reader.Item("SalesTax")) Then
                                    SalesTax = 0
                                Else
                                    SalesTax = reader.Item("SalesTax")
                                End If
                                If IsDBNull(reader.Item("ExtendedAmount")) Then
                                    ExtendedAmount = 0
                                Else
                                    ExtendedAmount = reader.Item("ExtendedAmount")
                                End If
                                If IsDBNull(reader.Item("LineComment")) Then
                                    LineComment = ""
                                Else
                                    LineComment = reader.Item("LineComment")
                                End If
                                If IsDBNull(reader.Item("LineWeight")) Then
                                    LineWeight = 0
                                Else
                                    LineWeight = reader.Item("LineWeight")
                                End If
                                If IsDBNull(reader.Item("LineBoxes")) Then
                                    LineBoxes = 0
                                Else
                                    LineBoxes = reader.Item("LineBoxes")
                                End If
                                If IsDBNull(reader.Item("GLDebitAccount")) Then
                                    GLDebitAccount = "49999"
                                Else
                                    GLDebitAccount = reader.Item("GLDebitAccount")
                                End If
                                If IsDBNull(reader.Item("GLCreditAccount")) Then
                                    GLCreditAccount = "12100"
                                Else
                                    GLCreditAccount = reader.Item("GLCreditAccount")
                                End If
                                If IsDBNull(reader.Item("CertificationType")) Then
                                    CertificationType = "0"
                                Else
                                    CertificationType = reader.Item("CertificationType")
                                End If
                                If IsDBNull(reader.Item("SOLineNumber")) Then
                                    PLSOLineNumber = 0
                                Else
                                    PLSOLineNumber = reader.Item("SOLineNumber")
                                End If
                                If IsDBNull(reader.Item("SerialNumber")) Then
                                    SerialNumber = ""
                                Else
                                    SerialNumber = reader.Item("SerialNumber")
                                End If
                            Else
                                ItemID = ""
                                Description = ""
                                Quantity = 0
                                Price = 0
                                SalesTax = 0
                                ExtendedAmount = 0
                                LineComment = ""
                                LineWeight = 0
                                LineBoxes = 0
                                GLDebitAccount = "49999"
                                GLCreditAccount = "12100"
                                CertificationType = "0"
                                PLSOLineNumber = 0
                                SerialNumber = ""
                            End If
                            reader.Close()
                            con.Close()
                            '****************************************************************************************************
                            'If TFF do not write to sales tax lines
                            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                                SalesTax = 0
                            End If

                            'If TWD, get box weight from Item List
                            Dim GetBoxWeightStatement As String = "SELECT BoxWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                            Dim GetBoxWeightCommand As New SqlCommand(GetBoxWeightStatement, con)
                            GetBoxWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = ItemID
                            GetBoxWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                            If con.State = ConnectionState.Closed Then con.Open()
                            Try
                                GetBoxWeight = CDbl(GetBoxWeightCommand.ExecuteScalar)
                            Catch ex As System.Exception
                                GetBoxWeight = 0
                            End Try
                            con.Close()

                            'SalesTax = Math.Round(SalesTax, 2)
                            ExtendedAmount = Math.Round(ExtendedAmount, 2)
                            LineBoxes = Math.Ceiling(LineBoxes)
                            '************************************************************************************************
                            Try
                                'Write Pick List Line data to Shipment Line Table
                                cmd = New SqlCommand("Insert Into ShipmentLineTable(ShipmentNumber, ShipmentLineNumber, PartNumber, PartDescription, QuantityShipped, Price, LineComment, LineWeight, LineBoxes, SalesTax, ExtendedAmount, LineStatus, DivisionID, GLDebitAccount, GLCreditAccount, CertificationType, ExtendedCOS, SOLineNumber, SerialNumber, Dropship, BoxWeight) Values (@ShipmentNumber, @ShipmentLineNumber, @PartNumber, @PartDescription, @QuantityShipped, @Price, @LineComment, @LineWeight, @LineBoxes, @SalesTax, @ExtendedAmount, @LineStatus, @DivisionID, @GLDebitAccount, @GLCreditAccount, @CertificationType, @ExtendedCOS, @SOLineNumber, @SerialNumber, @Dropship, @BoxWeight)", con)

                                With cmd.Parameters
                                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                    .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                                    .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                                    .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                                    .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                                    .Add("@Price", SqlDbType.VarChar).Value = Price
                                    .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                                    .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                                    .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                    .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                    .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                                    .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                                    .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                                    .Add("@SerialNumber", SqlDbType.VarChar).Value = SerialNumber
                                    .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                                    .Add("@BoxWeight", SqlDbType.VarChar).Value = GetBoxWeight
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            Catch ex As System.Exception
                                'Write Pick List Line data to Shipment Line Table
                                cmd = New SqlCommand("UPDATE ShipmentLineTable SET PartNumber = @PartNumber, PartDescription = @PartDescription, QuantityShipped = @QuantityShipped, Price = @Price, LineComment = @LineComment, LineWeight = @LineWeight, LineBoxes = @LineBoxes, SalesTax = @SalesTax, ExtendedAmount = @ExtendedAmount, LineStatus = @LineStatus, GLDebitAccount = @GLDebitAccount, GLCreditAccount = @GLCreditAccount, CertificationType = @CertificationType, ExtendedCOS = @ExtendedCOS, SOLineNumber = @SOLineNumber, SerialNumber = @SerialNumber, Dropship = @Dropship, BoxWeight = @BoxWeight WHERE ShipmentNumber = @ShipmentNumber AND ShipmentLineNumber = @ShipmentLineNumber AND DivisionID = @DivisionID", con)

                                With cmd.Parameters
                                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                                    .Add("@ShipmentLineNumber", SqlDbType.VarChar).Value = ShipmentLineNumber
                                    .Add("@PartNumber", SqlDbType.VarChar).Value = ItemID
                                    .Add("@PartDescription", SqlDbType.VarChar).Value = Description
                                    .Add("@QuantityShipped", SqlDbType.VarChar).Value = Quantity
                                    .Add("@Price", SqlDbType.VarChar).Value = Price
                                    .Add("@LineComment", SqlDbType.VarChar).Value = LineComment
                                    .Add("@LineWeight", SqlDbType.VarChar).Value = LineWeight
                                    .Add("@LineBoxes", SqlDbType.VarChar).Value = LineBoxes
                                    .Add("@SalesTax", SqlDbType.VarChar).Value = SalesTax
                                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = ExtendedAmount
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "PENDING"
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@GLDebitAccount", SqlDbType.VarChar).Value = GLDebitAccount
                                    .Add("@GLCreditAccount", SqlDbType.VarChar).Value = GLCreditAccount
                                    .Add("@CertificationType", SqlDbType.VarChar).Value = CertificationType
                                    .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                                    .Add("@SOLineNumber", SqlDbType.VarChar).Value = PLSOLineNumber
                                    .Add("@SerialNumber", SqlDbType.VarChar).Value = SerialNumber
                                    .Add("@Dropship", SqlDbType.VarChar).Value = "NO"
                                    .Add("@BoxWeight", SqlDbType.VarChar).Value = GetBoxWeight
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            End Try
                            '************************************************************************************************
                            ShipmentLineNumber = ShipmentLineNumber + 1
                        Next i
                    Else
                        'Slip line routine
                    End If
                    '****************************************************************************************************
                    'Total Lines to get Shipment Header Totals
                    Dim LineProductTotalStatement As String = "SELECT SUM(ExtendedAmount) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                    Dim LineProductTotalCommand As New SqlCommand(LineProductTotalStatement, con)
                    LineProductTotalCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                    LineProductTotalCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim LineProductWeightStatement As String = "SELECT SUM(LineWeight) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                    Dim LineProductWeightCommand As New SqlCommand(LineProductWeightStatement, con)
                    LineProductWeightCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                    LineProductWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    Dim LineSalesTaxStatement As String = "SELECT SUM(SalesTax) FROM ShipmentLineTable WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID"
                    Dim LineSalesTaxCommand As New SqlCommand(LineSalesTaxStatement, con)
                    LineSalesTaxCommand.Parameters.Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                    LineSalesTaxCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        LineProductTotal = CDbl(LineProductTotalCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LineProductTotal = 0
                    End Try
                    Try
                        LineProductWeight = CDbl(LineProductWeightCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LineProductWeight = 0
                    End Try
                    Try
                        LineSalesTax = CDbl(LineSalesTaxCommand.ExecuteScalar)
                    Catch ex As System.Exception
                        LineSalesTax = 0
                    End Try
                    con.Close()
                    '****************************************************************************************************
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        LoadCanadianTaxRates()
                        FreightCharge = Val(txtFreightCharges.Text)

                        If chkAddPST.Checked = True Then
                            PSTExtendedAmount = PSTTaxRate * (LineProductTotal + FreightCharge)
                            LineSalesTax = GSTTaxRate * (LineProductTotal + FreightCharge)
                            HSTExtendedAmount = 0
                        ElseIf chkAddHST.Checked = True Then
                            HSTExtendedAmount = Val(txtHSTRate.Text) * (LineProductTotal + FreightCharge)
                            PSTExtendedAmount = 0
                            LineSalesTax = 0
                        Else
                            HSTExtendedAmount = 0
                            PSTExtendedAmount = 0
                            LineSalesTax = (LineProductTotal + FreightCharge) * GSTTaxRate
                        End If

                        'Get Tax Totals if Canadian
                        ShipmentTotal = LineSalesTax + PSTExtendedAmount + HSTExtendedAmount + LineProductTotal + Val(txtFreightCharges.Text)

                        LineSalesTax = Math.Round(LineSalesTax, 2)
                        PSTExtendedAmount = Math.Round(PSTExtendedAmount, 2)
                        HSTExtendedAmount = Math.Round(HSTExtendedAmount, 2)
                        LineProductTotal = Math.Round(LineProductTotal, 2)
                        ShipmentTotal = Math.Round(ShipmentTotal, 2)
                    Else
                        'Get Tax Totals if American
                        ShipmentTotal = LineSalesTax + LineProductTotal + Val(txtFreightCharges.Text)

                        LineSalesTax = Math.Round(LineSalesTax, 2)
                        LineProductTotal = Math.Round(LineProductTotal, 2)
                        ShipmentTotal = Math.Round(ShipmentTotal, 2)
                    End If
                    '****************************************************************************************************
                    'Update Totals in Shipment Header Table
                    cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ProductTotal = @ProductTotal, TaxTotal = @TaxTotal, ShipmentTotal = @ShipmentTotal, ShippingWeight = @ShippingWeight, Tax2Total = @Tax2Total, Tax3Total = @Tax3Total, FreightActualAmount = @FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                    With cmd.Parameters
                        .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        .Add("@ProductTotal", SqlDbType.VarChar).Value = LineProductTotal
                        .Add("@TaxTotal", SqlDbType.VarChar).Value = LineSalesTax
                        .Add("@ShipmentTotal", SqlDbType.VarChar).Value = ShipmentTotal
                        .Add("@ShippingWeight", SqlDbType.VarChar).Value = LineProductWeight
                        .Add("@Tax2Total", SqlDbType.VarChar).Value = PSTExtendedAmount
                        .Add("@Tax3Total", SqlDbType.VarChar).Value = HSTExtendedAmount
                        .Add("@FreightActualAmount", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                    '****************************************************************************************************
                    'Update Totals in Shipment Header Table
                    cmd = New SqlCommand("UPDATE ShipmentHeaderTable SET ShipmentTotal = ProductTotal + TaxTotal + Tax2Total + Tax3Total + FreightActualAmount WHERE ShipmentNumber = @ShipmentNumber AND DivisionID = @DivisionID", con)

                    With cmd.Parameters
                        .Add("@ShipmentNumber", SqlDbType.VarChar).Value = GetShipmentNumber
                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                    '****************************************************************************************************
                    If cboShipVia.Text.StartsWith("UPS-") Or cboShipVia.Text.StartsWith("FDX-") Then
                        txtDeclaredValue.Text = ShipmentTotal

                        If Val(txtDeclaredValue.Text) > 0 Then
                            DeclaredValue = Val(txtDeclaredValue.Text)
                        Else
                            If ShipmentTotal > 101 Then
                                If LineProductWeight > 200 Then
                                    MsgBox("Open weight is > 200 lbs. Check declared value if shipping less.", MsgBoxStyle.OkOnly)
                                    DeclaredValue = ShipmentTotal
                                Else
                                    DeclaredValue = ShipmentTotal
                                End If
                            Else
                                DeclaredValue = 0
                            End If
                        End If

                        'Update Totals in Shipment Header Table
                        cmd = New SqlCommand("UPDATE PickListHeaderTable SET DeclaredValue = @DeclaredValue WHERE PickListHeaderKey = @PickListHeaderKey AND DivisionID = @DivisionID", con)

                        With cmd.Parameters
                            .Add("@PickListHeaderKey", SqlDbType.VarChar).Value = GlobalSOPickNumber
                            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            .Add("@DeclaredValue", SqlDbType.VarChar).Value = DeclaredValue
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Else
                        'Do nothing
                    End If
                    '****************************************************************************************************
                    'Update sales order header table to shipped status
                    cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                        .Add("@SOStatus", SqlDbType.VarChar).Value = "SHIPPED"
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                    '******************************************************************************************************
                    'Update Line Status
                    '***********************************************************************
                    For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                        Try
                            LineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As Exception
                            LineNumber = 0
                        End Try

                        'Check Line Status and open or close lines as needed
                        Dim CheckOpenQuantity As Double = 0

                        Dim CheckOpenQuantityStatement As String = "SELECT QuantityOpen FROM SalesOrderQuantityStatus WHERE DivisionKey = @DivisionKey AND SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                        Dim CheckOpenQuantityCommand As New SqlCommand(CheckOpenQuantityStatement, con)
                        CheckOpenQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                        CheckOpenQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        CheckOpenQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckOpenQuantity = CDbl(CheckOpenQuantityCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckOpenQuantity = 0
                        End Try
                        con.Close()

                        If CheckOpenQuantity = 0 Then
                            'Update Line table in case of datagrid changes
                            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                            cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        Else
                            If chkDropShip.Checked = True Then
                                'Update Line table in case of datagrid changes
                                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "DROPSHIP"

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            Else
                                'Update Line table in case of datagrid changes
                                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            End If
                        End If
                    Next
                    '***************************************************************************************
                    txtSOStatus.Text = "SHIPPED"
                    LineChangesMade = "NO"
                    needsSaved = False

                    ShowData()
                    '****************************************************************************************************
                    MsgBox("Changes have been saved and Pick Ticket and Pack List updated.", MsgBoxStyle.OkOnly)
                ElseIf button1 = DialogResult.No Then
                    MsgBox("No changes have been saved", MsgBoxStyle.OkOnly)
                End If
                '************************************************************************************************************
                '
            Else
                '
                '************************************************************************************************************
                'Prompt before Saving
                Dim button As DialogResult = MessageBox.Show("Do you wish to save this Sales Order?", "SAVE SALES ORDER", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                If button = DialogResult.Yes Then
                    '****************************************************************************************************
                    'Save all updates to Sales Order Header Table
                    ValidateShippingMethod()

                    If CheckShippingMethod = "EXIT SUB" Then
                        MsgBox("You must select a valid shipping method.", MsgBoxStyle.OkOnly)
                        CheckShippingMethod = ""
                        Exit Sub
                    End If
                    '********************************************************************************************************
                    'Add or save Ship To Address if necessary
                    If cboShipToID.Text = "" Then
                        'Do nothing - default ship to
                    Else
                        Try
                            SaveInsertAdditionalShipTo()
                        Catch ex As System.Exception
                            SaveUpdateAdditionalShipTo()
                        End Try
                    End If
                    '********************************************************************************************************
                    'Recalculate line totals
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET ExtendedAmount = Quantity * Price", con)

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                    '****************************************************************************************************
                    'Load Tax rates based on User Entry
                    LoadSalesOrderTaxRates()
                    '****************************************************************************************************
                    'Calculate Totals and Update the Header Table
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        CalculateCanadianTotals()
                    Else
                        RecalculateLineTaxTotals()
                        CalculateTotals()
                    End If
                    '***************************************************************************************
                    If txtSOStatus.Text = "OPEN" Then
                        'Determine Shipping Status (if changed)
                        If chkDropShip.Checked = True Then
                            SOStatus = "DROPSHIP"
                            txtSOStatus.Text = SOStatus
                        Else
                            txtSOStatus.Text = "OPEN"
                        End If
                    Else
                        'SO Status is correct
                    End If
                    '***************************************************************************************
                    'Set default delivery type for companies
                    If cboShipVia.Text = "" And cboDivisionID.Text = "CBS" Then
                        cboShipVia.Text = "Will Call"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "SLC" Then
                        cboShipVia.Text = "SEE SALESMAN"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ATL" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWE" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TWD" Then
                        cboShipVia.Text = ""
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CHT" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "HOU" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFT" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TFF" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "CGO" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "TOR" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "DEN" Then
                        cboShipVia.Text = "Delivery"
                    ElseIf cboShipVia.Text = "" And cboDivisionID.Text = "ALB" Then
                        cboShipVia.Text = "Delivery"
                    Else
                        'Do nothing
                    End If
                    '****************************************************************************************************
                    If cboSalesPersonID.Text = "" Then
                        cboSalesPersonID.Text = EmployeeSalespersonCode
                    Else
                        'Do nothing
                    End If
                    '****************************************************************************************************
                    SalesOrderDate = dtpSalesOrderDate.Value
                    ShippingDate = dtpShippingDate.Value
                    '******************************************************************************************************
                    'Verify Country Code exists for the ship to address
                    If txtSTCountry.Text = "" And txtSTState.Text <> "" Then
                        StateCode = txtSTState.Text
                        LoadCountryCodeFromState()

                        txtSTCountry.Text = CountryCodeFromState
                        cboSTCountryName.Text = CountryNameFromState
                    End If
                    '******************************************************************************************************
                    'Update Sales Order Header
                    SOStatus = txtSOStatus.Text

                    SaveUpdateSalesOrderHeader()
                    '********************************************************************************************************
                    'Run routine to check if there are open SO Lines
                    For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                        Try
                            LineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As System.Exception
                            LineNumber = 0
                        End Try

                        Dim VerifyOpenAmountStatement As String = "SELECT QuantityOpen FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                        Dim VerifyOpenAmountCommand As New SqlCommand(VerifyOpenAmountStatement, con)
                        VerifyOpenAmountCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                        VerifyOpenAmountCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            QuantityOpen = CDbl(VerifyOpenAmountCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            QuantityOpen = 0
                        End Try
                        con.Close()

                        TotalQuantityOpen = TotalQuantityOpen + QuantityOpen
                    Next
                    '********************************************************************************************************
                    If TotalQuantityOpen = 0 Then
                        Dim CheckSOLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
                        Dim CheckSOLinesCommand As New SqlCommand(CheckSOLinesStatement, con)
                        CheckSOLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                        CheckSOLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckSOLines = CInt(CheckSOLinesCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckSOLines = 0
                        End Try
                        con.Close()

                        If CheckSOLines > 0 Then
                            Dim button2 As DialogResult = MessageBox.Show("There are no Open Lines, would you like to close the Sales Order?", "CLOSE SALES ORDER", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                            If button2 = DialogResult.Yes Then
                                SOStatus = "CLOSED"

                                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                                With cmd.Parameters
                                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@SOStatus", SqlDbType.VarChar).Value = "CLOSED"
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()

                                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)

                                With cmd.Parameters
                                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()

                                'Load Status
                                LoadSalesOrderStatus()
                            Else
                                SOStatus = txtSOStatus.Text
                            End If
                        Else
                            'Do nothing - no lines exist
                        End If
                    End If
                    '***********************************************************************
                    'Update SO Lines if they change to a Drop Ship after lines are entered
                    If chkDropShip.Checked = True Then
                        'Convert Open Lines to Drop Shop if Check Box is selected
                        Dim UpdateLineStatus As String
                        Dim UpdateLineNumber As Integer

                        For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                            Try
                                UpdateLineStatus = row.Cells("LineStatusColumn").Value
                            Catch ex7 As System.Exception
                                UpdateLineStatus = "OPEN"
                            End Try
                            Try
                                UpdateLineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                            Catch ex As System.Exception
                                UpdateLineNumber = 0
                            End Try

                            If UpdateLineStatus = "CLOSED" Or UpdateLineStatus = "PICKED" Or UpdateLineStatus = "SHIPPED" Then
                                'Do not update
                            Else
                                'UPDATE Sales Order based on line changes
                                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)

                                With cmd.Parameters
                                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                    .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = UpdateLineNumber
                                    .Add("@LineStatus", SqlDbType.VarChar).Value = "DROPSHIP"
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            End If
                        Next
                    Else
                        'Skip routine
                    End If
                    '***********************************************************************
                    'Calculate Totals and Update the Header Table
                    If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                        CalculateCanadianTotals()
                    Else
                        RecalculateLineTaxTotals()
                        CalculateTotals()
                    End If
                    '***********************************************************************
                    'UPDATE Header Table based on line amounts
                    cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS, TaxRate1 = @TaxRate1, TaxRate2 = @TaxRate2, TaxRate3 = @TaxRate3 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                    With cmd.Parameters
                        .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                        .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                        .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                        .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                        .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                        .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                        .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                        .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                        .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                        .Add("@TaxRate1", SqlDbType.VarChar).Value = SalesTaxRate1
                        .Add("@TaxRate2", SqlDbType.VarChar).Value = SalesTaxRate2
                        .Add("@TaxRate3", SqlDbType.VarChar).Value = SalesTaxRate3
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                    '******************************************************************************************************
                    'Update Line Status
                    '***********************************************************************
                    For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                        Try
                            LineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                        Catch ex As Exception
                            LineNumber = 0
                        End Try

                        'Check Line Status and open or close lines as needed
                        Dim CheckOpenQuantity As Double = 0

                        Dim CheckOpenQuantityStatement As String = "SELECT QuantityOpen FROM SalesOrderQuantityStatus WHERE DivisionKey = @DivisionKey AND SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey"
                        Dim CheckOpenQuantityCommand As New SqlCommand(CheckOpenQuantityStatement, con)
                        CheckOpenQuantityCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                        CheckOpenQuantityCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                        CheckOpenQuantityCommand.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber

                        If con.State = ConnectionState.Closed Then con.Open()
                        Try
                            CheckOpenQuantity = CDbl(CheckOpenQuantityCommand.ExecuteScalar)
                        Catch ex As System.Exception
                            CheckOpenQuantity = 0
                        End Try
                        con.Close()

                        If CheckOpenQuantity = 0 Then
                            'Update Line table in case of datagrid changes
                            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                            cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                            cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                            con.Close()
                        Else
                            If chkDropShip.Checked = True Then
                                'Update Line table in case of datagrid changes
                                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "DROPSHIP"

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            Else
                                'Update Line table in case of datagrid changes
                                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey", con)
                                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                                cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = LineNumber
                                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()
                            End If
                        End If
                    Next
                    '***************************************************************************************
                    'Re-load datagrid
                    ShowData()

                    cboSalesOrderNumber.Focus()
                    LineChangesMade = "NO"
                    needsSaved = False
                End If
            End If


            If newItem = True Then
                'Counts how many rentals are on the sales order
                cmd = New SqlCommand("SELECT COUNT(SalesOrderLineKey) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND (ItemID LIKE '%rent%' OR LineComment LIKE '%rent%' OR Description LIKE '%rent%')", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                If con.State = ConnectionState.Closed Then con.Open()
                Dim exist As Integer = 0
                exist = cmd.ExecuteScalar

                cboPartDescription.Text = exist
                con.Close()

                If exist > 0 Then
                    'Gets the correct information for notification calendar
                    Dim day As Integer = dtpSalesOrderDate.Value.Day
                    Dim month As Integer = dtpSalesOrderDate.Value.Month
                    Dim year As Integer = dtpSalesOrderDate.Value.Year
                    Dim newAddNotifications As NotificationsAdd
                    GlobalVariables.paperscan = True
                    GlobalVariables.stringVar = "Sales Order: " + cboSalesOrderNumber.Text
                    GlobalVariables.stringVar2 = "Rental(s): " + exist.ToString
                    GlobalNaftaCustomerID = "Customer: " + cboCustomerName.Text

                    newAddNotifications = New NotificationsAdd(New Date(year, month, day))
                    newAddNotifications.Show()


                End If
            End If

            newItem = False
        End If
    End Sub

    Private Sub cmdDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdDelete.Click
        If cboSalesOrderNumber.Text = "" Then
            MsgBox("You must select a valid Sales Order number to delete", MsgBoxStyle.OkOnly)
            Exit Sub
        Else
            'Continue
        End If

        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Exit Sub
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - DELETE BUTTON - Invalid Division (L13954)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        'Prompt before deleting
        Dim button As DialogResult = MessageBox.Show("Do you wish to delete this Sales Order?", "DELETE SALES ORDER", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
        If button = DialogResult.Yes Then
            'Validate in Invoice Exists
            Dim CheckInvoiceStatusStatement As String = "SELECT COUNT(InvoiceNumber) FROM InvoiceHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID"
            Dim CheckInvoiceStatusCommand As New SqlCommand(CheckInvoiceStatusStatement, con)
            CheckInvoiceStatusCommand.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CheckInvoiceStatusCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckInvoiceStatus = CInt(CheckInvoiceStatusCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckInvoiceStatus = 0
            End Try
            con.Close()

            If CheckInvoiceStatus > 0 Then
                MsgBox("This Sales Order has Invoices against it - it cannot be deleted.", MsgBoxStyle.OkOnly)
                Exit Sub
            Else
                'Continue
            End If
            '***************************************************************************************
            'Validate if any shipments exist
            Dim CheckShipStatusStatement As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim CheckShipStatusCommand As New SqlCommand(CheckShipStatusStatement, con)
            CheckShipStatusCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CheckShipStatusCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckShipStatus = CInt(CheckShipStatusCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckShipStatus = 0
            End Try
            con.Close()

            If CheckShipStatus > 0 Then
                MsgBox("This Sales Order has Shipments against it - it cannot be deleted.", MsgBoxStyle.OkOnly)
                Exit Sub
            Else
                'Continue
            End If
            '***************************************************************************************
            If cboDivisionID.Text = "TFP" Then
                cmd = New SqlCommand("UPDATE FOXTable SET OrderReferenceNumber = @OrderReferenceNumber WHERE OrderReferenceNumber = @OrderReferenceNumber1 AND DivisionID = @DivisionID", con)
                cmd.Parameters.Add("@OrderReferenceNumber", SqlDbType.VarChar).Value = 0
                cmd.Parameters.Add("@OrderReferenceNumber1", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Else
                'Do nothing - no FOX linked
            End If
            '****************************************************************************************
            'Write to Audit Trail Table
            Dim AuditComment As String = ""
            Dim AuditSONumber As Integer = 0
            Dim strSONumber As String = ""

            AuditSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(AuditSONumber)
            AuditComment = "SO #" + strSONumber + " for customer " + cboCustomerName.Text + " was deleted on " + Today()

            Try
                cmd = New SqlCommand("INSERT INTO AuditTrail (AuditDate, UserID, AuditType, AuditAmount, AuditReferenceNumber, AuditComment, DivisionID) values (@AuditDate, @UserID, @AuditType, @AuditAmount, @AuditReferenceNumber, @AuditComment, @DivisionID)", con)

                With cmd.Parameters
                    .Add("@AuditDate", SqlDbType.VarChar).Value = Today()
                    .Add("@UserID", SqlDbType.VarChar).Value = EmployeeLoginName
                    .Add("@AuditType", SqlDbType.VarChar).Value = "SALES ORDER - DELETION"
                    .Add("@AuditAmount", SqlDbType.VarChar).Value = SOTotal
                    .Add("@AuditReferenceNumber", SqlDbType.VarChar).Value = strSONumber
                    .Add("@AuditComment", SqlDbType.VarChar).Value = AuditComment
                    .Add("@DivisionID", SqlDbType.VarChar).Value = EmployeeCompanyCode
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception

            End Try
            '******************************************************************************************
            ''removes the notifications for the specified sales order
            cmd = New SqlCommand("DELETE NotificationTable WHERE ReferenceNumber = @SalesOrderNumber AND DivisionID = @DivisionID AND Status <> 'COMPLETED'", con)
            cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '******************************************************************************************
            'Create command to delete data from Sales Order Table
            cmd = New SqlCommand("DELETE FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            'Delete any picks for Sales Order
            cmd = New SqlCommand("DELETE FROM PickListHeaderTable WHERE SalesOrderHeaderKey = @SalesOrderHeaderKey AND DivisionID = @DivisionID", con)
            cmd.Parameters.Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            MsgBox("Sales Order has been deleted", MsgBoxStyle.OkOnly)
            cboSalesOrderNumber.Text = ""

            LoadSalesOrderNumber()
            ShowData()
            ClearVariables()
            ClearData()
            ClearSOInvoices()
            ClearSOReturns()
            ClearSOShipments()

            cboSalesOrderNumber.Focus()
            ''changes state so it doesnt need to prompt again to be saved on exit
            needsSaved = False
        ElseIf button = DialogResult.No Then
            cmdDelete.Focus()
        End If
    End Sub

    Private Sub cmdDropShipPackList_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdDropShipPackList.Click
        GlobalSONumber = Val(cboSalesOrderNumber.Text)
        GlobalDivisionCode = cboDivisionID.Text
        GlobalDropShipPONumber = Val(txtDSPONumber.Text)


        'Choose the correct Print Form (REMOTE or LOCAL)

        'Get Login Type
        Dim GetLoginType As String = ""

        Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
        Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
        GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetLoginType = ""
        End Try
        con.Close()

        If GetLoginType = "REMOTE" Then
            Using NewPrintDropShipPackListRemote As New PrintDropShipPackListRemote
                Dim Result = NewPrintDropShipPackListRemote.ShowDialog()
            End Using
        Else
            Using NewPrintDropShipPackList As New PrintDropShipPackList
                Dim Result = NewPrintDropShipPackList.ShowDialog()
            End Using
        End If
    End Sub

    Private Sub cmdBillOnly_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdBillOnly.Click
        '******************************************************************************************************
        'Validate Lines
        Dim CountSOLines As Integer = 0

        Dim CountSOLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim CountSOLinesCommand As New SqlCommand(CountSOLinesStatement, con)
        CountSOLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CountSOLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountSOLines = CInt(CountSOLinesCommand.ExecuteScalar)
        Catch ex As Exception
            CountSOLines = 0
        End Try
        con.Close()

        If CountSOLines = 0 Then
            MsgBox("This SO has no line data and cannot be billed for consignment.", MsgBoxStyle.OkOnly)
            Exit Sub
        Else
            'Do nothing
        End If
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - BILL ONLY BUTTON - Invalid Division (L14148)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        Dim ConsignmentGL As String = ""
        Dim CreditWarehouseAccount As String = ""
        Dim DebitWarehouseAccount As String = ""
        Dim ConsignmentWarehouseCode As String = ""

        ConsignmentGL = cboFOB.Text
        '****************************************************************************************************
        Dim button3 As DialogResult = MessageBox.Show("This order will bill/ship from a consignment warehouse. Is that correct?", "SHIP FROM CONSIGNMENT", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
        If button3 = DialogResult.Yes Then
            'Create Invoice Header (Bill-Only type)
            Select Case ConsignmentGL
                Case "Downey"
                    CreditWarehouseAccount = "12630"
                    DebitWarehouseAccount = "52630"
                    ConsignmentWarehouseCode = "DCW"
                Case "Bessemer"
                    CreditWarehouseAccount = "12610"
                    DebitWarehouseAccount = "52610"
                    ConsignmentWarehouseCode = "BCW"
                Case "Lewisville"
                    CreditWarehouseAccount = "12650"
                    DebitWarehouseAccount = "52650"
                    ConsignmentWarehouseCode = "LCW"
                Case "Lyndhurst"
                    CreditWarehouseAccount = "12600"
                    DebitWarehouseAccount = "52600"
                    ConsignmentWarehouseCode = "YCW"
                Case "Phoenix"
                    CreditWarehouseAccount = "12660"
                    DebitWarehouseAccount = "52660"
                    ConsignmentWarehouseCode = "PCW"
                Case "Seattle"
                    CreditWarehouseAccount = "12640"
                    DebitWarehouseAccount = "52640"
                    ConsignmentWarehouseCode = "SCW"
                Case "Hayward"
                    CreditWarehouseAccount = "12620"
                    DebitWarehouseAccount = "52620"
                    ConsignmentWarehouseCode = "HCW"
                Case "Medina"
                    CreditWarehouseAccount = "12100"
                    DebitWarehouseAccount = "51000"
                    ConsignmentWarehouseCode = ""
                Case "Renton"
                    CreditWarehouseAccount = "12680"
                    DebitWarehouseAccount = "52680"
                    ConsignmentWarehouseCode = "RCW"
                Case "Lake Stevens"
                    CreditWarehouseAccount = "12690"
                    DebitWarehouseAccount = "62690"
                    ConsignmentWarehouseCode = "LSCW"
                Case "SRL"
                    CreditWarehouseAccount = "12670"
                    DebitWarehouseAccount = "52670"
                    ConsignmentWarehouseCode = "SRL"
                Case Else
                    CreditWarehouseAccount = "12100"
                    DebitWarehouseAccount = "51000"
                    ConsignmentWarehouseCode = ""
            End Select

            'Load SO Totals
            RecalculateLineTaxTotals()
            CalculateTotals()

            'Update SO
            SOStatus = "CLOSED"
            SaveUpdateSalesOrderHeader()
            '***********************************************************************************************************
            'Get Next Invoice Number and Next Batch Number
            Dim LastBatchNumber, NextBatchNumber As Integer
            Dim LastInvoiceNumber, NextInvoiceNumber As Integer

            Dim GetBatchNumberStatement As String = "SELECT MAX(BatchNumber) FROM InvoiceProcessingBatchHeader"
            Dim GetBatchNumberCommand As New SqlCommand(GetBatchNumberStatement, con)

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                LastBatchNumber = CInt(GetBatchNumberCommand.ExecuteScalar)
            Catch ex As System.Exception
                LastBatchNumber = 7400000
            End Try
            con.Close()

            NextBatchNumber = LastBatchNumber + 1

            Try
                'Create Batch for Invoice
                cmd = New SqlCommand("INSERT INTO InvoiceProcessingBatchHeader (BatchNumber, BatchDate, BatchAmount, BatchDescription, DivisionID, BatchStatus, UserID, Locked) Values (@BatchNumber, @BatchDate, @BatchAmount, @BatchDescription, @DivisionID, @BatchStatus, @UserID, @Locked)", con)

                With cmd.Parameters
                    .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                    .Add("@BatchDate", SqlDbType.VarChar).Value = Today()
                    .Add("@BatchAmount", SqlDbType.VarChar).Value = 0
                    .Add("@BatchDescription", SqlDbType.VarChar).Value = "Consignment Billing"
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@BatchStatus", SqlDbType.VarChar).Value = "OPEN"
                    .Add("@UserID", SqlDbType.VarChar).Value = cboSalesPersonID.Text
                    .Add("@Locked", SqlDbType.VarChar).Value = ""
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Log error on update failure
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Sales Order Bill Only --- Insert Invoice Batch (L14274)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()

                MsgBox("There was a problem with this order. Contact system admin.", MsgBoxStyle.OkOnly)
                Exit Sub
            End Try
            '***********************************************************************************************************
            Dim GetInvoiceNumberStatement As String = "SELECT MAX(InvoiceNumber) FROM InvoiceHeaderTable"
            Dim GetInvoiceNumberCommand As New SqlCommand(GetInvoiceNumberStatement, con)

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                LastInvoiceNumber = CInt(GetInvoiceNumberCommand.ExecuteScalar)
            Catch ex As System.Exception
                LastInvoiceNumber = 0
            End Try
            con.Close()

            NextInvoiceNumber = LastInvoiceNumber + 1

            Try
                'Create Invoice without a shipment linked to it.
                cmd = New SqlCommand("INSERT INTO InvoiceHeaderTable (InvoiceNumber, BatchNumber, InvoiceDate, SalesOrderNumber, ShipmentNumber, DivisionID, CustomerID, CustomerPO, PaymentTerms, Comment, BTAddress1, BTAddress2, BTCity, BTState, BTZip, BTCountry, ProductTotal, BilledFreight, SalesTax, Discount, InvoiceTotal, InvoiceStatus, ShipVia, PaymentsApplied, InvoiceCOS, PRONumber, SpecialInstructions, DropShipPONumber, SalesTax2, SalesTax3, ReprintBatch, CustomerClass, FOB, ShippingMethod, ThirdPartyShipper) Values (@InvoiceNumber, @BatchNumber, @InvoiceDate, @SalesOrderNumber, @ShipmentNumber, @DivisionID, @CustomerID, @CustomerPO, @PaymentTerms, @Comment, @BTAddress1, @BTAddress2, @BTCity, @BTState, @BTZip, @BTCountry, @ProductTotal, @BilledFreight, @SalesTax, @Discount, @InvoiceTotal, @InvoiceStatus, @ShipVia, @PaymentsApplied, @InvoiceCOS, @PRONumber, @SpecialInstructions, @DropShipPONumber, @SalesTax2, @SalesTax3, @ReprintBatch, @CustomerClass, @FOB, @ShippingMethod, @ThirdPartyShipper)", con)

                With cmd.Parameters
                    .Add("@InvoiceNumber", SqlDbType.VarChar).Value = NextInvoiceNumber
                    .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                    .Add("@InvoiceDate", SqlDbType.VarChar).Value = Today()
                    .Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@ShipmentNumber", SqlDbType.VarChar).Value = 0
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                    .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                    .Add("@PaymentTerms", SqlDbType.VarChar).Value = "N30"
                    .Add("@Comment", SqlDbType.VarChar).Value = txtComment.Text
                    .Add("@BTAddress1", SqlDbType.VarChar).Value = txtBTAddress1.Text
                    .Add("@BTAddress2", SqlDbType.VarChar).Value = txtBTAddress2.Text
                    .Add("@BTCity", SqlDbType.VarChar).Value = txtBTCity.Text
                    .Add("@BTState", SqlDbType.VarChar).Value = txtBTState.Text
                    .Add("@BTZip", SqlDbType.VarChar).Value = txtBTZip.Text
                    .Add("@BTCountry", SqlDbType.VarChar).Value = txtBTCountry.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@BilledFreight", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@Discount", SqlDbType.VarChar).Value = 0
                    .Add("@InvoiceTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@InvoiceStatus", SqlDbType.VarChar).Value = "PENDING"
                    .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                    .Add("@PaymentsApplied", SqlDbType.VarChar).Value = 0
                    .Add("@InvoiceCOS", SqlDbType.VarChar).Value = 0
                    .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                    .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                    .Add("@DropShipPONumber", SqlDbType.VarChar).Value = 0
                    .Add("@SalesTax2", SqlDbType.VarChar).Value = 0
                    .Add("@SalesTax3", SqlDbType.VarChar).Value = 0
                    .Add("@ReprintBatch", SqlDbType.VarChar).Value = ""
                    .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                    .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                    .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                    .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Log error on update failure
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Sales Order Bill Only --- Insert Invoice (L14352)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()

                MsgBox("There was a problem with this order. Contact system admin.", MsgBoxStyle.OkOnly)
                Exit Sub
            End Try
            '***********************************************************************************************************
            'Create entry into Consignment Sales Table
            For Each LineRow As DataGridViewRow In dgvSalesOrderLines.Rows
                Dim LineCell As DataGridViewTextBoxCell = LineRow.Cells("SalesOrderKeyColumn")
                Dim LineCell1 As DataGridViewTextBoxCell = LineRow.Cells("OpenSOQuantityColumn")

                Dim SLSalesOrderLineKey As Integer = 0
                Dim SLItemID As String = ""
                Dim SLDescription As String = ""
                Dim SLLineComment As String = ""
                Dim GLDebitAccount As String = ""
                Dim GLCreditAccount As String = ""
                Dim SLPrice As Double = 0
                Dim SLOpenQuantity As Double = 0

                If LineCell.Value = cboSalesOrderNumber.Text And LineCell1.Value > 0 Then
                    Try
                        SLSalesOrderLineKey = LineRow.Cells("SalesOrderLineKeyColumn").Value
                    Catch ex As System.Exception
                        SLSalesOrderLineKey = 1
                    End Try
                    Try
                        SLItemID = LineRow.Cells("ItemIDColumn").Value
                    Catch ex As System.Exception
                        SLItemID = ""
                    End Try
                    Try
                        SLDescription = LineRow.Cells("DescriptionColumn").Value
                    Catch ex As System.Exception
                        SLDescription = ""
                    End Try
                    Try
                        SLOpenQuantity = LineRow.Cells("OpenSOQuantityColumn").Value
                    Catch ex As System.Exception
                        SLOpenQuantity = 0
                    End Try
                    Try
                        SLPrice = LineRow.Cells("PriceColumn").Value
                    Catch ex As System.Exception
                        SLPrice = 0
                    End Try
                    Try
                        SLLineComment = LineRow.Cells("LineCommentColumn").Value
                    Catch ex As System.Exception
                        SLLineComment = ""
                    End Try
                    Try
                        GLDebitAccount = LineRow.Cells("DebitGLAccountColumn").Value
                    Catch ex As System.Exception
                        GLDebitAccount = "49999"
                    End Try
                    Try
                        GLCreditAccount = LineRow.Cells("CreditGLAccountColumn").Value
                    Catch ex As System.Exception
                        GLCreditAccount = "12100"
                    End Try
                    Try
                        LineSalesTax = LineRow.Cells("SalesTaxColumn").Value
                    Catch ex As System.Exception
                        LineSalesTax = 0
                    End Try
                End If
                '***********************************************************************************************************
                'Find next Line Number for Invoice
                Dim LastInvoiceLineNumber As Integer = 0
                Dim NextInvoiceLineNumber As Integer = 0

                Dim MAXLineStatement As String = "SELECT MAX(InvoiceLineKey) FROM InvoiceLineTable WHERE InvoiceHeaderKey = @InvoiceHeaderKey"
                Dim MAXLineCommand As New SqlCommand(MAXLineStatement, con)
                MAXLineCommand.Parameters.Add("@InvoiceHeaderKey", SqlDbType.VarChar).Value = NextInvoiceNumber

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    LastInvoiceLineNumber = CInt(MAXLineCommand.ExecuteScalar)
                Catch ex As Exception
                    LastInvoiceLineNumber = 0
                End Try
                con.Close()

                NextInvoiceLineNumber = LastInvoiceLineNumber + 1

                Try
                    'Create entry into Line Table
                    cmd = New SqlCommand("INSERT INTO InvoiceLineTable (InvoiceHeaderKey, InvoiceLineKey, PartNumber, PartDescription, QuantityBilled, Price, LineComment, LineWeight, LineBoxes, SalesTax, ExtendedAmount, LineStatus, DivisionID, DebitGLAccount, CreditGLAccount, ExtendedCOS, SOLineNumber, SerialNumber) Values (@InvoiceHeaderKey, @InvoiceLineKey, @PartNumber, @PartDescription, @QuantityBilled, @Price, @LineComment, @LineWeight, @LineBoxes, @SalesTax, @ExtendedAmount, @LineStatus, @DivisionID, @DebitGLAccount, @CreditGLAccount, @ExtendedCOS, @SOLineNumber, @SerialNumber)", con)

                    With cmd.Parameters
                        .Add("@InvoiceHeaderKey", SqlDbType.VarChar).Value = NextInvoiceNumber
                        .Add("@InvoiceLineKey", SqlDbType.VarChar).Value = NextInvoiceLineNumber
                        .Add("@PartNumber", SqlDbType.VarChar).Value = SLItemID
                        .Add("@PartDescription", SqlDbType.VarChar).Value = SLDescription
                        .Add("@QuantityBilled", SqlDbType.VarChar).Value = SLOpenQuantity
                        .Add("@Price", SqlDbType.VarChar).Value = SLPrice
                        .Add("@LineComment", SqlDbType.VarChar).Value = SLLineComment
                        .Add("@LineWeight", SqlDbType.VarChar).Value = 0
                        .Add("@LineBoxes", SqlDbType.VarChar).Value = 0
                        .Add("@SalesTax", SqlDbType.VarChar).Value = LineSalesTax
                        .Add("@ExtendedAmount", SqlDbType.VarChar).Value = SLOpenQuantity * SLPrice
                        .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                        .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                        .Add("@DebitGLAccount", SqlDbType.VarChar).Value = DebitWarehouseAccount
                        .Add("@CreditGLAccount", SqlDbType.VarChar).Value = CreditWarehouseAccount
                        .Add("@ExtendedCOS", SqlDbType.VarChar).Value = 0
                        .Add("@SOLineNumber", SqlDbType.VarChar).Value = SLSalesOrderLineKey
                        .Add("@SerialNumber", SqlDbType.VarChar).Value = ""
                    End With

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                Catch ex As Exception
                    'Error Log
                    'Log error on update failure
                    Dim TempSONumber As Integer = 0
                    Dim strSONumber As String
                    TempSONumber = Val(cboSalesOrderNumber.Text)
                    strSONumber = CStr(TempSONumber)

                    ErrorDate = Today()
                    ErrorComment = ex.ToString()
                    ErrorDivision = cboDivisionID.Text
                    ErrorDescription = "Sales Order Bill Only --- Insert Invoice Line (L14480)"
                    ErrorReferenceNumber = "SO # " + strSONumber
                    ErrorUser = EmployeeLoginName

                    TFPErrorLogUpdate()
                End Try
                '**************************************************************************************
                'Check for serialized assembly
                Dim PurchProdLineID As String = ""

                Dim GetPPLStatement As String = "SELECT PurchProdLineID FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim GetPPLCommand As New SqlCommand(GetPPLStatement, con)
                GetPPLCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                GetPPLCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    PurchProdLineID = CStr(GetPPLCommand.ExecuteScalar)
                Catch ex As Exception
                    PurchProdLineID = ""
                End Try
                con.Close()
                '***********************************************************************************************************
                'Check if part exists in consignment - create it if it does not
                Dim CountConsignmentPart As Integer = 0

                Dim CountConsignmentPartStatement As String = "SELECT COUNT(ItemID) FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
                Dim CountConsignmentPartCommand As New SqlCommand(CountConsignmentPartStatement, con)
                CountConsignmentPartCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                CountConsignmentPartCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = ConsignmentWarehouseCode

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    CountConsignmentPart = CInt(CountConsignmentPartCommand.ExecuteScalar)
                Catch ex As Exception
                    CountConsignmentPart = 0
                End Try
                con.Close()

                If CountConsignmentPart = 0 Then
                    Try
                        'Create part
                        cmd = New SqlCommand("Insert Into ItemList(ItemID, DivisionID, ShortDescription, LongDescription, ItemClass, PurchProdLineID, SalesProdLineID, PieceWeight, BoxCount, PalletCount, StandardCost, StandardPrice, OldPartNumber, MinimumStock, MaximumStock, CreationDate, BeginningBalance, FOXNumber, BoxType, NominalDiameter, NominalLength, AddAccessory, PreferredVendor, Locked, SafetyDataSheet, BoxWeight)Values(@ItemID, @DivisionID, @ShortDescription, @LongDescription, @ItemClass, @PurchProdLineID, @SalesProdLineID, @PieceWeight, @BoxCount, @PalletCount, @StandardCost, @StandardPrice, @OldPartNumber, @MinimumStock, @MaximumStock, @CreationDate, @BeginningBalance, @FOXNumber, @BoxType, @NominalDiameter, @NominalLength, @AddAccessory, @PreferredVendor, @Locked, @SafetyDataSheet, @BoxWeight);", con)

                        With cmd.Parameters
                            .Add("@ItemID", SqlDbType.VarChar).Value = SLItemID
                            .Add("@DivisionID", SqlDbType.VarChar).Value = ConsignmentWarehouseCode
                            .Add("@ShortDescription", SqlDbType.VarChar).Value = SLDescription
                            .Add("@LongDescription", SqlDbType.VarChar).Value = SLDescription
                            .Add("@ItemClass", SqlDbType.VarChar).Value = "TW CA"
                            .Add("@PurchProdLineID", SqlDbType.VarChar).Value = PurchProdLineID
                            .Add("@SalesProdLineID", SqlDbType.VarChar).Value = "WELDSTUDS"
                            .Add("@PieceWeight", SqlDbType.VarChar).Value = 0
                            .Add("@BoxCount", SqlDbType.VarChar).Value = 0
                            .Add("@PalletCount", SqlDbType.VarChar).Value = 0
                            .Add("@StandardCost", SqlDbType.VarChar).Value = 0
                            .Add("@StandardPrice", SqlDbType.VarChar).Value = 0
                            .Add("@OldPartNumber", SqlDbType.VarChar).Value = ""
                            .Add("@MinimumStock", SqlDbType.VarChar).Value = 0
                            .Add("@MaximumStock", SqlDbType.VarChar).Value = 0
                            .Add("@CreationDate", SqlDbType.VarChar).Value = Today()
                            .Add("@BeginningBalance", SqlDbType.VarChar).Value = 0
                            .Add("@FOXNumber", SqlDbType.VarChar).Value = 0
                            .Add("@BoxType", SqlDbType.VarChar).Value = ""
                            .Add("@NominalDiameter", SqlDbType.VarChar).Value = 0
                            .Add("@NominalLength", SqlDbType.VarChar).Value = 0
                            .Add("@AddAccessory", SqlDbType.VarChar).Value = "NO"
                            .Add("@PreferredVendor", SqlDbType.VarChar).Value = "TFP CORP"
                            .Add("@Locked", SqlDbType.VarChar).Value = ""
                            .Add("@SafetyDataSheet", SqlDbType.VarChar).Value = ""
                            .Add("@BoxWeight", SqlDbType.VarChar).Value = 0
                        End With

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                        con.Close()
                    Catch ex As Exception
                        'Log error on update failure
                        Dim TempSONumber As Integer = 0
                        Dim strSONumber As String
                        TempSONumber = Val(cboSalesOrderNumber.Text)
                        strSONumber = CStr(TempSONumber)

                        ErrorDate = Today()
                        ErrorComment = ex.ToString()
                        ErrorDivision = cboDivisionID.Text
                        ErrorDescription = "Sales Order Bill Only --- Create Consignment Part (L14577)"
                        ErrorReferenceNumber = "SO # " + strSONumber
                        ErrorUser = EmployeeLoginName

                        TFPErrorLogUpdate()
                    End Try
                Else
                    'Do nothing
                End If
                '****************************************************************************************
                If PurchProdLineID = "ASSEMBLY" Then
                    'Check to see if serialized
                    Dim CheckSerialized As String = ""

                    Dim CheckSerializedStatement As String = "SELECT SerializedStatus FROM AssemblyHeaderTable WHERE AssemblyPartNumber = @AssemblyPartNumber AND DivisionID = @DivisionID"
                    Dim CheckSerializedCommand As New SqlCommand(CheckSerializedStatement, con)
                    CheckSerializedCommand.Parameters.Add("@AssemblyPartNumber", SqlDbType.VarChar).Value = SLItemID
                    CheckSerializedCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        CheckSerialized = CStr(CheckSerializedCommand.ExecuteScalar)
                    Catch ex As Exception
                        CheckSerialized = "NO"
                    End Try
                    con.Close()
                    '****************************************************************************************
                    If CheckSerialized = "YES" Then
                        MsgBox("You must enter serial numbers for this part.", MsgBoxStyle.OkOnly)

                        GlobalSerialAssemblyQuantity = SLOpenQuantity
                        GlobalAssemblyPartNumber = SLItemID
                        GlobalAssemblyInvoiceNumber = NextInvoiceNumber
                        GlobalAssemblyInvoiceLine = NextInvoiceLineNumber
                        GlobalDivisionCode = ConsignmentWarehouseCode
                        GlobalAssemblyCustomer = cboCustomerID.Text
                        GlobalSerialFormLocation = "SALESORDERFORM"

                        Using NewAssemblySerialPopup As New AssemblySerialPopup
                            Dim Result = NewAssemblySerialPopup.ShowDialog()
                        End Using
                        '****************************************************
                        'If Serial Numbers Entered - Continue

                        'If not, delete Invoice and Exit Sub w/message
                        If GlobalSerialValidation = "YES" Then
                            'Continue
                        ElseIf GlobalSerialValidation = "NO" Then
                            Dim button4 As DialogResult = MessageBox.Show("Do you wish to continue w/o Serial Numbers?", "CONTINUE?", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                            If button4 = DialogResult.Yes Then
                                'Continue
                            ElseIf button4 = DialogResult.No Then
                                'Reset Serial Numbers in Assembly Serial Log
                                cmd = New SqlCommand("DELETE FROM AssemblySerialTempTable WHERE TransactionNumber = @TransactionNumber", con)

                                With cmd.Parameters
                                    .Add("@TransactionNumber", SqlDbType.VarChar).Value = GlobalAssemblyInvoiceNumber
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()

                                'Delete Invoice and exit sub
                                cmd = New SqlCommand("DELETE FROM InvoiceProcessingBatchHeader WHERE BatchNumber = @BatchNumber AND DivisionID = @DivisionID", con)

                                With cmd.Parameters
                                    .Add("@BatchNumber", SqlDbType.VarChar).Value = NextBatchNumber
                                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                End With

                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                                con.Close()

                                Exit Sub
                            End If
                        End If
                    Else
                        'Skip
                    End If
                Else
                    'Skip
                End If
            Next
            '***********************************************************************************************************
            'Update total of the Invoice Batch
            Try
                'Close Sales Order
                cmd = New SqlCommand("UPDATE InvoiceProcessingBatchHeader SET BatchAmount = @BatchAmount WHERE BatchNumber = @BatchNumber AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@BatchNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@BatchAmount", SqlDbType.VarChar).Value = OrderTotal
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Log error on update failure
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Sales Order Bill Only --- Update Invoice Batch total (L14677)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()
            End Try
            '***********************************************************************************************************
            Try
                'Close Sales Order
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus, Locked = '' WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@SOStatus", SqlDbType.VarChar).Value = "CLOSED"
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Log error on update failure
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Sales Order Bill Only --- Update SO Status (L14707)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()
            End Try
            '***********************************************************************************************************
            Try
                'Close Lines
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Log error on update failure
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = Val(cboSalesOrderNumber.Text)
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Sales Order Bill Only --- Update SO Line Status (L14737)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()
            End Try
            '***********************************************************************************************************
            'Re-Load Status
            LoadSalesOrderStatus()
            '***********************************************************************************************************
            MsgBox("Order has been processed and Invoice created.", MsgBoxStyle.OkOnly)
            '***********************************************************************************************************
        Else
            MsgBox("Change FOB to Medina, and re-Expedite this order.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
    End Sub

    Private Sub cmdInsertLine_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdInsertLine.Click
        '********************************************************************************
        'Get division of the sales order number
        ValidateDivision()

        If CheckDivision <> cboDivisionID.Text Then
            MsgBox("There is an issue with this order. Contact ADMIN.", MsgBoxStyle.OkOnly)

            'Error Log
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = "Division " + cboDivisionID.Text + " does not match SO Division - " + CheckDivision
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "SO Form - INSERT LINE BUTTON - Invalid Division (L14770)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            Exit Sub
        Else
            'Skip
        End If
        '**************************************************************************************
        If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
            MsgBox("You must select a valid sales order #.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        If cboInsertPartNumber.Text = "" Then
            MsgBox("You must select a valid Part #.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        If txtInsertQuantity.Text = "" Or Val(txtInsertQuantity.Text) = 0 Then
            MsgBox("You must select a valid quantity.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        '*********************************************************************************************
        'Check to see if Sales Order has any shipment/picks
        Dim CheckAnyShipment As Integer = 0

        Dim CheckAnyShipmentString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim CheckAnyShipmentCommand As New SqlCommand(CheckAnyShipmentString, con)
        CheckAnyShipmentCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = CheckSalesOrderKey
        CheckAnyShipmentCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckAnyShipment = CInt(CheckAnyShipmentCommand.ExecuteScalar)
        Catch ex As System.Exception
            CheckAnyShipment = 0
        End Try
        con.Close()

        If CheckAnyShipment = 0 Then
            '*************************************************************************************************
            'Count Lines and validate
            Dim CountLines As Integer = 0
            Dim InsertLineNumber As Integer = 0
            Dim StartingLineNumber As Integer = 0

            Dim CountLinesStatement As String = "SELECT COUNT(SalesOrderKey) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
            Dim CountLinesCommand As New SqlCommand(CountLinesStatement, con)
            CountLinesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CountLinesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CountLines = CInt(CountLinesCommand.ExecuteScalar)
            Catch ex As Exception
                CountLines = 0
            End Try
            con.Close()

            InsertLineNumber = numLineNumber.Value

            If CountLines - InsertLineNumber < 2 Then
                MsgBox("You cannot insert a line here.", MsgBoxStyle.OkOnly)
                Exit Sub
            Else
                'Continue
            End If
            If numLineNumber.Value >= CountLines Then
                MsgBox("You cannot insert a line here.", MsgBoxStyle.OkOnly)
                Exit Sub
            Else
                'Continue
            End If

            StartingLineNumber = InsertLineNumber + 1
            Dim TempLineNumber As Integer = 0
            TempLineNumber = 1000 + StartingLineNumber
            '************************************************************************************
            'Re-Number Lines after (temporarily)
            For i As Integer = 1 To (CountLines - InsertLineNumber)
                'Re-Number Line (Temp)
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesOrderLineKey = @SalesOrderLineKey WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey2", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = TempLineNumber
                    .Add("@SalesOrderLineKey2", SqlDbType.VarChar).Value = StartingLineNumber
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                StartingLineNumber = StartingLineNumber + 1
                TempLineNumber = TempLineNumber + 1
            Next i
            '************************************************************************************
            'Get Item Line Details
            Dim InsertLineQuantity, InsertLineWeight, InsertLineBoxes, GetBoxCount, GetPieceWeight, GetTaxRate As Double
            Dim InsertExtendedCOS As Double = 0
            Dim InsertSalesTax As Double = 0

            Dim GetBoxesStatement As String = "SELECT BoxCount FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim GetBoxesCommand As New SqlCommand(GetBoxesStatement, con)
            GetBoxesCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text
            GetBoxesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            Dim GetPieceWeightStatement As String = "SELECT PieceWeight FROM ItemList WHERE ItemID = @ItemID AND DivisionID = @DivisionID"
            Dim GetPieceWeightCommand As New SqlCommand(GetPieceWeightStatement, con)
            GetPieceWeightCommand.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text
            GetPieceWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetBoxCount = CDbl(GetBoxesCommand.ExecuteScalar)
            Catch ex As Exception
                GetBoxCount = 0
            End Try
            Try
                GetPieceWeight = CDbl(GetPieceWeightCommand.ExecuteScalar)
            Catch ex As Exception
                GetPieceWeight = 0
            End Try
            con.Close()

            InsertLineQuantity = Val(txtInsertQuantity.Text)
            InsertPrice = Val(txtInsertPrice.Text)
            InsertExtendedAmount = InsertLineQuantity * InsertPrice
            InsertExtendedAmount = Math.Round(InsertExtendedAmount, 2)

            InsertLineWeight = InsertLineQuantity * GetPieceWeight
            InsertLineWeight = Math.Round(InsertLineWeight, 0)

            If GetBoxCount = 0 Then
                InsertLineBoxes = 0
            Else
                InsertLineBoxes = InsertLineQuantity / GetBoxCount
                InsertLineBoxes = Math.Round(InsertLineBoxes, 0)
            End If
            '*****************************************************************************************************************************************
            'Use Last Purchase Cost as Estimated Cost
            '*****************************************************************************************************************************************
            Dim InsertLastPurchaseCost As Double = 0

            Dim LastPriceStatement As String = "SELECT UnitCost FROM PurchaseOrderLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber AND PurchaseOrderHeaderKey = (SELECT isnull(MAX(PurchaseOrderHeaderKey), 0) FROM PurchaseOrderLineQuery WHERE DivisionID = @DivisionID AND PartNumber = @PartNumber)"
            Dim LastPriceCommand As New SqlCommand(LastPriceStatement, con)
            LastPriceCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            LastPriceCommand.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = cboInsertPartNumber.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                InsertLastPurchaseCost = CDbl(LastPriceCommand.ExecuteScalar)
            Catch ex As System.Exception
                InsertLastPurchaseCost = 0
            End Try
            con.Close()

            InsertExtendedCOS = InsertLastPurchaseCost * InsertLineQuantity
            '*****************************************************************************************************************************************
            'Get GL Credit Account
            LoadInsertGLAccountNumber()
            '************************************************************************************
            'Get Customer Tax Data
            Dim CustomerTaxRateStatement As String = "SELECT SalesTaxRate FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
            Dim CustomerTaxRateCommand As New SqlCommand(CustomerTaxRateStatement, con)
            CustomerTaxRateCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            CustomerTaxRateCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetTaxRate = CDbl(CustomerTaxRateCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetTaxRate = 0
            End Try
            con.Close()

            If SalesTaxRate1 = 0 Then
                InsertSalesTax = 0
            Else
                InsertSalesTax = GetTaxRate * InsertExtendedAmount
                InsertSalesTax = Math.Round(InsertSalesTax, 2)
            End If
            '************************************************************************************
            'Write to Sales Order Line Table
            Try
                'Insert Line
                cmd = New SqlCommand("Insert Into SalesOrderLineTable(SalesOrderKey, SalesOrderLineKey, ItemID, Description, Quantity, Price, LineComment, SalesTax, DivisionID, ExtendedAmount, LineWeight, LineBoxes, LineStatus, DebitGLAccount, CreditGLAccount, LeadTime, CertificationType, EstExtendedCOS, ShippedPrevious)Values(@SalesOrderKey, @SalesOrderLineKey, @ItemID, @Description, @Quantity, @Price, @LineComment, @SalesTax, @DivisionID, @ExtendedAmount, @LineWeight, @LineBoxes, @LineStatus, @DebitGLAccount, @CreditGLAccount, @LeadTime, @CertificationType, @EstExtendedCOS, @ShippedPrevious)", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = InsertLineNumber + 1
                    .Add("@ItemID", SqlDbType.VarChar).Value = cboInsertPartNumber.Text
                    .Add("@Description", SqlDbType.VarChar).Value = cboInsertDescription.Text
                    .Add("@Quantity", SqlDbType.VarChar).Value = Val(txtInsertQuantity.Text)
                    .Add("@Price", SqlDbType.VarChar).Value = Val(txtInsertPrice.Text)
                    .Add("@SalesTax", SqlDbType.VarChar).Value = InsertSalesTax
                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = InsertExtendedAmount
                    .Add("@LineComment", SqlDbType.VarChar).Value = txtInsertComment.Text
                    .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@LineWeight", SqlDbType.VarChar).Value = InsertLineWeight
                    .Add("@LineBoxes", SqlDbType.VarChar).Value = InsertLineBoxes
                    .Add("@DebitGLAccount", SqlDbType.VarChar).Value = "49999"
                    .Add("@CreditGLAccount", SqlDbType.VarChar).Value = InsertGLCreditAccount
                    .Add("@LeadTime", SqlDbType.VarChar).Value = txtInsertLeadTime.Text
                    .Add("@CertificationType", SqlDbType.VarChar).Value = cboCertCode.Text
                    .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = InsertExtendedCOS
                    .Add("@ShippedPrevious", SqlDbType.VarChar).Value = 0
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Error Check/Log
                'Log error on update failure
                Dim TempSONumber As Integer = 0
                TempSONumber = Val(cboSalesOrderNumber.Text)
                Dim strSONumber As String
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Insert Line --- Insert SO Line Failure (L14997)"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()
            End Try
            '************************************************************************************
            'Re-Number Lines after (temporarily)
            StartingLineNumber = InsertLineNumber + 2
            TempLineNumber = 1000 + StartingLineNumber - 1

            For i As Integer = 1 To (CountLines - InsertLineNumber)
                'Re-Number Line (Temp)
                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesOrderLineKey = @SalesOrderLineKey WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey2", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = StartingLineNumber
                    .Add("@SalesOrderLineKey2", SqlDbType.VarChar).Value = TempLineNumber
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                StartingLineNumber = StartingLineNumber + 1
                TempLineNumber = TempLineNumber + 1
            Next i
            '************************************************************************************
            'Clear lines and update datagrid
            MsgBox("Line has been inserted.", MsgBoxStyle.OkOnly)

            'Load Totals
            'Calculate tax for canadian customers
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If
            '***************************************************************************************
            'After calculated totals, update Header Table
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                'UPDATE Header Table based on line amounts
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                    .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                    .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                    .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Else
                'UPDATE Header Table based on line amounts
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, FreightCharge = @FreightCharge, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TotalEstCOS = @TotalEstCOS WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                    .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                    .Add("@FreightCharge", SqlDbType.VarChar).Value = FreightCharge
                    .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                    .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                    .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = 0
                    .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = 0
                    .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            End If
            '***************************************************************************************
            'ReCalculate SO Totals
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOTotal = (ProductTotal + FreightCharge + TotalSalesTax + TotalSalesTax2 + TotalSalesTax3) WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
            '***************************************************************************************
            ClearInsertLines()
            ShowData()

            '***************************************************************************************
            'Since line changes were made, set variable to YES
            LineChangesMade = "YES"
            '***************************************************************************************
        Else
            MsgBox("You cannot re-order/insert lines on a sales order that has a shipment or pick.", MsgBoxStyle.OkOnly)
            ClearInsertLines()
            Exit Sub
        End If
    End Sub

    Private Sub cmdPrintTWELabels_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPrintTWELabels.Click
        For i As Integer = 0 To dgvSalesOrderLines.Rows.Count - 1
            Try
                Dim labelCounts As Integer

                If IsDBNull(dgvSalesOrderLines.Rows(i).Cells("LabelCountColumn").Value) Then
                    labelCounts = 0
                Else
                    labelCounts = dgvSalesOrderLines.Rows(i).Cells("LabelCountColumn").Value
                End If

                If labelCounts > 0 Then
                    Try
                        Dim partNumber As String = dgvSalesOrderLines.Rows(i).Cells("ItemIDColumn").Value
                        Dim descriptions As String = dgvSalesOrderLines.Rows(i).Cells("DescriptionColumn").Value

                        'Get Description - split into two fields by character count
                        'Create Short Description
                        Dim TotalCharactersInDescription As Integer = 0

                        Dim ShortDescription1 As String = ""
                        Dim ShortDescription2 As String = ""

                        Dim ShortDescription As String = descriptions
                        TotalCharactersInDescription = ShortDescription.Length

                        If ShortDescription.Length > 15 Then
                            ShortDescription1 = ShortDescription.Substring(0, 15)
                            ShortDescription2 = ShortDescription.Substring(15, TotalCharactersInDescription - 15)
                        Else
                            ShortDescription1 = ShortDescription
                            ShortDescription2 = ""
                        End If

                        ShortDescription1.Replace(ControlChars.Quote, "\" + ControlChars.Quote).Replace("'", "\'")
                        ShortDescription2.Replace(ControlChars.Quote, "\" + ControlChars.Quote).Replace("'", "\'")

                        ''standard 4x6 aiag label setup
                        LabelFormat(0) = vbLf + "N"
                        LabelFormat(1) = "q816"
                        LabelFormat(2) = "Q1218,20+0"
                        LabelFormat(3) = "S4"
                        LabelFormat(4) = "D8"
                        LabelFormat(5) = "ZT"
                        LabelFormat(6) = "TTh:m"
                        LabelFormat(7) = "TDy2mn.dd"

                        'Fill In Verbiage
                        LabelFormat(12) = "A300,10,4,5,1,1,N," + Chr(34) + "TRU-WELD" + Chr(34)
                        LabelFormat(13) = "A25,90,4,5,1,1,N," + Chr(34) + "-PART:" + partNumber + Chr(34)
                        LabelFormat(14) = "A25,170,4,5,1,1,N," + Chr(34) + "-DESC:" + ShortDescription1 + Chr(34)
                        LabelFormat(15) = "A25,250,4,5,1,1,N," + Chr(34) + ShortDescription2 + Chr(34)
                        LabelFormat(16) = "A25,330,4,5,1,1,N," + Chr(34) + "-QUANTITY:" + Chr(34)
                        LabelFormat(17) = "A370,360,4,4,1,1,N," + Chr(34) + "__________________________" + Chr(34)

                        'Print Label
                        LabelFormat(22) = "P" + labelCounts.ToString
                        LabelFormat(23) = vbFormFeed
                        LabelLines = 22
                        PrintBarcodeLine(labelCounts)
                    Catch ex As SqlException
                        ' Do some logging or something. 
                        MessageBox.Show("There was an error accessing your data. DETAIL: " & ex.ToString())
                    End Try
                End If
            Catch ex As SqlException
                ' Do some logging or something. 
                MessageBox.Show("There was an error accessing your data. DETAIL: " & ex.ToString())
            End Try
        Next
    End Sub

    Private Sub cmdPrintSLCLabels_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPrintSLCLabels.Click
        For i As Integer = 0 To dgvSalesOrderLines.Rows.Count - 1
            Try
                Dim labelCounts As Integer

                If IsDBNull(dgvSalesOrderLines.Rows(i).Cells("LabelCountColumn").Value) Then
                    labelCounts = 0
                Else
                    labelCounts = dgvSalesOrderLines.Rows(i).Cells("LabelCountColumn").Value
                End If
                If labelCounts > 0 Then
                    Try
                        Dim partNumber As String = dgvSalesOrderLines.Rows(i).Cells("ItemIDColumn").Value
                        Dim descriptions As String = dgvSalesOrderLines.Rows(i).Cells("DescriptionColumn").Value

                        'Get Description - split into two fields by character count
                        'Create Short Description
                        Dim TotalCharactersInDescription As Integer = 0

                        Dim ShortDescription1 As String = ""
                        Dim ShortDescription2 As String = ""

                        Dim ShortDescription As String = descriptions
                        TotalCharactersInDescription = ShortDescription.Length

                        If ShortDescription.Length > 15 Then

                            ShortDescription1 = ShortDescription.Substring(0, 15)
                            ShortDescription2 = ShortDescription.Substring(15, TotalCharactersInDescription - 15)
                        Else
                            ShortDescription1 = ShortDescription
                            ShortDescription2 = ""
                        End If

                        ShortDescription1.Replace(ControlChars.Quote, "\" + ControlChars.Quote).Replace("'", "\'")
                        ShortDescription2.Replace(ControlChars.Quote, "\" + ControlChars.Quote).Replace("'", "\'")

                        ''standard 4x6 aiag label setup
                        LabelFormat(0) = vbLf + "N"
                        LabelFormat(1) = "q816"
                        LabelFormat(2) = "Q1218,20+0"
                        LabelFormat(3) = "S4"
                        LabelFormat(4) = "D8"
                        LabelFormat(5) = "ZT"
                        LabelFormat(6) = "TTh:m"
                        LabelFormat(7) = "TDy2mn.dd"

                        'Fill In Verbiage
                        LabelFormat(12) = "A0,10,4,5,1,1,N," + Chr(34) + "TRU-FIT PROD. TRU WELD" + Chr(34)
                        LabelFormat(13) = "A25,90,4,5,1,1,N," + Chr(34) + "-PART:" + partNumber + Chr(34)
                        LabelFormat(14) = "A25,170,4,5,1,1,N," + Chr(34) + "-DESC:" + ShortDescription1 + Chr(34)
                        LabelFormat(15) = "A25,250,4,5,1,1,N," + Chr(34) + ShortDescription2 + Chr(34)
                        LabelFormat(16) = "A25,330,4,5,1,1,N," + Chr(34) + "-QUANTITY:" + Chr(34)
                        LabelFormat(17) = "A370,360,4,4,1,1,N," + Chr(34) + "__________________________" + Chr(34)

                        'Print Label
                        LabelFormat(22) = "P" + labelCounts.ToString
                        LabelFormat(23) = vbFormFeed
                        LabelLines = 22
                        PrintBarcodeLine(labelCounts)
                    Catch ex As SqlException
                        ' Do some logging or something. 
                        MessageBox.Show("There was an error accessing your data. DETAIL: " & ex.ToString())
                    End Try
                End If
            Catch ex As SqlException
                ' Do some logging or something. 
                MessageBox.Show("There was an error accessing your data. DETAIL: " & ex.ToString())
            End Try
        Next
    End Sub

    'Menu Strip Tool Items

    Private Sub OpenNewSalesOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenNewSalesOrderToolStripMenuItem.Click
        If Not String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            unlockBatch()
        End If
        'Load ability to change company if administrator
        If EmployeeCompanyCode = "ADM" Then
            cboSalesPersonID.Enabled = True
            cboDivisionID.Enabled = True
            cboDivisionID.Text = EmployeeCompanyCode
            cboSalesPersonID.Text = EmployeeSalespersonCode
        Else
            cboDivisionID.Enabled = False
            cboSalesPersonID.Enabled = False
            cboDivisionID.Text = EmployeeCompanyCode
            cboSalesPersonID.Text = EmployeeSalespersonCode
        End If

        'Clear text boxes on load and set load defaults
        LoadItemList()
        LoadCustomerList()
        LoadSalesOrderNumber()
        ShowAdditionalShipTo()
        ShowData()
        ClearVariables()
        ClearData()
        cboSalesOrderNumber.Focus()
    End Sub

    Private Sub DeleteSalesOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DeleteSalesOrderToolStripMenuItem.Click
        cmdDelete_Click(sender, e)
    End Sub

    Private Sub SalesConfirmationToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SalesConfirmationToolStripMenuItem.Click
        cmdPrintConfirm_Click(sender, e)
    End Sub

    Private Sub BackorderReportToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BackorderReportToolStripMenuItem.Click
        GlobalDivisionCode = cboDivisionID.Text
        BackorderCustomer = cboCustomerID.Text

        BackorderReportFilter = "CUSTOMER"

        'Choose the correct Print Form (REMOTE or LOCAL)

        'Get Login Type
        Dim GetLoginType As String = ""

        Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
        Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
        GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetLoginType = ""
        End Try
        con.Close()

        If GetLoginType = "REMOTE" Then
            Using NewPrintBackOrdersFilteredRemote As New PrintBackOrdersFilteredRemote
                Dim result = NewPrintBackOrdersFilteredRemote.ShowDialog()
            End Using
        Else
            Using NewPrintBackOrders As New PrintBackOrdersFiltered
                Dim result = NewPrintBackOrders.ShowDialog()
            End Using
        End If
    End Sub

    Private Sub SaveToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SaveToolStripMenuItem.Click
        cmdSave_Click(sender, e)
    End Sub

    Private Sub PrintEmailConfirmationToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintEmailConfirmationToolStripMenuItem.Click
        cmdPrintConfirm_Click(sender, e)
    End Sub

    Private Sub AddTaxToSOToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AddTaxToSOToolStripMenuItem.Click
        If chkTaxable.Checked = True And Val(txtTaxRate.Text) > 0 Then
            Dim CurrentTaxRate As Double = 0

            CurrentTaxRate = Val(txtTaxRate.Text)

            'Update Sales Tax Rate in Header Table
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET TaxRate1 = @TaxRate1 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@TaxRate1", SqlDbType.VarChar).Value = CurrentTaxRate
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            'Calculate line Sales Tax for all SO Lines
            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET SalesTax = ExtendedAmount * @CurrentTaxRate WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@CurrentTaxRate", SqlDbType.VarChar).Value = CurrentTaxRate
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            'Totals
            RecalculateLineTaxTotals()
            CalculateTotals()
            ShowData()
        End If
    End Sub

    Private Sub ManuallyCloseSOToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ManuallyCloseSOToolStripMenuItem.Click
        If cboSalesOrderNumber.Text = "" Then
            MsgBox("You must have a valid SO # selected.", MsgBoxStyle.OkOnly)
        Else
            If isSomeoneEditing() Then
                ShowData()
                LoadSalesOrderStatus()
                LoadShipmentCustomer()
                LoadSalesOrderData()
                Exit Sub
            End If
            'Check to see if there are pending shipments, picks, and delete
            Dim CheckPendingStatement As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID AND ShipmentStatus = @ShipmentStatus"
            Dim CheckPendingCommand As New SqlCommand(CheckPendingStatement, con)
            CheckPendingCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            CheckPendingCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            CheckPendingCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckPending = CInt(CheckPendingCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckPending = 0
            End Try
            con.Close()

            If CheckPending <> 0 Then
                Dim button As DialogResult = MessageBox.Show("There are pending shipments for this order. Do you still wish to close? Pending Shipments, Picks will be deleted.", "DELETE PENDING SHIPMENTS, PICKS", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1)
                If button = DialogResult.Yes Then
                    cmd = New SqlCommand("DELETE FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID AND ShipmentStatus = @ShipmentStatus", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    cmd = New SqlCommand("DELETE FROM PickListHeaderTable WHERE SalesOrderHeaderKey = @SalesOrderHeaderKey AND DivisionID = @DivisionID AND PLStatus = @PLStatus", con)
                    cmd.Parameters.Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@PLStatus", SqlDbType.VarChar).Value = "PENDING"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SOStatus", SqlDbType.VarChar).Value = "CLOSED"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    cmd = New SqlCommand("UPDATE NotificationTable SET Status = @Status WHERE ReferenceNumber = @ReferenceNumber AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@ReferenceNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = "COMPLETED"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()

                    LoadSalesOrderStatus()
                ElseIf button = DialogResult.No Then
                    'Do nothing
                End If
            Else
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                cmd.Parameters.Add("@SOStatus", SqlDbType.VarChar).Value = "CLOSED"

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                cmd = New SqlCommand("DELETE FROM NotificationTable WHERE ReferenceNumber = @ReferenceNumber AND Status = 'ACTIVE' AND NotificationType = 'Recurring Invoice' AND DivisionID = @DivisionID", con)
                cmd.Parameters.Add("@ReferenceNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                LoadSalesOrderStatus()
            End If
        End If
    End Sub

    Private Sub SalesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SalesToolStripMenuItem.Click
        GlobalCustomerID = cboCustomerID.Text
        GlobalCustomerName = cboCustomerName.Text
        GlobalMaintenancePartNumber = cboPartNumber.Text
        GlobalMaintenancePartDescription = cboPartDescription.Text
        GlobalDivisionCode = cboDivisionID.Text

        Using NewViewCustomerSalesHistory As New ViewCustomerSalesHistory
            Dim result = NewViewCustomerSalesHistory.ShowDialog()
        End Using
    End Sub

    Private Sub VendorPurchaseHistoryToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles VendorPurchaseHistoryToolStripMenuItem.Click
        GlobalDivisionCode = cboDivisionID.Text
        GlobalMaintenancePartNumber = cboPartNumber.Text
        GlobalMaintenancePartDescription = cboPartDescription.Text

        Using NewViewVendorPurchaseHistory As New ViewPurchaseLines
            Dim result = NewViewVendorPurchaseHistory.ShowDialog()
        End Using
    End Sub

    Private Sub ReOpenSalesOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReOpenSalesOrderToolStripMenuItem.Click
        If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
            MsgBox("You must have a valid Sales Order selected.", MsgBoxStyle.OkOnly)
        End If
        '*************************************************************************************
        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Exit Sub
        End If
        '*************************************************************************************
        LoadSalesOrderStatus()

        Dim ReopenLineNumber As Integer
        Dim ReopenQuantity As Double

        If SOStatus = "SHIPPED" Or SOStatus = "PICKED" Then
            MsgBox("You have PENDING Shipments on this Sales Order - these must be completed or deleted before re-opening Sales Order.", MsgBoxStyle.OkOnly)
        Else
            'Re-Open Sales Order Header
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOStatus = @SOStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
            cmd.Parameters.Add("@SOStatus", SqlDbType.VarChar).Value = "OPEN"

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            'Open All Lines then auto-close lines where Quantity Open = 0
            cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID", con)
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()

            'Refresh datagrid
            ShowData()

            For Each row As DataGridViewRow In dgvSalesOrderLines.Rows
                'Check for open quantities
                Try
                    ReopenLineNumber = row.Cells("SalesOrderLineKeyColumn").Value
                Catch ex As System.Exception
                    ReopenLineNumber = 0
                End Try
                Try
                    ReopenQuantity = row.Cells("OpenSOQuantityColumn").Value
                Catch ex As System.Exception
                    ReopenQuantity = 0
                End Try

                If ReopenQuantity = 0 Then
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = ReopenLineNumber
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "CLOSED"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                Else
                    cmd = New SqlCommand("UPDATE SalesOrderLineTable SET LineStatus = @LineStatus WHERE SalesOrderKey = @SalesOrderKey AND SalesOrderLineKey = @SalesOrderLineKey AND DivisionID = @DivisionID", con)
                    cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    cmd.Parameters.Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = ReopenLineNumber
                    cmd.Parameters.Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"

                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                    con.Close()
                End If
            Next

            LoadSalesOrderStatus()
            ''changes status so that will prompt to be saved
            needsSaved = True
        End If
    End Sub

    Private Sub PrintSalesOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintSalesOrderToolStripMenuItem.Click
        cmdPrint_Click(sender, e)
    End Sub

    Private Sub ExpediteToShippingToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExpediteToShippingToolStripMenuItem.Click
        cmdExpediteOrder_Click(sender, e)
    End Sub

    Private Sub TimeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Label700.Text = TimeString
    End Sub

    Private Sub DateToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Label700.Text = DateString
    End Sub

    Private Sub ExitToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExitToolStripMenuItem2.Click
        cmdExit_Click(sender, e)
    End Sub

    Private Sub PrintWorkOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintWorkOrderToolStripMenuItem.Click
        GlobalDivisionCode = cboDivisionID.Text
        GlobalSONumber = Val(cboSalesOrderNumber.Text)

        Using NewPrintSOWorkOrder As New PrintSOWorkOrder
            Dim Result = NewPrintSOWorkOrder.ShowDialog()
        End Using
    End Sub

    Private Sub PrintPickTicketsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintPickTicketsToolStripMenuItem.Click
        'Check database to see if pick tickets exist
        Dim CountPicks As Integer

        Dim CountPicksString As String = "SELECT COUNT(PickListHeaderKey) FROM PickListHeaderTable WHERE SalesOrderHeaderKey = @SalesOrderHeaderKey AND DivisionID = @DivisionID"
        Dim CountPicksCommand As New SqlCommand(CountPicksString, con)
        CountPicksCommand.Parameters.Add("@SalesOrderHeaderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CountPicksCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountPicks = CInt(CountPicksCommand.ExecuteScalar)
        Catch ex As System.Exception
            CountPicks = 0
        End Try
        con.Close()

        If CountPicks = 0 Then
            MsgBox("There are no Pick Tickets for this Sales Order.", MsgBoxStyle.OkOnly)
        Else
            GlobalSONumberPickList = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text

            'Choose the correct Print Form (REMOTE or LOCAL)

            'Get Login Type
            Dim GetLoginType As String = ""

            Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
            Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
            GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetLoginType = ""
            End Try
            con.Close()

            If GetLoginType = "REMOTE" Then
                Using NewPrintPickTicketsSORemote As New PrintPickTicketsSORemote
                    Dim Result = NewPrintPickTicketsSORemote.ShowDialog()
                End Using
            Else
                Using NewPrintPickTicketSO As New PrintPickTicketsSO
                    Dim Result = NewPrintPickTicketSO.ShowDialog()
                End Using
            End If
        End If
    End Sub

    Private Sub PrintPackSlipsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintPackSlipsToolStripMenuItem.Click
        'Check database to see if shipments exist
        Dim CountPacks As Integer

        Dim CountPacksString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim CountPacksCommand As New SqlCommand(CountPacksString, con)
        CountPacksCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CountPacksCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountPacks = CInt(CountPacksCommand.ExecuteScalar)
        Catch ex As System.Exception
            CountPacks = 0
        End Try
        con.Close()

        If CountPacks = 0 Then
            MsgBox("There are no Packing Lists for this Sales Order.", MsgBoxStyle.OkOnly)
        Else
            GlobalSONumberPackSlip = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text

            'Choose the correct Print Form (REMOTE or LOCAL)

            'Get Login Type
            Dim GetLoginType As String = ""

            Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
            Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
            GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
            Catch ex As System.Exception
                GetLoginType = ""
            End Try
            con.Close()

            If GetLoginType = "REMOTE" Then
                Using NewPrintPackListSORemote As New PrintPackListSORemote
                    Dim Result = NewPrintPackListSORemote.ShowDialog()
                End Using
            Else
                Using NewPrintPackListSO As New PrintPackListSO
                    Dim Result = NewPrintPackListSO.ShowDialog()
                End Using
            End If
        End If
    End Sub

    Private Sub PrintInvoicesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintInvoicesToolStripMenuItem.Click
        'Check database to see if invoices exist
        Dim CountInvoices As Integer

        Dim CountInvoicesString As String = "SELECT COUNT(InvoiceNumber) FROM InvoiceHeaderTable WHERE SalesOrderNumber = @SalesOrderNumber AND DivisionID = @DivisionID"
        Dim CountInvoicesCommand As New SqlCommand(CountInvoicesString, con)
        CountInvoicesCommand.Parameters.Add("@SalesOrderNumber", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CountInvoicesCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CountInvoices = CInt(CountInvoicesCommand.ExecuteScalar)
        Catch ex As System.Exception
            CountInvoices = 0
        End Try
        con.Close()

        If CountInvoices = 0 Then
            MsgBox("There are no Invoices for this Sales Order.", MsgBoxStyle.OkOnly)
        Else
            GlobalSONumberInvoice = Val(cboSalesOrderNumber.Text)
            GlobalDivisionCode = cboDivisionID.Text
            EmailInvoiceCustomer = cboCustomerID.Text

            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                'Choose the correct Print Form (REMOTE or LOCAL)

                'Get Login Type
                Dim GetLoginType As String = ""

                Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
                Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
                GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetLoginType = ""
                End Try
                con.Close()

                If GetLoginType = "REMOTE" Then
                    Using NewPrintInvoiceSingleRemote As New PrintInvoiceSingleRemote
                        Dim Result = NewPrintInvoiceSingleRemote.ShowDialog()
                    End Using
                Else
                    Using NewPrintInvoiceSO As New PrintInvoiceSO
                        Dim Result = NewPrintInvoiceSO.ShowDialog()
                    End Using
                End If
            Else
                'Choose the correct Print Form (REMOTE or LOCAL)

                'Get Login Type
                Dim GetLoginType As String = ""

                Dim GetLoginTypeStatement As String = "SELECT MOSLoginType FROM EmployeeData WHERE LoginName = @LoginName"
                Dim GetLoginTypeCommand As New SqlCommand(GetLoginTypeStatement, con)
                GetLoginTypeCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

                If con.State = ConnectionState.Closed Then con.Open()
                Try
                    GetLoginType = CStr(GetLoginTypeCommand.ExecuteScalar)
                Catch ex As System.Exception
                    GetLoginType = ""
                End Try
                con.Close()

                If GetLoginType = "REMOTE" Then
                    Using NewPrintInvoiceSingleRemote As New PrintInvoiceSingleRemote
                        Dim Result = NewPrintInvoiceSingleRemote.ShowDialog()
                    End Using
                Else
                    Using NewPrintInvoiceSO As New PrintInvoiceSO
                        Dim Result = NewPrintInvoiceSO.ShowDialog()
                    End Using
                End If
            End If
        End If
    End Sub

    Private Sub UnLockSalesOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UnLockSalesOrderToolStripMenuItem.Click
        If Not String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            If MessageBox.Show("Are you sure you wish to un-lock this Sales Order?", "Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) = System.Windows.Forms.DialogResult.Yes Then
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET Locked = '' WHERE SalesOrderKey = @SalesOrderKey", con)
                cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
                MessageBox.Show("Sales Order is now un-locked", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information)
            End If
        Else
            MessageBox.Show("You must enter a Sales Order Number to un-lock", "Enter a Sales Order Number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboSalesOrderNumber.Focus()
        End If
    End Sub

    Private Sub ViewCustomerPriceSheetToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ViewCustomerPriceSheetToolStripMenuItem.Click
        Dim CustomerDivision As String = ""
        Dim CustomerName As String = ""
        Dim CustomerPriceSheetFileName As String = ""
        Dim CustomerPriceSheetFilenameAndPath As String = ""
        Dim TempFilename As String = ""

        CustomerDivision = cboDivisionID.Text
        CustomerName = cboCustomerID.Text

        CustomerPriceSheetFileName = CustomerDivision + CustomerName + ".pdf"
        CustomerPriceSheetFilenameAndPath = "\\TFP-FS\TransferData\Customer Price Sheet\" + CustomerPriceSheetFileName

        If File.Exists(CustomerPriceSheetFilenameAndPath) Then
            System.Diagnostics.Process.Start(CustomerPriceSheetFilenameAndPath)
        Else
            MsgBox("File can not be found", MsgBoxStyle.OkOnly)
        End If
    End Sub

    Private Sub ReIssueSalesOrderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReIssueSalesOrderToolStripMenuItem.Click
        'Validate Fields
        If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
            MsgBox("You must select a valid sales order.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        If cboCustomerID.Text = "" Then
            MsgBox("You must select a valid customer.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        If Me.dgvSalesOrderLines.RowCount = 0 Then
            MsgBox("This sales order has no line items.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If
        If cboDivisionID.Text = "" Then
            MsgBox("You must select a valid division.", MsgBoxStyle.OkOnly)
            Exit Sub
        End If

        'Get new Sales Order Number
        Dim GetLastSONumber As Integer = 0
        Dim GetNextSONumber As Integer = 0

        Dim GetNewSONumberStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderHeaderTable"
        Dim GetNewSONumberCommand As New SqlCommand(GetNewSONumberStatement, con)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetLastSONumber = CInt(GetNewSONumberCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetLastSONumber = 0
        End Try
        con.Close()

        GetNextSONumber = GetLastSONumber + 1

        If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
            ShipToName = cboCustomerName.Text
        Else
            ShipToName = txtSTName.Text
        End If

        Try
            'Write Data to Sales Order Header Database Table
            cmd = New SqlCommand("Insert Into SalesOrderHeaderTable(SalesOrderKey, SalesOrderDate, CustomerID, CustomerPO, SalesPerson, ShipVia, FreightCharge, TotalSalesTax, ProductTotal, SOTotal, SOStatus, DivisionKey, PRONumber, ShippingDate, HeaderComment, AdditionalShipTo, ShippingWeight, QuoteNumber, QuotedFreight, SpecialInstructions, DropShipPONumber, CustomerPOType, TotalSalesTax2, TotalSalesTax3, TotalEstCOS, TaxRate1, TaxRate2, TaxRate3, Locked, FOB, CustomerClass, ShippingMethod, ThirdPartyShipper, ShipToName, ShipToAddress1, ShipToAddress2, ShipToCity, ShipToState, ShipToZip, ShipToCountry, ShipEmail, ShippingAccount, SpecialLabelLine1, SpecialLabelLine2, SpecialLabelLine3)Values(@SalesOrderKey, @SalesOrderDate, @CustomerID, @CustomerPO, @SalesPerson, @ShipVia, @FreightCharge, @TotalSalesTax, @ProductTotal, @SOTotal, @SOStatus, @DivisionKey, @PRONumber, @ShippingDate, @HeaderComment, @AdditionalShipTo, @ShippingWeight, @QuoteNumber, @QuotedFreight, @SpecialInstructions, @DropShipPONumber, @CustomerPOType, @TotalSalesTax2, @TotalSalesTax3, @TotalEstCOS, @TaxRate1, @TaxRate2, @TaxRate3, @Locked, @FOB, @CustomerClass, @ShippingMethod, @ThirdPartyShipper, @ShipToName, @ShipToAddress1, @ShipToAddress2, @ShipToCity, @ShipToState, @ShipToZip, @ShipToCountry, @ShipEmail, @ShippingAccount, @SpecialLabelLine1, @SpecialLabelLine2, @SpecialLabelLine3)", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber
                .Add("@SalesOrderDate", SqlDbType.VarChar).Value = Today()
                .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                .Add("@CustomerPOType", SqlDbType.VarChar).Value = ""
                .Add("@SalesPerson", SqlDbType.VarChar).Value = EmployeeSalespersonCode
                .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                .Add("@FreightCharge", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                .Add("@TotalSalesTax", SqlDbType.VarChar).Value = 0
                .Add("@ProductTotal", SqlDbType.VarChar).Value = 0
                .Add("@SOTotal", SqlDbType.VarChar).Value = 0
                .Add("@SOStatus", SqlDbType.VarChar).Value = "OPEN"
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                .Add("@ShippingDate", SqlDbType.VarChar).Value = Today()
                .Add("@HeaderComment", SqlDbType.VarChar).Value = txtComment.Text
                .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                .Add("@ShippingWeight", SqlDbType.VarChar).Value = 0
                .Add("@QuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                .Add("@QuotedFreight", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                .Add("@DropShipPONumber", SqlDbType.VarChar).Value = Val(txtDSPONumber.Text)
                .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = 0
                .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = 0
                .Add("@TotalEstCOS", SqlDbType.VarChar).Value = 0
                .Add("@TaxRate1", SqlDbType.VarChar).Value = 0
                .Add("@TaxRate2", SqlDbType.VarChar).Value = 0
                .Add("@TaxRate3", SqlDbType.VarChar).Value = 0
                .Add("@Locked", SqlDbType.VarChar).Value = EmployeeLoginName
                .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                .Add("@ShipToCity", SqlDbType.VarChar).Value = txtSTCity.Text
                .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
        Catch ex As Exception
            'If Insert fails, write error message to database
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = GetNextSONumber
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = ex.ToString()
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "Re-Issue Sales Order"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            MsgBox("There was a problem re-issuing this sales order.", MsgBoxStyle.OkOnly)
            Exit Sub
        End Try

        'Get Line items and write to the Sales Order Line Table
        For Each LineRow As DataGridViewRow In dgvSalesOrderLines.Rows
            Dim RowLineKey As Integer = 0
            Dim RowPartNumber As String = ""
            Dim RowPartDescription As String = ""
            Dim RowQuantity As Double = 0
            Dim RowPrice As Double = 0
            Dim RowSalesTax As Double = 0
            Dim RowExtendedAmount As Double = 0
            Dim RowLineComment As String = ""
            Dim RowLineWeight As Double = 0
            Dim RowLineBoxes As Double = 0
            Dim RowDebitGLAccount As String = ""
            Dim RowCreditGLAccount As String = ""
            Dim RowLeadTime As String = ""
            Dim RowCertificationType As String = ""
            Dim RowEstExtendedCOS As Double = 0
            Dim RowLabelCount As Integer = 0

            Try
                RowLineKey = LineRow.Cells("SalesOrderLineKeyColumn").Value
            Catch ex As System.Exception
                RowLineKey = 1
            End Try
            Try
                RowPartNumber = LineRow.Cells("ItemIDColumn").Value
            Catch ex As System.Exception
                RowPartNumber = ""
            End Try
            Try
                RowPartDescription = LineRow.Cells("DescriptionColumn").Value
            Catch ex As System.Exception
                RowPartDescription = ""
            End Try
            Try
                RowQuantity = LineRow.Cells("QuantityColumn").Value
            Catch ex As System.Exception
                RowQuantity = 0
            End Try
            Try
                RowPrice = LineRow.Cells("PriceColumn").Value
            Catch ex As System.Exception
                RowPrice = 0
            End Try
            Try
                RowSalesTax = LineRow.Cells("SalesTaxColumn").Value
            Catch ex As System.Exception
                RowSalesTax = 0
            End Try
            Try
                RowExtendedAmount = LineRow.Cells("ExtendedAmountColumn").Value
            Catch ex As System.Exception
                RowExtendedAmount = 0
            End Try
            Try
                RowLineComment = LineRow.Cells("LineCommentColumn").Value
            Catch ex As System.Exception
                RowLineComment = ""
            End Try
            Try
                RowLineWeight = LineRow.Cells("LineWeightColumn").Value
            Catch ex As System.Exception
                RowLineWeight = 0
            End Try
            Try
                RowLineBoxes = LineRow.Cells("LineBoxesColumn").Value
            Catch ex As System.Exception
                RowLineBoxes = 0
            End Try
            Try
                RowDebitGLAccount = LineRow.Cells("DebitGLAccountColumn").Value
            Catch ex As System.Exception
                RowDebitGLAccount = ""
            End Try
            Try
                RowCreditGLAccount = LineRow.Cells("CreditGLAccountColumn").Value
            Catch ex As System.Exception
                RowCreditGLAccount = ""
            End Try
            Try
                RowLeadTime = LineRow.Cells("LeadTimeColumn").Value
            Catch ex As System.Exception
                RowLeadTime = ""
            End Try
            Try
                RowCertificationType = LineRow.Cells("CertificationTypeColumn").Value
            Catch ex As System.Exception
                RowCertificationType = ""
            End Try
            Try
                RowEstExtendedCOS = LineRow.Cells("EstExtendedCOSColumn").Value
            Catch ex As System.Exception
                RowEstExtendedCOS = 0
            End Try
            Try
                RowLabelCount = LineRow.Cells("LabelCountColumn").Value
            Catch ex As System.Exception
                RowLabelCount = 0
            End Try

            Try
                'Insert Data into new Sales Order Line Record
                cmd = New SqlCommand("Insert Into SalesOrderLineTable(SalesOrderKey, SalesOrderLineKey, ItemID, Description, Quantity, Price, LineComment, SalesTax, DivisionID, ExtendedAmount, LineWeight, LineBoxes, LineStatus, DebitGLAccount, CreditGLAccount, LeadTime, CertificationType, EstExtendedCOS, ShippedPrevious, LabelCount)Values(@SalesOrderKey, (SELECT isnull(MAX(SalesOrderLineKey) + 1, 1) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey), @ItemID, @Description, @Quantity, @Price, @LineComment, @SalesTax, @DivisionID, @ExtendedAmount, @LineWeight, @LineBoxes, @LineStatus, @DebitGLAccount, @CreditGLAccount, @LeadTime, @CertificationType, @EstExtendedCOS, @ShippedPrevious, @LabelCount)", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber
                    .Add("@SalesOrderLineKey", SqlDbType.VarChar).Value = RowLineKey
                    .Add("@ItemID", SqlDbType.VarChar).Value = RowPartNumber
                    .Add("@Description", SqlDbType.VarChar).Value = RowPartDescription
                    .Add("@Quantity", SqlDbType.VarChar).Value = RowQuantity
                    .Add("@Price", SqlDbType.VarChar).Value = RowPrice
                    .Add("@SalesTax", SqlDbType.VarChar).Value = RowSalesTax
                    .Add("@ExtendedAmount", SqlDbType.VarChar).Value = RowExtendedAmount
                    .Add("@LineComment", SqlDbType.VarChar).Value = RowLineComment
                    .Add("@LineStatus", SqlDbType.VarChar).Value = "OPEN"
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@LineWeight", SqlDbType.VarChar).Value = RowLineWeight
                    .Add("@LineBoxes", SqlDbType.VarChar).Value = RowLineBoxes
                    .Add("@DebitGLAccount", SqlDbType.VarChar).Value = RowDebitGLAccount
                    .Add("@CreditGLAccount", SqlDbType.VarChar).Value = RowCreditGLAccount
                    .Add("@LeadTime", SqlDbType.VarChar).Value = RowLeadTime
                    .Add("@CertificationType", SqlDbType.VarChar).Value = RowCertificationType
                    .Add("@EstExtendedCOS", SqlDbType.VarChar).Value = RowEstExtendedCOS
                    .Add("@ShippedPrevious", SqlDbType.VarChar).Value = 0
                    .Add("@LabelCount", SqlDbType.VarChar).Value = RowLabelCount
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'If Insert fails, write error message to database
                Dim TempSONumber As Integer = 0
                Dim strSONumber As String
                TempSONumber = GetNextSONumber
                strSONumber = CStr(TempSONumber)

                ErrorDate = Today()
                ErrorComment = ex.ToString()
                ErrorDivision = cboDivisionID.Text
                ErrorDescription = "Re-Issue Sales Order - adding lines"
                ErrorReferenceNumber = "SO # " + strSONumber
                ErrorUser = EmployeeLoginName

                TFPErrorLogUpdate()
            End Try
        Next

        'Update totals
        Dim GetSumExtendedAmount As Double = 0
        Dim GetSumSalesTax As Double = 0
        Dim GetSumLineWeight As Double = 0
        Dim GetSumEstExtendedCOS As Double = 0
        Dim GetNewTax1Total As Double = 0
        Dim GetNewTax2Total As Double = 0
        Dim GetNewTax3Total As Double = 0

        Dim GetSumExtendedAmountStatement As String = "SELECT SUM(ExtendedAmount) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim GetSumExtendedAmountCommand As New SqlCommand(GetSumExtendedAmountStatement, con)
        GetSumExtendedAmountCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetSumExtendedAmountCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber

        Dim GetSumSalesTaxStatement As String = "SELECT SUM(SalesTax) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim GetSumSalesTaxCommand As New SqlCommand(GetSumSalesTaxStatement, con)
        GetSumSalesTaxCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetSumSalesTaxCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber

        Dim GetSumLineWeightStatement As String = "SELECT SUM(LineWeight) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim GetSumLineWeightCommand As New SqlCommand(GetSumLineWeightStatement, con)
        GetSumLineWeightCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetSumLineWeightCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber

        Dim GetSumEstExtendedCOSStatement As String = "SELECT SUM(EstExtendedCOS) FROM SalesOrderLineTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID"
        Dim GetSumEstExtendedCOSCommand As New SqlCommand(GetSumEstExtendedCOSStatement, con)
        GetSumEstExtendedCOSCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetSumEstExtendedCOSCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber

        Dim GetTax1Statement As String = "SELECT TotalSalesTax FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetTax1Command As New SqlCommand(GetTax1Statement, con)
        GetTax1Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetTax1Command.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        Dim GetTax2Statement As String = "SELECT TotalSalesTax2 FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetTax2Command As New SqlCommand(GetTax2Statement, con)
        GetTax2Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetTax2Command.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        Dim GetTax3Statement As String = "SELECT TotalSalesTax3 FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetTax3Command As New SqlCommand(GetTax3Statement, con)
        GetTax3Command.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        GetTax3Command.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetSumExtendedAmount = CDbl(GetSumExtendedAmountCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetSumExtendedAmount = 0
        End Try
        Try
            GetSumSalesTax = CDbl(GetSumSalesTaxCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetSumSalesTax = 0
        End Try
        Try
            GetSumLineWeight = CDbl(GetSumLineWeightCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetSumLineWeight = 0
        End Try
        Try
            GetSumEstExtendedCOS = CDbl(GetSumEstExtendedCOSCommand.ExecuteScalar)
        Catch ex As System.Exception
            GetSumEstExtendedCOS = 0
        End Try
        Try
            GetNewTax1Total = CDbl(GetTax1Command.ExecuteScalar)
        Catch ex As System.Exception
            GetNewTax1Total = 0
        End Try
        Try
            GetNewTax2Total = CDbl(GetTax2Command.ExecuteScalar)
        Catch ex As System.Exception
            GetNewTax2Total = 0
        End Try
        Try
            GetNewTax3Total = CDbl(GetTax3Command.ExecuteScalar)
        Catch ex As System.Exception
            GetNewTax3Total = 0
        End Try
        con.Close()

        Dim NewSOTotal As Double = 0

        If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "ALB" Then
            GetNewTax1Total = GetNewTax1Total
        Else
            GetNewTax1Total = GetSumSalesTax
        End If

        NewSOTotal = GetSumExtendedAmount + GetNewTax1Total + GetNewTax2Total + GetNewTax3Total + Val(txtFreightCharges.Text)

        Try
            'Update Totals in Sales Order Header Table
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET ProductTotal = @ProductTotal, TotalSalesTax = @TotalSalesTax, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, FreightCharge = @FreightCharge, TotalEstCOS = @TotalEstCOS, SOTotal = @SOTotal, ShippingWeight = @ShippingWeight WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = GetNextSONumber
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@ProductTotal", SqlDbType.VarChar).Value = GetSumExtendedAmount
                .Add("@TotalSalesTax", SqlDbType.VarChar).Value = GetNewTax1Total
                .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = GetNewTax2Total
                .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = GetNewTax3Total
                .Add("@FreightCharge", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                .Add("@TotalEstCOS", SqlDbType.VarChar).Value = GetSumEstExtendedCOS
                .Add("@SOTotal", SqlDbType.VarChar).Value = NewSOTotal
                .Add("@ShippingWeight", SqlDbType.VarChar).Value = GetSumLineWeight
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
        Catch ex As Exception
            'If Insert fails, write error message to database
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = GetNextSONumber
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = ex.ToString()
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "Re-Issue Sales Order - update totals"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()
        End Try

        GlobalSONumber = GetNextSONumber

        MsgBox("Your sales order has been re-issued with a new SO #.", MsgBoxStyle.OkOnly)

        ClearVariables()
        ClearAllDatagrids()
        ClearData()

        LoadSalesOrderNumber()

        cboSalesOrderNumber.Text = GlobalSONumber
    End Sub

    'Validation

    Public Sub ValidateDivision()
        'Check to make sure Quote/Sales Order is correct
        Dim CheckDivisionStatement As String = "SELECT DivisionKey FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey"
        Dim CheckDivisionCommand As New SqlCommand(CheckDivisionStatement, con)
        CheckDivisionCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckDivision = CStr(CheckDivisionCommand.ExecuteScalar)
        Catch ex As Exception
            CheckDivision = ""
        End Try
        con.Close()
    End Sub

    Public Sub DisableFieldsIfNoSO()
        If cboSalesOrderNumber.Text = "" Or Val(cboSalesOrderNumber.Text) = 0 Then
            dtpSalesOrderDate.Enabled = False
            cboCustomerID.Enabled = False
            cboCustomerName.Enabled = False
            cboShipMethod.Enabled = False
            cboShipVia.Enabled = False
            txtCustomerPO.Enabled = False
        Else
            dtpSalesOrderDate.Enabled = True
            cboCustomerID.Enabled = True
            cboCustomerName.Enabled = True
            cboShipMethod.Enabled = True
            cboShipVia.Enabled = True
            txtCustomerPO.Enabled = True

            LoadShipmentCustomer()
        End If
    End Sub

    Public Sub TFPErrorLogUpdate()
        If ErrorComment.Length < 400 Then
            'Do nothing
        Else
            ErrorComment = ErrorComment.Substring(0, 399)
        End If

        'Insert Data into error log
        cmd = New SqlCommand("INSERT INTO TFPErrorLog (ErrorDate, ErrorDescription, ErrorReferenceNumber, ErrorUserID, ErrorComment, ErrorDivision) values (@ErrorDate, @ErrorDescription, @ErrorReferenceNumber, @ErrorUserID, @ErrorComment, @ErrorDivision)", con)

        With cmd.Parameters
            .Add("@ErrorDate", SqlDbType.VarChar).Value = ErrorDate
            .Add("@ErrorDescription", SqlDbType.VarChar).Value = ErrorDescription
            .Add("@ErrorReferenceNumber", SqlDbType.VarChar).Value = ErrorReferenceNumber
            .Add("@ErrorUserID", SqlDbType.VarChar).Value = ErrorUser
            .Add("@ErrorComment", SqlDbType.VarChar).Value = ErrorComment
            .Add("@ErrorDivision", SqlDbType.VarChar).Value = ErrorDivision
        End With

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Public Sub CheckForPendingShipments()
        CheckSalesOrderKey = Val(cboSalesOrderNumber.Text)

        If Val(cboSalesOrderNumber.Text) = 0 Then
            'Skip routine if no Sales Order Number
            cmdExpediteOrder.ForeColor = Color.Blue
            ExpediteToShippingToolStripMenuItem.ForeColor = Color.Blue
            cboCustomerID.Enabled = True
            cboCustomerName.Enabled = True
            cmdDelete.Enabled = True
        Else
            Dim CheckShipmentStatusString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionID = @DivisionID AND ShipmentStatus = @ShipmentStatus"
            Dim CheckShipmentStatusCommand As New SqlCommand(CheckShipmentStatusString, con)
            CheckShipmentStatusCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = CheckSalesOrderKey
            CheckShipmentStatusCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            CheckShipmentStatusCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                CheckShipmentStatus = CInt(CheckShipmentStatusCommand.ExecuteScalar)
            Catch ex As System.Exception
                CheckShipmentStatus = 0
            End Try
            con.Close()

            If CheckShipmentStatus = 0 Then
                cmdExpediteOrder.ForeColor = Color.Blue
                ExpediteToShippingToolStripMenuItem.ForeColor = Color.Blue
            Else
                cmdExpediteOrder.ForeColor = Color.Red
                ExpediteToShippingToolStripMenuItem.ForeColor = Color.Red
                txtSOStatus.Text = "SHIPPED"
            End If
        End If
    End Sub

    Public Sub CheckForShipmentsForCustomer()
        Dim CheckForCustomerShipments As Integer = 0
        Dim strCheckForCustomerShipments As String = 0

        Dim CheckForCustomerShipmentsString As String = "SELECT COUNT(ShipmentNumber) FROM ShipmentHeaderTable WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID AND ShipmentStatus = @ShipmentStatus"
        Dim CheckForCustomerShipmentsCommand As New SqlCommand(CheckForCustomerShipmentsString, con)
        CheckForCustomerShipmentsCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
        CheckForCustomerShipmentsCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
        CheckForCustomerShipmentsCommand.Parameters.Add("@ShipmentStatus", SqlDbType.VarChar).Value = "PENDING"

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckForCustomerShipments = CInt(CheckForCustomerShipmentsCommand.ExecuteScalar)
        Catch ex As System.Exception
            CheckForCustomerShipments = 0
        End Try
        con.Close()

        strCheckForCustomerShipments = CStr(CheckForCustomerShipments)

        If CheckForCustomerShipments = 0 Then
            'Do nothing
            CheckToolStripMenuItem.Visible = False
        Else
            CheckToolStripMenuItem.ForeColor = Color.Red
            CheckToolStripMenuItem.Enabled = True
            CheckToolStripMenuItem.Text = "This Customer has " & strCheckForCustomerShipments & " shipments pending."
            CheckToolStripMenuItem.Visible = True
        End If
    End Sub

    Private Function canAddItem() As Boolean
        If String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            MessageBox.Show("You must enter a Sales Order Number first", "Enter as Sales Order Number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboSalesOrderNumber.Focus()
            Return False
        End If
        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Return False
        End If
        If String.IsNullOrEmpty(cboCustomerID.Text) Then
            MessageBox.Show("You must select a Customer ID", "Select a Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.Focus()
            Return False
        End If
        If cboCustomerID.SelectedIndex = -1 Then
            MessageBox.Show("You must enter a valid Customer ID", "Enter a valid Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.SelectAll()
            cboCustomerID.Focus()
            Return False
        End If
        If String.IsNullOrEmpty(cboPartNumber.Text) Then
            MessageBox.Show("You must enter a part.", "Enter a part", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboPartNumber.Focus()
            Return False
        End If
        If cboPartNumber.SelectedIndex = -1 Then
            MessageBox.Show("You must enter a valid Part Number", "Enter a valid Part Number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboPartNumber.SelectAll()
            cboPartNumber.Focus()
            Return False
        End If
        If String.IsNullOrEmpty(txtQuantityOrdered.Text) Then
            MessageBox.Show("You must enter a Quantity", "Enter a Quantity", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtQuantityOrdered.Focus()
            Return False
        End If
        If Not IsNumeric(txtQuantityOrdered.Text) Then
            MessageBox.Show("You must enter a number for Quantity", "Enter a number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtQuantityOrdered.SelectAll()
            txtQuantityOrdered.Focus()
            Return False
        End If
        If Val(txtQuantityOrdered.Text) = 0 Then
            MessageBox.Show("You must enter a value greater than 0 for Quantity", "Enter a value", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtQuantityOrdered.SelectAll()
            txtQuantityOrdered.Focus()
            Return False
        End If
        If String.IsNullOrEmpty(txtPricePerUnit.Text) Then
            MessageBox.Show("You must enter a Price", "Enter a Price", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtPricePerUnit.Focus()
            Return False
        End If
        If Not IsNumeric(txtPricePerUnit.Text) Then
            MessageBox.Show("You must enter a number for Price", "Enter a number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            txtPricePerUnit.SelectAll()
            txtPricePerUnit.Focus()
            Return False
        End If
        Return True
    End Function

    Private Function canPrint() As Boolean
        If String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            MessageBox.Show("You must enter a Sales Order Number", "Enter a Sales Order Number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboSalesOrderNumber.Focus()
            Return False
        End If
        If String.IsNullOrEmpty(cboCustomerID.Text) Then
            MessageBox.Show("You must Select a Customer ID", "Select a Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.Focus()
            Return False
        End If
        If cboCustomerID.SelectedIndex = -1 Then
            MessageBox.Show("You must enter a valid Customer ID", "Enter a valid Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.SelectAll()
            cboCustomerID.Focus()
            Return False
        End If
        If String.IsNullOrEmpty(txtFreightQuoteAmount.Text) = False Then
            If IsNumeric(txtFreightQuoteAmount.Text) = False Then
                MessageBox.Show("You must enter a number for Quote Amount", "Enter a number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                txtFreightQuoteAmount.SelectAll()
                txtFreightQuoteAmount.Focus()
                Return False
            End If
        End If
        Return True
    End Function

    Private Function canSave() As Boolean
        If String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            MessageBox.Show("You must enter a Sales Order Number", "Enter a Sales Order Number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboSalesOrderNumber.Focus()
            Return False
        End If
        If isSomeoneEditing() Then
            ShowData()
            LoadSalesOrderStatus()
            LoadShipmentCustomer()
            LoadSalesOrderData()
            Return False
        End If
        If String.IsNullOrEmpty(cboCustomerID.Text) Then
            MessageBox.Show("You must Select a Customer ID", "Select a Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.Focus()
            Return False
        End If
        If cboCustomerID.SelectedIndex = -1 Then
            MessageBox.Show("You must enter a valid Customer ID", "Enter a valid Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.SelectAll()
            cboCustomerID.Focus()
            Return False
        End If
        Return True
    End Function

    Private Function shouldChangeNeedSaved(ByVal e As System.Windows.Forms.KeyEventArgs) As Boolean
        If tabExpandedMenu.SelectedIndex = 0 Then
            Return False
        End If
        If e.KeyCode = Keys.Tab Then
            Return False
        End If
        If e.KeyCode = Keys.Enter Then
            Return False
        End If
        Return True
    End Function

    Private Function shouldChangeState(ByVal e As System.Windows.Forms.KeyEventArgs) As Boolean
        If e.KeyCode = Keys.Tab Then
            Return False
        End If
        If e.KeyCode = Keys.Enter Then
            Return False
        End If
        If cboSalesOrderNumber.Focused() Then
            Return False
        End If
        Return True
    End Function

    Private Function canExpediteOrder() As Boolean
        If String.IsNullOrEmpty(cboSalesOrderNumber.Text) Then
            MessageBox.Show("You must enter a Sales Order Number", "Enter a Sales Order Number", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboSalesOrderNumber.Focus()
            Return False
        End If
        If String.IsNullOrEmpty(cboCustomerID.Text) Then
            MessageBox.Show("You must Select a Customer ID", "Select a Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.Focus()
            Return False
        End If
        If cboCustomerID.SelectedIndex = -1 Then
            MessageBox.Show("You must enter a valid Customer ID", "Enter a valid Customer ID", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            cboCustomerID.SelectAll()
            cboCustomerID.Focus()
            Return False
        End If

        'Check for open quantities
        Dim CheckOpenQuantity As Double = 0

        Dim CheckOpenQuantitesStatement As String = "SELECT SUM(QuantityOpen) FROM SalesOrderQuantityStatus WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim CheckOpenQuantitesCommand As New SqlCommand(CheckOpenQuantitesStatement, con)
        CheckOpenQuantitesCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        CheckOpenQuantitesCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            CheckOpenQuantity = CDbl(CheckOpenQuantitesCommand.ExecuteScalar)
        Catch ex As Exception
            CheckOpenQuantity = 0
        End Try
        con.Close()

        If CheckOpenQuantity = 0 Then
            MessageBox.Show("There are no open quantities on this Sales Order.", "No Open Quantities", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return False
        End If

        Return True
    End Function

    Private Function shouldSaveLines(ByVal e As System.Windows.Forms.KeyEventArgs) As Boolean
        If cboDeleteLine.Focused Then
            Return False
        End If
        If cboPartNumber.Focused Then
            Return False
        End If
        If e.KeyCode = Keys.Enter Then
            Return False
        End If
        If e.KeyCode = Keys.Tab Then
            Return False
        End If
        Return True
    End Function

    Private Function isSomeoneEditing() As Boolean
        cmd = New SqlCommand("SELECT Locked FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)
        cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        Dim personEditing As String = "NONE"
        If con.State = ConnectionState.Closed Then con.Open()
        Dim reader As SqlDataReader = cmd.ExecuteReader()
        If reader.HasRows Then
            reader.Read()
            If Not IsDBNull(reader.Item("Locked")) Then
                personEditing = reader.Item("Locked")
            End If
        End If
        reader.Close()
        con.Close()

        If Not personEditing.Equals("NONE") And Not String.IsNullOrEmpty(personEditing) Then
            If Not personEditing.Equals(EmployeeLoginName) Then
                MessageBox.Show(personEditing + " is currently editing this Sales Order. You are unable to make any changes.", "Unable to make changes", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Return True
            End If
        End If
        Return False
    End Function

    Private Sub LockBatch()
        cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET Locked = @Locked WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)
        cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        cmd.Parameters.Add("@Locked", SqlDbType.VarChar).Value = EmployeeLoginName

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Private Sub unlockBatch(Optional ByVal batch As String = "none")
        cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET Locked = '' WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey AND Locked = @Locked", con)
        If batch.Equals("none") Then
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
            cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        Else
            cmd.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = batch
            cmd.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
        End If
        cmd.Parameters.Add("@Locked", SqlDbType.VarChar).Value = EmployeeLoginName
        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Private Sub CheckIfLocked()
        Dim GetLockedCode As String = ""

        Dim GetLockedCodeStatement As String = "SELECT Locked FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey"
        Dim GetLockedCodeCommand As New SqlCommand(GetLockedCodeStatement, con)
        GetLockedCodeCommand.Parameters.Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
        GetLockedCodeCommand.Parameters.Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            GetLockedCode = CStr(GetLockedCodeCommand.ExecuteScalar)
        Catch ex As Exception
            GetLockedCode = ""
        End Try
        con.Close()

        If GetLockedCode = "" Then
            IsSalesOrderLocked = "NO"
        ElseIf GetLockedCode = EmployeeLoginName Then
            IsSalesOrderLocked = "NO"
        Else
            IsSalesOrderLocked = "YES"
        End If
    End Sub

    Private Sub LockControlsIfLocked()
        dgvSalesOrderLines.ReadOnly = True
        cmdAddItem.Enabled = False
        cmdBillOnly.Enabled = False
        cmdCopyBTAddress.Enabled = False
        cmdDelete.Enabled = False
        cmdDeleteLine.Enabled = False
        cmdExpediteOrder.Enabled = False
        cmdEditSave.Enabled = False
        cmdInsertLine.Enabled = False
        cmdRemoveSalesTax.Enabled = False
        cmdSave.Enabled = False
        SaveToolStripMenuItem.Enabled = False
        ExpediteToShippingToolStripMenuItem.Enabled = False
        DeleteSalesOrderToolStripMenuItem.Enabled = False
        AddTaxToSOToolStripMenuItem.Enabled = False
        ManuallyCloseSOToolStripMenuItem.Enabled = False
    End Sub

    Private Sub UnlockControlsIfUnlocked()
        dgvSalesOrderLines.ReadOnly = False
        cmdAddItem.Enabled = True
        cmdBillOnly.Enabled = True
        cmdCopyBTAddress.Enabled = True
        cmdDelete.Enabled = True
        cmdDeleteLine.Enabled = True
        cmdExpediteOrder.Enabled = True
        cmdEditSave.Enabled = True
        cmdInsertLine.Enabled = True
        cmdRemoveSalesTax.Enabled = True
        cmdSave.Enabled = True
        SaveToolStripMenuItem.Enabled = True
        ExpediteToShippingToolStripMenuItem.Enabled = True
        DeleteSalesOrderToolStripMenuItem.Enabled = True
        AddTaxToSOToolStripMenuItem.Enabled = True
        ManuallyCloseSOToolStripMenuItem.Enabled = True
    End Sub

    Public Sub FormLoginRoutine()
        'Define Variables
        Dim Todaysdate As Date = Now()
        Dim strTodaysDate As String = ""
        strTodaysDate = Todaysdate.ToShortDateString()
        Dim strTodaysTime As String = ""
        strTodaysTime = Todaysdate.ToShortTimeString()

        'Update Database
        cmd = New SqlCommand("INSERT INTO UserFormLogin (UserID, FormName, DivisionID, LoginDate, LoginTime, LogoutDate, LogoutTime) values (@UserID, @FormName, @DivisionID, @LoginDate, @LoginTime, @LogoutDate, @LogoutTime)", con)

        With cmd.Parameters
            .Add("@UserID", SqlDbType.VarChar).Value = EmployeeLoginName
            .Add("@FormName", SqlDbType.VarChar).Value = FormName
            .Add("@DivisionID", SqlDbType.VarChar).Value = EmployeeCompanyCode
            .Add("@LoginDate", SqlDbType.VarChar).Value = strTodaysDate
            .Add("@LoginTime", SqlDbType.VarChar).Value = strTodaysTime
            .Add("@LogoutDate", SqlDbType.VarChar).Value = ""
            .Add("@LogoutTime", SqlDbType.VarChar).Value = ""
        End With

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Public Sub FormLogoutRoutine()
        'Define Variables
        Dim Todaysdate As Date = Now()
        Dim strTodaysDate As String = ""
        strTodaysDate = Todaysdate.ToShortDateString()
        Dim strTodaysTime As String = ""
        strTodaysTime = Todaysdate.ToShortTimeString()

        'Update Database
        cmd = New SqlCommand("INSERT INTO UserFormLogin (UserID, FormName, DivisionID, LoginDate, LoginTime, LogoutDate, LogoutTime) values (@UserID, @FormName, @DivisionID, @LoginDate, @LoginTime, @LogoutDate, @LogoutTime)", con)

        With cmd.Parameters
            .Add("@UserID", SqlDbType.VarChar).Value = EmployeeLoginName
            .Add("@FormName", SqlDbType.VarChar).Value = FormName
            .Add("@DivisionID", SqlDbType.VarChar).Value = EmployeeCompanyCode
            .Add("@LoginDate", SqlDbType.VarChar).Value = ""
            .Add("@LoginTime", SqlDbType.VarChar).Value = ""
            .Add("@LogoutDate", SqlDbType.VarChar).Value = strTodaysDate
            .Add("@LogoutTime", SqlDbType.VarChar).Value = strTodaysTime
        End With

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    'Save/Update Sub-Routines

    Public Sub SaveInsertIntoSalesOrderHeader()
        Try
            Dim SalespersonCode As String = ""

            If cboSalesPersonID.Text = "" Then
                SalespersonCode = EmployeeSalespersonCode
            Else
                SalespersonCode = cboSalesPersonID.Text
            End If

            If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                ShipToName = cboCustomerName.Text
            Else
                ShipToName = txtSTName.Text
            End If

            txtFreightCharges.BackColor = Color.White

            Dim MAXStatement As String = "SELECT MAX(SalesOrderKey) FROM SalesOrderHeaderTable"
            Dim MAXCommand As New SqlCommand(MAXStatement, con)

            If con.State = ConnectionState.Closed Then con.Open()
            Try
                LastTransactionNumber = CInt(MAXCommand.ExecuteScalar)
            Catch ex As System.Exception
                LastTransactionNumber = 500000
            End Try
            con.Close()

            NextTransactionNumber = LastTransactionNumber + 1
            cboSalesOrderNumber.Text = NextTransactionNumber

            'Write Data to Sales Order Header Database Table
            cmd = New SqlCommand("Insert Into SalesOrderHeaderTable(SalesOrderKey, SalesOrderDate, CustomerID, CustomerPO, SalesPerson, ShipVia, FreightCharge, TotalSalesTax, ProductTotal, SOTotal, SOStatus, DivisionKey, PRONumber, ShippingDate, HeaderComment, AdditionalShipTo, ShippingWeight, QuoteNumber, QuotedFreight, SpecialInstructions, DropShipPONumber, CustomerPOType, TotalSalesTax2, TotalSalesTax3, TaxOnFreight, TotalEstCOS, TaxRate1, TaxRate2, TaxRate3, Locked, FOB, CustomerClass, ShippingMethod, ThirdPartyShipper, ShipToName, ShipToAddress1, ShipToAddress2, ShipToCity, ShipToState, ShipToZip, ShipToCountry, ShipEmail, ShippingAccount, SpecialLabelLine1, SpecialLabelLine2, SpecialLabelLine3, SalesOrderType, WorkOrderNumber)Values(@SalesOrderKey, @SalesOrderDate, @CustomerID, @CustomerPO, @SalesPerson, @ShipVia, @FreightCharge, @TotalSalesTax, @ProductTotal, @SOTotal, @SOStatus, @DivisionKey, @PRONumber, @ShippingDate, @HeaderComment, @AdditionalShipTo, @ShippingWeight, @QuoteNumber, @QuotedFreight, @SpecialInstructions, @DropShipPONumber, @CustomerPOType, @TotalSalesTax2, @TotalSalesTax3, @TaxOnFreight, @TotalEstCOS, @TaxRate1, @TaxRate2, @TaxRate3, @Locked, @FOB, @CustomerClass, @ShippingMethod, @ThirdPartyShipper, @ShipToName, @ShipToAddress1, @ShipToAddress2, @ShipToCity, @ShipToState, @ShipToZip, @ShipToCountry, @ShipEmail, @ShippingAccount, @SpecialLabelLine1, @SpecialLabelLine2, @SpecialLabelLine3, @SalesOrderType, @WorkOrderNumber)", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = NextTransactionNumber
                .Add("@SalesOrderDate", SqlDbType.VarChar).Value = SalesOrderDate
                .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                .Add("@CustomerPOType", SqlDbType.VarChar).Value = ""
                .Add("@SalesPerson", SqlDbType.VarChar).Value = EmployeeSalespersonCode
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                .Add("@FreightCharge", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                .Add("@TaxOnFreight", SqlDbType.VarChar).Value = 0
                .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                .Add("@TaxRate1", SqlDbType.VarChar).Value = SalesTaxRate1
                .Add("@TaxRate2", SqlDbType.VarChar).Value = SalesTaxRate2
                .Add("@TaxRate3", SqlDbType.VarChar).Value = SalesTaxRate3
                .Add("@SOStatus", SqlDbType.VarChar).Value = txtSOStatus.Text
                .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                .Add("@ShippingDate", SqlDbType.VarChar).Value = ShippingDate
                .Add("@HeaderComment", SqlDbType.VarChar).Value = txtComment.Text
                .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                .Add("@QuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                .Add("@QuotedFreight", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                .Add("@DropShipPONumber", SqlDbType.VarChar).Value = Val(txtDSPONumber.Text)
                .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                .Add("@ShipToCity", SqlDbType.VarChar).Value = txtSTCity.Text
                .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                .Add("@Locked", SqlDbType.VarChar).Value = EmployeeLoginName
                .Add("@SalesOrderType", SqlDbType.VarChar).Value = "SO"
                .Add("@WorkOrderNumber", SqlDbType.VarChar).Value = 0
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
        Catch ex As System.Exception
            'If Insert fails, write error message to database
            'Log error on update failure
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = ex.ToString()
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "Insert Command --- SO Form (L16143)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()

            ClearData()
            ClearDataInDatagrid()
            ClearVariables()

            cboSalesOrderNumber.SelectedIndex = -1
            MsgBox("This SO # has already been taken. Start a new order.", MsgBoxStyle.OkOnly)
        End Try
    End Sub

    Public Sub SaveUpdateSalesOrderHeader()
        Try
            Dim SalespersonCode As String = ""

            If cboSalesPersonID.Text = "" Then
                SalespersonCode = EmployeeSalespersonCode
            Else
                SalespersonCode = cboSalesPersonID.Text
            End If

            If txtSTName.Text = "" Or txtSTName.Text = "DEFAULT SHIP TO" Then
                ShipToName = cboCustomerName.Text
            Else
                ShipToName = txtSTName.Text
            End If

            If cboDivisionID.Text = "TFF" Then
                CalculateCanadianTotals()
            ElseIf cboDivisionID.Text = "TOR" Then
                CalculateCanadianTotals()
            ElseIf cboDivisionID.Text = "ALB" Then
                CalculateCanadianTotals()
            Else
                RecalculateLineTaxTotals()
                CalculateTotals()
            End If

            If TotalTax = 0 And SalesTaxRate1 <> 0 And cboDivisionID.Text = "TFF" Then
                TotalTax = SalesTaxRate1 * (ProductTotal + Val(txtFreightCharges.Text))
                TotalTax = Math.Round(TotalTax, 2)
            End If

            SOStatus = txtSOStatus.Text
            SalesOrderDate = dtpSalesOrderDate.Value
            ShippingDate = dtpShippingDate.Value

            txtFreightCharges.BackColor = Color.White
            '********************************************************************************
            'Save all updates to Sales Order Header Table
            cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SalesOrderDate = @SalesOrderDate, CustomerID = @CustomerID, CustomerPO = @CustomerPO, Salesperson = @Salesperson, ShipVia = @ShipVia, ShippingDate = @ShippingDate, HeaderComment = @HeaderComment, PRONumber = @PRONumber, FreightCharge = @FreightCharge, TotalSalesTax = @TotalSalesTax, ProductTotal = @ProductTotal, SOTotal = @SOTotal, SOStatus = @SOStatus, AdditionalShipTo = @AdditionalShipTo, QuoteNumber = @QuoteNumber, QuotedFreight = @QuotedFreight, ShippingWeight = @ShippingWeight, SpecialInstructions = @SpecialInstructions, DropShipPONumber = @DropShipPONumber, CustomerPOType = @CustomerPOType, TotalSalesTax2 = @TotalSalesTax2, TotalSalesTax3 = @TotalSalesTax3, TaxOnFreight = @TaxOnFreight, TotalEstCOS = @TotalEstCOS, TaxRate1 = @TaxRate1, TaxRate2 = @TaxRate2, TaxRate3 = @TaxRate3, FOB = @FOB, Locked = @Locked, CustomerClass = @CustomerClass, ShippingMethod = @ShippingMethod, ThirdPartyShipper = @ThirdPartyShipper, ShipToName = @ShipToName, ShipToAddress1 = @ShipToAddress1, ShipToAddress2 = @ShipToAddress2, ShipToCity = @ShipToCity, ShipToState = @ShipToState, ShipToZip = @ShipToZip, ShipToCountry = @ShipToCountry, ShipEmail = @ShipEmail, ShippingAccount = @ShippingAccount, SpecialLabelLine1 = @SpecialLabelLine1, SpecialLabelLine2 = @SpecialLabelLine2, SpecialLabelLine3 = @SpecialLabelLine3, SalesOrderType = @SalesOrderType, WorkOrderNumber = @WorkOrderNumber WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

            With cmd.Parameters
                .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                .Add("@SalesOrderDate", SqlDbType.VarChar).Value = SalesOrderDate
                .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                .Add("@CustomerPO", SqlDbType.VarChar).Value = txtCustomerPO.Text
                .Add("@CustomerPOType", SqlDbType.VarChar).Value = ""
                .Add("@SalesPerson", SqlDbType.VarChar).Value = SalespersonCode
                .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                .Add("@ShipVia", SqlDbType.VarChar).Value = cboShipVia.Text
                .Add("@ShippingDate", SqlDbType.VarChar).Value = ShippingDate
                .Add("@HeaderComment", SqlDbType.VarChar).Value = txtComment.Text
                .Add("@PRONumber", SqlDbType.VarChar).Value = txtPRONumber.Text
                .Add("@FreightCharge", SqlDbType.VarChar).Value = Val(txtFreightCharges.Text)
                .Add("@TotalSalesTax", SqlDbType.VarChar).Value = TotalTax
                .Add("@TotalSalesTax2", SqlDbType.VarChar).Value = TotalSalesTax2
                .Add("@TotalSalesTax3", SqlDbType.VarChar).Value = TotalSalesTax3
                .Add("@TaxOnFreight", SqlDbType.VarChar).Value = 0
                .Add("@ProductTotal", SqlDbType.VarChar).Value = ProductTotal
                .Add("@SOTotal", SqlDbType.VarChar).Value = OrderTotal
                .Add("@TotalEstCOS", SqlDbType.VarChar).Value = EstTotalCOS
                .Add("@TaxRate1", SqlDbType.VarChar).Value = SalesTaxRate1
                .Add("@TaxRate2", SqlDbType.VarChar).Value = SalesTaxRate2
                .Add("@TaxRate3", SqlDbType.VarChar).Value = SalesTaxRate3
                .Add("@SOStatus", SqlDbType.VarChar).Value = SOStatus
                .Add("@AdditionalShipTo", SqlDbType.VarChar).Value = cboShipToID.Text
                .Add("@QuoteNumber", SqlDbType.VarChar).Value = txtFreightQuoteNumber.Text
                .Add("@QuotedFreight", SqlDbType.VarChar).Value = Val(txtFreightQuoteAmount.Text)
                .Add("@ShippingWeight", SqlDbType.VarChar).Value = TotalWeightRunningTotal
                .Add("@SpecialInstructions", SqlDbType.VarChar).Value = txtShippingInstructions.Text
                .Add("@DropShipPONumber", SqlDbType.VarChar).Value = Val(txtDSPONumber.Text)
                .Add("@FOB", SqlDbType.VarChar).Value = cboFOB.Text
                .Add("@CustomerClass", SqlDbType.VarChar).Value = cboCustomerClass.Text
                .Add("@ShippingMethod", SqlDbType.VarChar).Value = cboShipMethod.Text
                .Add("@ThirdPartyShipper", SqlDbType.VarChar).Value = txtThirdPartyShipper.Text
                .Add("@ShipToName", SqlDbType.VarChar).Value = ShipToName
                .Add("@ShipToAddress1", SqlDbType.VarChar).Value = txtSTAddress1.Text
                .Add("@ShipToAddress2", SqlDbType.VarChar).Value = txtSTAddress2.Text
                .Add("@ShipToCity", SqlDbType.VarChar).Value = txtSTCity.Text
                .Add("@ShipToState", SqlDbType.VarChar).Value = txtSTState.Text
                .Add("@ShipToZip", SqlDbType.VarChar).Value = txtSTZip.Text
                .Add("@ShipToCountry", SqlDbType.VarChar).Value = txtSTCountry.Text
                .Add("@ShipEmail", SqlDbType.VarChar).Value = txtShipEmail.Text
                .Add("@ShippingAccount", SqlDbType.VarChar).Value = txtFreightAccount.Text
                .Add("@SpecialLabelLine1", SqlDbType.VarChar).Value = txtSpecialLabelLine1.Text
                .Add("@SpecialLabelLine2", SqlDbType.VarChar).Value = txtSpecialLabelLine2.Text
                .Add("@SpecialLabelLine3", SqlDbType.VarChar).Value = txtSpecialLabelLine3.Text
                .Add("@Locked", SqlDbType.VarChar).Value = EmployeeLoginName
                .Add("@SalesOrderType", SqlDbType.VarChar).Value = "SO"
                .Add("@WorkOrderNumber", SqlDbType.VarChar).Value = 0
            End With

            If con.State = ConnectionState.Closed Then con.Open()
            cmd.ExecuteNonQuery()
            con.Close()
        Catch ex As System.Exception
            'If Insert fails, write error message to database
            'Log error on update failure
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = ex.ToString()
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "Update Command --- SO Form (L16253)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()
        End Try

        Try
            'Update Sales Tax by the tax rates saved (Canada Only)
            If cboDivisionID.Text = "TFF" Or cboDivisionID.Text = "TOR" Or cboDivisionID.Text = "ALB" Then
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET TotalSalesTax = (ProductTotal + FreightCharge) * TaxRate1, TotalSalesTax2 = (ProductTotal + FreightCharge) * TaxRate2, TotalSalesTax3 = (ProductTotal + FreightCharge) * TaxRate3 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()

                'Re-Total Sales Order Header Table
                cmd = New SqlCommand("UPDATE SalesOrderHeaderTable SET SOTotal = ProductTotal + FreightCharge + TotalSalesTax + TotalSalesTax2 + TotalSalesTax3 WHERE SalesOrderKey = @SalesOrderKey AND DivisionKey = @DivisionKey", con)

                With cmd.Parameters
                    .Add("@SalesOrderKey", SqlDbType.VarChar).Value = Val(cboSalesOrderNumber.Text)
                    .Add("@DivisionKey", SqlDbType.VarChar).Value = cboDivisionID.Text
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            End If
        Catch ex As System.Exception
            'If Insert fails, write error message to database
            'Log error on update failure
            Dim TempSONumber As Integer = 0
            Dim strSONumber As String
            TempSONumber = Val(cboSalesOrderNumber.Text)
            strSONumber = CStr(TempSONumber)

            ErrorDate = Today()
            ErrorComment = ex.ToString()
            ErrorDivision = cboDivisionID.Text
            ErrorDescription = "Update Command --- SO Form (Canadian Routine) (L16297)"
            ErrorReferenceNumber = "SO # " + strSONumber
            ErrorUser = EmployeeLoginName

            TFPErrorLogUpdate()
        End Try
    End Sub

    Public Sub SaveInsertAdditionalShipTo()
        'Create new ship to from the text boxes
        Dim TempShipName As String = ""

        If txtSTName.Text = "" Then
            TempShipName = cboCustomerName.Text
        Else
            TempShipName = txtSTName.Text
        End If

        cmd = New SqlCommand("Insert Into AdditionalShipTo(ShipToID, CustomerID, DivisionID, Address1, Address2, City, State, Zip, Country, Name) Values (@ShipToID, @CustomerID, @DivisionID, @Address1, @Address2, @City, @State, @Zip, @Country, @Name)", con)

        With cmd.Parameters
            .Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            .Add("@Address1", SqlDbType.VarChar).Value = txtSTAddress1.Text
            .Add("@Address2", SqlDbType.VarChar).Value = txtSTAddress2.Text
            .Add("@City", SqlDbType.VarChar).Value = txtSTCity.Text
            .Add("@State", SqlDbType.VarChar).Value = txtSTState.Text
            .Add("@Zip", SqlDbType.VarChar).Value = txtSTZip.Text
            .Add("@Country", SqlDbType.VarChar).Value = txtSTCountry.Text
            .Add("@Name", SqlDbType.VarChar).Value = TempShipName
        End With

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Public Sub SaveUpdateAdditionalShipTo()
        Dim TempShipName As String = ""

        If txtSTName.Text = "" Then
            TempShipName = cboCustomerName.Text
        Else
            TempShipName = txtSTName.Text
        End If

        'Command to save changes in the additional ship to from the text boxes
        cmd = New SqlCommand("UPDATE AdditionalShipTo SET Address1 = @Address1, Address2 = @Address2, City = @City, State = @State, Zip = @Zip, Country = @Country, Name = @Name WHERE ShipToID = @ShipToID AND CustomerID = @CustomerID AND DivisionID = @DivisionID", con)

        With cmd.Parameters
            .Add("@ShipToID", SqlDbType.VarChar).Value = cboShipToID.Text
            .Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
            .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
            .Add("@Address1", SqlDbType.VarChar).Value = txtSTAddress1.Text
            .Add("@Address2", SqlDbType.VarChar).Value = txtSTAddress2.Text
            .Add("@City", SqlDbType.VarChar).Value = txtSTCity.Text
            .Add("@State", SqlDbType.VarChar).Value = txtSTState.Text
            .Add("@Zip", SqlDbType.VarChar).Value = txtSTZip.Text
            .Add("@Country", SqlDbType.VarChar).Value = txtSTCountry.Text
            .Add("@Name", SqlDbType.VarChar).Value = TempShipName
        End With

        If con.State = ConnectionState.Closed Then con.Open()
        cmd.ExecuteNonQuery()
        con.Close()
    End Sub

    Private Function GetCertSpecifics(ByVal rw As Data.DataRow) As String
        Select Case rw.Item("CertificationType")
            Case "0"
                Return ""
            Case "1"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString() + " AND ReductionPercent >= " + rw.Item("ROAPercent").ToString() + " AND Elongation2Percent >= " + rw.Item("ElongationPercent").ToString()
            Case "2"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "3"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString() + " AND Elongation2Percent >= " + rw.Item("ElongationPercent").ToString()
            Case "4"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "5"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString() + " AND ReductionPercent >= " + rw.Item("ROAPercent").ToString() + " AND Elongation2Percent >= " + rw.Item("ElongationPercent").ToString()
            Case "6"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "7"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "8"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString() + " AND Elongation2Percent >= " + rw.Item("ElongationPercent").ToString()
            Case "9"
                Return " AND Elongation2Percent >= " + rw.Item("ElongationPercent").ToString()
            Case "10"
                Return ""
            Case "11"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "12"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "13"
                Return " AND UltimateYieldPSI >= " + rw.Item("MinTensile").ToString() + " AND Yield2PercentPSI >= " + rw.Item("MinYield").ToString()
            Case "CERT REQUIRED"
                Return ""
            Case Else
                Return ""
        End Select
    End Function

    Private Sub UpdateNotifications(ByVal part As String)
        'IF ALL COMPANIES ARE ABLE THE DIVISION CHECK NEEDS REMOVED
        '&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
        If Not String.IsNullOrEmpty(part) And (cboDivisionID.Text.Equals("TWE") Or cboDivisionID.Text.Equals("TST")) Then
            cmd = New SqlCommand("SELECT ItemClass FROM ItemList WHERE ItemID = @ItemID and DivisionID = @DivisionID", con)
            cmd.Parameters.Add("@ItemID", SqlDbType.VarChar).Value = part
            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

            If con.State = ConnectionState.Closed Then con.Open()
            ''check to make sure the part that was altered was one that is a rental
            If cmd.ExecuteScalar().ToString.Equals("RENTAL") Then
                cmd = New SqlCommand("SELECT NotificationKey, NotificationDateTime FROM NotificationTable WHERE ReferenceNumber = @ReferenceNumber AND Status <> 'COMPLETED' AND NotificationType = 'Recurring Invoice' ORDER BY NotificationDateTime;", con)
                cmd.Parameters.Add("@ReferenceNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text

                Dim notificationDS As New DataSet()
                Dim adap As New SqlDataAdapter(cmd)

                If con.State = ConnectionState.Closed Then con.Open()
                adap.Fill(notificationDS, "NotificationTable")

                cmd.CommandText = "SELECT ItemID, QuantityOrdered - QuantityShipped as QuantityRemaining, QuantityOrdered, SalesOrderDate FROM SalesOrderQuantityStatus WHERE SalesOrderKey = CAST(@ReferenceNumber as int) AND ItemID in (SELECT ItemID FROM ItemList WHERE ItemClass = 'RENTAL' AND DivisionID = @DivisionID) AND DivisionKey = @DivisionID"
                cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                Dim SOLineDS As New DataSet()
                adap.SelectCommand = cmd
                If con.State = ConnectionState.Closed Then con.Open()

                adap.Fill(SOLineDS, "SOLine")
                ''check to make sure there is at least 1 line on the sales order
                If SOLineDS.Tables("SOLine").Rows.Count > 0 Then
                    If notificationDS.Tables("NotificationTable").Rows.Count > SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining") Then
                        Dim difference As Integer = notificationDS.Tables("NotificationTable").Rows.Count - SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining")
                        cmd = New SqlCommand("DELETE NotificationTable WHERE ", con)
                        Dim isFirst As Boolean = True
                        ''goes through the notifications that don't need to be there anymore and will delete them
                        Dim test As Integer = notificationDS.Tables("NotificationTable").Rows.Count - difference
                        Dim test2 As Integer = notificationDS.Tables("NotificationTable").Rows.Count - 1
                        For i As Integer = notificationDS.Tables("NotificationTable").Rows.Count - 1 To notificationDS.Tables("NotificationTable").Rows.Count - difference Step -1
                            If isFirst Then
                                isFirst = False
                                cmd.CommandText += "NotificationKey = @NotificationKey" + i.ToString()
                            Else
                                cmd.CommandText += " OR NotificationKey = @NotificationKey" + i.ToString()
                            End If
                            cmd.Parameters.Add("@NotificationKey" + i.ToString(), SqlDbType.Int).Value = notificationDS.Tables("NotificationTable").Rows(i).Item("NotificationKey")
                        Next

                        If con.State = ConnectionState.Closed Then con.Open()
                        cmd.ExecuteNonQuery()
                    ElseIf notificationDS.Tables("NotificationTable").Rows.Count < SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining") Then
                        ''check to make sure there is at least 1 notification
                        If notificationDS.Tables("NotificationTable").Rows.Count > 0 Then
                            Dim LastDate As DateTime = notificationDS.Tables("NotificationTable").Rows(notificationDS.Tables("NotificationTable").Rows.Count - 1).Item("NotificationDateTime")
                            Dim difference As Integer = SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining") - notificationDS.Tables("NotificationTable").Rows.Count
                            cmd = New SqlCommand("DECLARE @NotificationKey as int = (SELECT isnull(MAX(NotificationKey) + 1, 1) FROM NotificationTable), @GroupID as int = (SELECT isnull(MAX(GroupID), 1) FROM NotificationTable WHERE ReferenceNumber = CAST(@SalesOrderNumber as varchar(20))), @EmployeeID as varchar(50) = (SELECT EmployeeID FROM EmployeeData WHERE SalesPersonID = (SELECT SalesPerson FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderNumber AND DivisionKey = @DivisionID)); INSERT INTO NotificationTable (NotificationKey, DivisionID, EmployeeID, NotificationType, ReferenceNumber, Frequency, NotificationDateTime, Details, Status, AddedBy, GroupID, SnoozeTime) VALUES", con)
                            cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                            cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.Int).Value = Val(cboSalesOrderNumber.Text)
                            cmd.Parameters.Add("@AddedBy", SqlDbType.VarChar).Value = EmployeeLoginName
                            ''goes through and creates the new row to add for notifications
                            For i As Integer = 0 To difference - 1
                                Dim details As String = "Customer: " + cboCustomerID.Text + Environment.NewLine + "Part Number(s): "
                                If i = 0 Then
                                    cmd.CommandText += " (@NotificationKey + " + i.ToString() + ", @DivisionID, @EmployeeID, 'Recurring Invoice', @SalesOrderNumber, 'Recurring', @NotificationDateTime" + i.ToString() + ", @Details" + i.ToString() + ", 'ACTIVE', @AddedBy, @GroupID, @NotificationDateTime" + i.ToString() + ")"
                                Else
                                    cmd.CommandText += ", (@NotificationKey + " + i.ToString() + ", @DivisionID, @EmployeeID, 'Recurring Invoice', @SalesOrderNumber, 'Recurring', @NotificationDateTime" + i.ToString() + ", @Details" + i.ToString() + ", 'ACTIVE', @AddedBy, @GroupID, @NotificationDateTime" + i.ToString() + ")"
                                End If
                                ''goes through the all the lines and adds the part numbers for each who should be on the notification
                                For j As Integer = 0 To SOLineDS.Tables("SOLine").Rows.Count - 1
                                    If SOLineDS.Tables("SOLine").Rows(j).Item("QuantityRemaining") >= notificationDS.Tables("NotificationTable").Rows.Count + i Then
                                        If j = 0 Then
                                            details += SOLineDS.Tables("SOLine").Rows(j).Item("ItemID").ToString()
                                        Else
                                            details += ", " + SOLineDS.Tables("SOLine").Rows(j).Item("ItemID").ToString()
                                        End If
                                    End If
                                Next
                                cmd.Parameters.Add("@Details" + i.ToString(), SqlDbType.VarChar).Value = details

                                cmd.Parameters.Add("@NotificationDateTime" + i.ToString(), SqlDbType.DateTime).Value = LastDate.AddMonths(i + 1)
                            Next
                            If con.State = ConnectionState.Closed Then con.Open()
                            cmd.ExecuteNonQuery()
                        Else
                            ''if there are no notifications will check to see if there are notifications that have been completed if so will recreate the notifications missing
                            cmd = New SqlCommand("SELECT GroupID, NotificationDateTime FROM NotificationTable WHERE ReferenceNumber = @ReferenceNumber ORDER BY NotificationDateTime", con)
                            cmd.Parameters.Add("@ReferenceNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                            notificationDS = New DataSet()
                            adap.SelectCommand = cmd

                            If con.State = ConnectionState.Closed Then con.Open()
                            adap.Fill(notificationDS, "NotificationTable")
                            ''check to see if there was a notification at all for this sales order, if so will use the last notification date for the starting point for the new notifications
                            If notificationDS.Tables("NotificationTable").Rows.Count > 0 Then
                                Dim LastDate As DateTime = notificationDS.Tables("NotificationTable").Rows(notificationDS.Tables("NotificationTable").Rows.Count - 1).Item("NotificationDateTime")
                                Dim difference As Integer = SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining") - notificationDS.Tables("NotificationTable").Rows.Count
                                cmd = New SqlCommand("DECLARE @NotificationKey as int = (SELECT isnull(MAX(NotificationKey) + 1, 1) FROM NotificationTable), @GroupID as int = (SELECT isnull(MAX(GroupID), 1) FROM NotificationTable WHERE ReferenceNumber = CAST(@SalesOrderNumber as varchar(20))), @EmployeeID as varchar(50) = (SELECT EmployeeID FROM EmployeeData WHERE SalesPersonID = (SELECT SalesPerson FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderNumber AND DivisionKey = @DivisionID)); INSERT INTO NotificationTable (NotificationKey, DivisionID, EmployeeID, NotificationType, ReferenceNumber, Frequency, NotificationDateTime, Details, Status, AddedBy, GroupID, SnoozeTime) VALUES", con)
                                cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.Int).Value = Val(cboSalesOrderNumber.Text)
                                cmd.Parameters.Add("@AddedBy", SqlDbType.VarChar).Value = EmployeeLoginName
                                ''goes through and creates the new row to add for notifications
                                For i As Integer = 0 To difference - 1
                                    Dim details As String = "Customer: " + cboCustomerID.Text + Environment.NewLine + "Part Number(s): "
                                    If i = 0 Then
                                        cmd.CommandText += " (@NotificationKey + " + i.ToString() + ", @DivisionID, @EmployeeID, 'Recurring Invoice', @SalesOrderNumber, 'Recurring', @NotificationDateTime" + i.ToString() + ", @Details" + i.ToString() + ", 'ACTIVE', @AddedBy, @GroupID, @NotificationDateTime" + i.ToString() + ")"
                                    Else
                                        cmd.CommandText += ", (@NotificationKey + " + i.ToString() + ", @DivisionID, @EmployeeID, 'Recurring Invoice', @SalesOrderNumber, 'Recurring', @NotificationDateTime" + i.ToString() + ", @Details" + i.ToString() + ", 'ACTIVE', @AddedBy, @GroupID, @NotificationDateTime" + i.ToString() + ")"
                                    End If
                                    ''goes through the all the lines and adds the part numbers for each who should be on the notification
                                    For j As Integer = 0 To SOLineDS.Tables("SOLine").Rows.Count - 1
                                        If SOLineDS.Tables("SOLine").Rows(j).Item("QuantityRemaining") >= notificationDS.Tables("NotificationTable").Rows.Count + i Then
                                            If j = 0 Then
                                                details += SOLineDS.Tables("SOLine").Rows(j).Item("ItemID").ToString()
                                            Else
                                                details += ", " + SOLineDS.Tables("SOLine").Rows(j).Item("ItemID").ToString()
                                            End If
                                        End If
                                    Next
                                    cmd.Parameters.Add("@Details" + i.ToString(), SqlDbType.VarChar).Value = details

                                    cmd.Parameters.Add("@NotificationDateTime" + i.ToString(), SqlDbType.DateTime).Value = LastDate.AddMonths(i + 1)
                                Next
                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                            ElseIf SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining") <> SOLineDS.Tables("SOLine").Rows(0).Item("QuantityOrdered") Then
                                ''for if there was an accidental closure of the SO this will check to see if the quantity ordered is not the same as the remaining quantity
                                Dim LastDate As DateTime = New DateTime(Now.Year, Now.Month, Now.Day, 8, 0, 0, 0)
                                Dim difference As Integer = SOLineDS.Tables("SOLine").Rows(0).Item("QuantityRemaining") - notificationDS.Tables("NotificationTable").Rows.Count
                                cmd = New SqlCommand("DECLARE @NotificationKey as int = (SELECT isnull(MAX(NotificationKey) + 1, 1) FROM NotificationTable), @GroupID as int = (SELECT isnull(MAX(GroupID), 1) FROM NotificationTable), @EmployeeID as varchar(50) = (SELECT EmployeeID FROM EmployeeData WHERE SalesPersonID = (SELECT SalesPerson FROM SalesOrderHeaderTable WHERE SalesOrderKey = @SalesOrderNumber AND DivisionKey = @DivisionID)); INSERT INTO NotificationTable (NotificationKey, DivisionID, EmployeeID, NotificationType, ReferenceNumber, Frequency, NotificationDateTime, Details, Status, AddedBy, GroupID, SnoozeTime) VALUES", con)
                                cmd.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                                cmd.Parameters.Add("@SalesOrderNumber", SqlDbType.Int).Value = Val(cboSalesOrderNumber.Text)
                                cmd.Parameters.Add("@AddedBy", SqlDbType.VarChar).Value = EmployeeLoginName
                                ''goes through and creates the new row to add for notifications
                                For i As Integer = 0 To difference - 1
                                    Dim details As String = "Customer: " + cboCustomerID.Text + Environment.NewLine + "Part Number(s): "
                                    If i = 0 Then
                                        cmd.CommandText += " (@NotificationKey + " + i.ToString() + ", @DivisionID, @EmployeeID, 'Recurring Invoice', @SalesOrderNumber, 'Recurring', @NotificationDateTime" + i.ToString() + ", @Details" + i.ToString() + ", 'ACTIVE', @AddedBy, @GroupID, @NotificationDateTime" + i.ToString() + ")"
                                    Else
                                        cmd.CommandText += ", (@NotificationKey + " + i.ToString() + ", @DivisionID, @EmployeeID, 'Recurring Invoice', @SalesOrderNumber, 'Recurring', @NotificationDateTime" + i.ToString() + ", @Details" + i.ToString() + ", 'ACTIVE', @AddedBy, @GroupID, @NotificationDateTime" + i.ToString() + ")"
                                    End If
                                    ''goes through the all the lines and adds the part numbers for each who should be on the notification
                                    For j As Integer = 0 To SOLineDS.Tables("SOLine").Rows.Count - 1
                                        If SOLineDS.Tables("SOLine").Rows(j).Item("QuantityRemaining") >= notificationDS.Tables("NotificationTable").Rows.Count + i Then
                                            If j = 0 Then
                                                details += SOLineDS.Tables("SOLine").Rows(j).Item("ItemID").ToString()
                                            Else
                                                details += ", " + SOLineDS.Tables("SOLine").Rows(j).Item("ItemID").ToString()
                                            End If
                                        End If
                                    Next
                                    cmd.Parameters.Add("@Details" + i.ToString(), SqlDbType.VarChar).Value = details

                                    cmd.Parameters.Add("@NotificationDateTime" + i.ToString(), SqlDbType.DateTime).Value = LastDate.AddMonths(i + 1)
                                Next
                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                            End If
                        End If
                    End If
                    Dim partLine As Integer = 0
                    For i As Integer = 0 To SOLineDS.Tables("SOLine").Rows.Count - 1
                        If SOLineDS.Tables("SOLine").Rows(i).Item("ItemID").ToString.Equals(part) Then
                            partLine = i
                        End If
                    Next
                    ''selects all the notifications for the sales order that havent been completed
                    cmd = New SqlCommand("SELECT NotificationKey, Details FROM NotificationTable WHERE ReferenceNumber = @ReferenceNumber AND Status <> 'COMPLETED' AND Details Like @PartNumber AND NotificationType = 'Recurring Invoice' ORDER BY NotificationDateTime;", con)
                    cmd.Parameters.Add("@ReferenceNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                    cmd.Parameters.Add("@PartNumber", SqlDbType.VarChar).Value = "%" + part + "%"

                    notificationDS = New DataSet()
                    adap.SelectCommand = cmd

                    If con.State = ConnectionState.Closed Then con.Open()
                    adap.Fill(notificationDS, "NotificationTable")

                    cmd = New SqlCommand("UPDATE NotificationTable SET Details = @Details WHERE NotificationKey = @NotificationKey", con)
                    cmd.Parameters.Add("@Details", SqlDbType.VarChar)
                    cmd.Parameters.Add("@Details", SqlDbType.Int)

                    If notificationDS.Tables("NotificationTable").Rows.Count <> SOLineDS.Tables("SOLine").Rows(partLine).Item("QuantityRemaining") Then
                        Dim difference As Integer = notificationDS.Tables("NotificationTable").Rows.Count - SOLineDS.Tables("SOLine").Rows(partLine).Item("QuantityRemaining")
                        If difference > 0 Then
                            ''goes through all the SO lines and will remove the part number if it was found to not be the same number of notifications as there are currenty
                            For i As Integer = notificationDS.Tables("NotificationTable").Rows.Count - (1 + difference) To notificationDS.Tables("NotificationTable").Rows.Count - 1
                                cmd.Parameters("Details").Value = notificationDS.Tables("NotificationTable").Rows(i).Item("Details").ToString.Replace(", " + part, "").Replace(" " + part + ",", "").Replace(" " + part, "")
                                cmd.Parameters("NotificationKey").Value = notificationDS.Tables("NotificationTable").Rows(i).Item("NotificationKey")
                                If con.State = ConnectionState.Closed Then con.Open()
                                cmd.ExecuteNonQuery()
                            Next
                        End If
                    End If
                ElseIf notificationDS.Tables("NotificationTable").Rows.Count > 0 Then
                    ''DELETES all notifications that were recurring notifications and still active
                    cmd = New SqlCommand("DELETE NotificationTable WHERE ", con)
                    Dim isFirst As Boolean = True
                    For i As Integer = 0 To notificationDS.Tables("NotificationTable").Rows.Count - 1
                        If isFirst Then
                            isFirst = False
                            cmd.CommandText += "NotificationKey = @NotificationKey" + i.ToString()
                        Else
                            cmd.CommandText += " OR NotificationKey = @NotificationKey" + i.ToString()
                        End If
                        cmd.Parameters.Add("@NotificationKey" + i.ToString(), SqlDbType.Int).Value = notificationDS.Tables("NotificationTable").Rows(i).Item("NotificationKey")
                    Next
                    If con.State = ConnectionState.Closed Then con.Open()
                    cmd.ExecuteNonQuery()
                End If
                If con.State = ConnectionState.Open Then con.Close()
            End If
        End If
    End Sub

    Public Sub UpdateNotificationTable()
        'Declare and fill variables
        Dim Details As String = "Customer: " + cboCustomerName.Text + Environment.NewLine
        Details += "Lead Time: " + txtLeadTime.Text + Environment.NewLine
        Details += "Part Description: " + cboPartDescription.Text + Environment.NewLine
        Details += "Quantity: " + txtQuantityOrdered.Text + Environment.NewLine

        Dim NoteEmployeeID As String = ""
        Dim LastNoteNumber, NextNoteNumber As Integer
        Dim NoteGroupID As Integer = 0
        Dim NoteLeadTime As DateTime

        'Get Note Key
        Dim MAXStatement As String = "SELECT MAX(NotificationKey) FROM NotificationTable"
        Dim MAXCommand As New SqlCommand(MAXStatement, con)

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            LastNoteNumber = CInt(MAXCommand.ExecuteScalar)
        Catch ex As System.Exception
            LastNoteNumber = 0
        End Try
        con.Close()

        NextNoteNumber = LastNoteNumber + 1

        'Get Employee Number
        Dim NoteEmployeeIDStatement As String = "SELECT EmployeeID FROM EmployeeData WHERE LoginName = @LoginName"
        Dim NoteEmployeeIDCommand As New SqlCommand(NoteEmployeeIDStatement, con)
        NoteEmployeeIDCommand.Parameters.Add("@LoginName", SqlDbType.VarChar).Value = EmployeeLoginName

        If con.State = ConnectionState.Closed Then con.Open()
        Try
            NoteEmployeeID = CStr(NoteEmployeeIDCommand.ExecuteScalar)
        Catch ex As Exception
            NoteEmployeeID = ""
        End Try
        con.Close()

        'Get DateTime from Lead Time
        Dim TempLeadTime As String = txtLeadTime.Text
        TempLeadTime = TempLeadTime.Replace("/", "-")

        If TempLeadTime.Length = 10 Then
            NoteLeadTime = CDate(TempLeadTime)
            NoteLeadTime = NoteLeadTime.AddDays(-7)

            Try
                'Add To Table
                cmd = New SqlCommand("Insert Into NotificationTable(NotificationKey, DivisionID, EmployeeID, NotificationType, ReferenceNumber, Frequency, NotificationDateTime, Details, Status, AddedBy, GroupID, SnoozeTime) Values (@NotificationKey, @DivisionID, @EmployeeID, @NotificationType, @ReferenceNumber, @Frequency, @NotificationDateTime, @Details, @Status, @AddedBy, @GroupID, @SnoozeTime)", con)

                With cmd.Parameters
                    .Add("@NotificationKey", SqlDbType.VarChar).Value = NextNoteNumber
                    .Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text
                    .Add("@EmployeeID", SqlDbType.VarChar).Value = NoteEmployeeID
                    .Add("@NotificationType", SqlDbType.VarChar).Value = "Sales Order Lead Time"
                    .Add("@ReferenceNumber", SqlDbType.VarChar).Value = cboSalesOrderNumber.Text
                    .Add("@Frequency", SqlDbType.VarChar).Value = "Only Once"
                    .Add("@NotificationDateTime", SqlDbType.VarChar).Value = NoteLeadTime
                    .Add("@Details", SqlDbType.VarChar).Value = Details
                    .Add("@Status", SqlDbType.VarChar).Value = "ACTIVE"
                    .Add("@AddedBy", SqlDbType.VarChar).Value = EmployeeLoginName
                    .Add("@GroupID", SqlDbType.VarChar).Value = NoteGroupID
                    .Add("@SnoozeTime", SqlDbType.VarChar).Value = NoteLeadTime.AddDays(+7)
                End With

                If con.State = ConnectionState.Closed Then con.Open()
                cmd.ExecuteNonQuery()
                con.Close()
            Catch ex As Exception
                'Continue
            End Try
        End If
    End Sub

    'Link Label Clicked Event

    Private Sub llLoadNextFIFOCost_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llLoadNextFIFOCost.LinkClicked
        LoadNextPieceSold()
        GlobalNextPieceSold = NextPieceSold

        Using NewNextPieceSold As New LoadNextPieceSold
            Dim Result = NewNextPieceSold.ShowDialog()
        End Using
    End Sub

    Private Sub llCustomerID_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llCustomerID.LinkClicked
        GlobalDivisionCode = cboDivisionID.Text
        GlobalCustomerID = cboCustomerID.Text

        Using NewCustomerInfoPopup As New CustomerInfoPopup
            Dim Result = NewCustomerInfoPopup.ShowDialog()
        End Using
    End Sub

    Private Sub llLastCost_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llLastCost.LinkClicked
        GlobalDivisionCode = cboDivisionID.Text
        GlobalPOPartNumber = cboPartNumber.Text

        If cboDivisionID.Text = "TWD" Or cboDivisionID.Text = "TFP" Then
            Using NewSOManufacturedCostPopup As New SOManufacturedCostPopup
                Dim Result = NewSOManufacturedCostPopup.ShowDialog()
            End Using
        Else
            Using NewSOPurchaseCostPopup As New SOPurchaseCostPopup
                Dim Result = NewSOPurchaseCostPopup.ShowDialog()
            End Using
        End If
    End Sub

    Private Sub llLastPrice_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llLastPrice.LinkClicked
        If cboPartNumber.Text = "" And dgvSalesOrderLines.RowCount <> 0 Then
            Dim RowPartNumber As String = ""

            Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

            RowPartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value

            GlobalSOPartNumber = RowPartNumber
        Else
            GlobalSOPartNumber = cboPartNumber.Text
        End If

        GlobalDivisionCode = cboDivisionID.Text
        GlobalSOCustomerID = cboCustomerID.Text

        Using NewSOSalesPricePopup As New SOSalesPricePopup
            Dim Result = NewSOSalesPricePopup.ShowDialog()
        End Using
    End Sub

    Private Sub llPriceBracket_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llPriceBracket.LinkClicked
        If cboPartNumber.Text = "" And dgvSalesOrderLines.RowCount <> 0 Then
            Dim RowPartNumber As String = ""

            Dim RowIndex As Integer = Me.dgvSalesOrderLines.CurrentCell.RowIndex

            RowPartNumber = Me.dgvSalesOrderLines.Rows(RowIndex).Cells("ItemIDColumn").Value

            GlobalSOPartNumber = RowPartNumber
        Else
            GlobalSOPartNumber = cboPartNumber.Text
        End If

        GlobalDivisionCode = cboDivisionID.Text
        GlobalPriceBracketSource = "Sales Order"

        Using NewSOPriceBracket As New SOPriceBracket
            Dim result = NewSOPriceBracket.ShowDialog()
        End Using

        txtPricePerUnit.Text = GlobalSOPriceBracket
    End Sub

    'Combo Box Key Press, Key Leave, Key Up, Key Down events

    Private Sub cboShipToID_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboShipToID.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboCustomerID_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboCustomerID.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboCustomerName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboCustomerName.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboShipMethod_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboShipMethod.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboShipVia_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboShipVia.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboCustomerClass_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboCustomerClass.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboSalesPersonID_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboSalesPersonID.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboEditPartDescription_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboEditPartDescription.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboEditPartNumber_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboEditPartNumber.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboInsertDescription_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboInsertDescription.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboInsertPartNumber_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboInsertPartNumber.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboPartDescription_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboPartDescription.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboPartNumber_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboPartNumber.KeyPress
        If Char.IsLetter(e.KeyChar) Then
            e.KeyChar = Char.ToUpper(e.KeyChar)
        End If
    End Sub

    Private Sub cboPartNumber_KeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboPartNumber.KeyDown
        If e.KeyCode = Keys.Enter Then
            cboPartDescription.SelectAll()
            cboPartDescription.Focus()
        End If
    End Sub

    Private Sub SOForm_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyUp
        If shouldChangeState(e) Then
            needsSaved = True
        End If
    End Sub

    Private Sub tabExpandedMenu_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles tabExpandedMenu.KeyUp
        If shouldChangeNeedSaved(e) Then
            needsSaved = True
        End If
    End Sub

    Private Sub cboShipVia_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboShipVia.Leave
        If cboShipVia.Text <> "" Then
            Try
                ShipViaCode = cboShipVia.Text
                ShipViaCode = ShipViaCode.Substring(0, 4)

                If ShipViaCode = "FDX-" Or ShipViaCode = "UPS-" Then
                    Dim FreightAccountNumber As String = ""

                    'get Account Number from customer
                    Dim FreightAccountNumberStatement As String = "SELECT ShippingAccount FROM CustomerList WHERE CustomerID = @CustomerID AND DivisionID = @DivisionID"
                    Dim FreightAccountNumberCommand As New SqlCommand(FreightAccountNumberStatement, con)
                    FreightAccountNumberCommand.Parameters.Add("@CustomerID", SqlDbType.VarChar).Value = cboCustomerID.Text
                    FreightAccountNumberCommand.Parameters.Add("@DivisionID", SqlDbType.VarChar).Value = cboDivisionID.Text

                    If con.State = ConnectionState.Closed Then con.Open()
                    Try
                        FreightAccountNumber = CStr(FreightAccountNumberCommand.ExecuteScalar)
                    Catch ex As Exception
                        FreightAccountNumber = ""
                    End Try
                    con.Close()

                    txtFreightAccount.Text = FreightAccountNumber
                End If
            Catch ex As Exception
                'Skip
            End Try
        End If
    End Sub

    Private Sub PrintBarcodeLine(ByVal labels As Integer)
        ' Click event handler for a button - designed to show how to use the
        ' SendBytesToPrinter function to send a string to the printer.

        Dim s As String = ""
        Dim pd As New PrintDialog()
        Dim i As Integer
        pd.UseEXDialog = True
        pd.PrinterSettings = New PrinterSettings()
        Dim printers(pd.PrinterSettings.InstalledPrinters.Count) As [String]
        pd.PrinterSettings.InstalledPrinters.CopyTo(printers, 0)
        pd.PrinterSettings.PrinterName = ""
        ''checks to see if the designated printer is present
        While i < printers.Count() - 1
            If String.IsNullOrEmpty(printers(i)) = False And printers(i).Contains("Zebra2X4TWE") Then
                pd.PrinterSettings.PrinterName = printers(i)
            End If
            If String.IsNullOrEmpty(printers(i)) = False And printers(i).Contains("Zebra2X4SLC") Then
                pd.PrinterSettings.PrinterName = printers(i)
            End If
            i += 1
        End While
        ''checks to see if a printer was selected and if not will show the dialog
        If String.IsNullOrEmpty(pd.PrinterSettings.PrinterName) Then
            ' Open the printer dialog box, and then allow the user to select a printer.
            If pd.ShowDialog() = Windows.Forms.DialogResult.OK Then
                sendToPrinter(pd.PrinterSettings.PrinterName)
            End If
        Else
            sendToPrinter(pd.PrinterSettings.PrinterName)
        End If
    End Sub

    Private Sub sendToPrinter(ByVal printerName As String)
        Dim s As String = ""
        For i = 0 To LabelLines
            ' You need a string to send.
            s += LabelFormat(i) + Environment.NewLine
        Next i
        If s <> "" Then
            RawPrinter.SendStringToPrinter(printerName, s)
        End If
    End Sub

End Class